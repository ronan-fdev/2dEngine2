%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1505.m00.i125.n021.P.c25.266972300 Animation of explosion effect in cartoon comic style.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Антон
%%CreationDate: 5/14/2015
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1505.m00.i125.n021.P.c25.266972300 Animation of explosion effect in cartoon comic style</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-05-14T09:04:15+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-05-14T09:04:15+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-05-14T09:04:15+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A82ZkNjsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirfFuIah4kkA9qjr+vBa0nuj+WJ9X8u6t&#xA;qFipe70Yxz3MI3LWkgYPIo/4qZAW/wAlq9swNRrhhzQhP6clgH+kOn+d08x5s4wsEjok9ktu15At&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:0c0cc753-c347-034e-88ac-0dad1cdf1800</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0c0cc753-c347-034e-88ac-0dad1cdf1800</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8f56b6b8-36b7-4509-81ef-5cf6705e6b71</stRef:instanceID>
            <stRef:documentID>xmp.did:a32f32c8-5e91-644c-87ee-76ac52c25308</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0c0cc753-c347-034e-88ac-0dad1cdf1800</stEvt:instanceID>
                  <stEvt:when>2015-05-14T09:04:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.0862745 .0509804 .117647 rgb
f
88.5478 87.3666 mo
88.5478 87.3666 78.9782 69.4382 72.7209 67.2916 cv
72.1435 67.0935 71.4151 67.0063 70.5818 67.0063 cv
64.4815 67.0063 52.7155 71.674 52.7155 71.674 cv
52.7155 71.674 64.5092 63.4464 67.2842 58.4413 cv
67.7661 57.5723 66.8806 56.7466 62.7908 54.7966 cv
64.1826 55.0053 65.34 55.101 66.2801 55.101 cv
68.4867 55.101 69.4981 54.5745 69.5456 53.7483 cv
69.9531 46.6799 66.8054 36.7853 66.8054 36.7853 cv
66.8054 36.7853 72.543 46.2246 78.8003 48.3712 cv
79.2841 48.5372 79.8676 48.6119 80.5242 48.6119 cv
86.3874 48.6119 98.1486 42.6642 98.1486 42.6642 cv
98.1486 42.6642 88.4618 52.3083 84.2201 58.2905 cv
83.1813 59.7556 89.461 61.6679 94.9348 63.7643 cv
94.7737 64.496 84.8918 63.8068 84.9189 64.8124 cv
85.1405 73.0424 88.5478 87.3666 88.5478 87.3666 cv
.87451 .811765 .168627 rgb
f
214.758 84.1131 mo
214.758 84.1131 214.341 79.3427 213.309 74.2035 cv
215.289 71.4774 216.838 69.9029 217.525 69.9029 cv
217.561 69.9029 217.594 69.9071 217.625 69.9157 cv
215.902 76.518 214.758 84.1131 214.758 84.1131 cv
193.596 79.7558 mo
195.855 77.5506 198.003 74.9588 199.855 72.4172 cv
200.743 72.1592 201.634 71.9142 202.516 71.6899 cv
199.572 74.6125 196.284 77.7645 193.596 79.7558 cv
230.473 74.3692 mo
230.473 74.3692 228.306 71.5579 225.821 68.8524 cv
225.745 68.2528 225.686 67.6705 225.647 67.1091 cv
225.644 67.0699 225.643 67.0558 225.698 67.0116 cv
227.603 70.023 230.473 74.3692 230.473 74.3692 cv
237.932 70.2256 mo
236.215 69.295 231.013 67.1562 227.458 65.7424 cv
228.276 65.4022 229.181 65.2389 230.097 65.1913 cv
232.893 67.0957 235.87 68.9927 237.932 70.2256 cv
202.982 67.74 mo
205.224 64.0591 206.409 61.2181 205.783 61.007 cv
200.224 59.1297 181.994 58.6237 181.994 58.6237 cv
181.994 58.6237 189.664 57.8346 196.684 56.5738 cv
203.202 58.7345 209.3 61.1153 208.7 62.1857 cv
207.722 63.9345 205.572 65.8655 202.982 67.74 cv
225.3 57.5044 mo
226.835 55.8158 228.793 53.8763 230.878 51.9062 cv
230.995 51.9067 231.112 51.9069 231.23 51.9069 cv
240.15 51.9067 253.263 50.751 253.263 50.751 cv
253.263 50.751 233.836 54.4547 225.3 57.5044 cv
205.831 52.1213 mo
202.957 50.2308 196.907 46.8637 194.01 44.1213 cv
195.723 45.1213 204.866 48.6377 206.468 48.8862 cv
205.333 47.3814 200.225 41.6351 200.225 41.6351 cv
200.225 41.6351 203.963 45.0997 207.249 47.1295 cv
207.51 49.2522 207.511 50.9311 207.001 51.4797 cv
206.639 51.7332 206.245 51.9451 205.831 52.1213 cv
222.853 51.8136 mo
221.56 51.8137 221.436 49.654 222.273 45.0723 cv
224.224 44.23 226.775 42.4333 230.059 39.149 cv
225.26 44.9647 222.796 51.0608 224.369 51.4405 cv
224.382 51.4437 224.395 51.4469 224.408 51.45 cv
223.979 51.5804 223.562 51.6904 223.161 51.7779 cv
223.051 51.8017 222.949 51.8136 222.853 51.8136 cv
216.204 46.5648 mo
215.996 46.5648 215.828 46.5046 215.702 46.3913 cv
214.824 45.6008 213.804 44.5724 212.743 43.4428 cv
213.592 37.6471 213.021 30.3654 213.021 30.3654 cv
213.021 30.3654 215.396 40.0777 216.904 43.8471 cv
217.157 44.4808 217.618 45.0736 218.342 45.4074 cv
217.435 46.213 216.705 46.5647 216.204 46.5648 cv
.913725 .478431 .117647 rgb
f
233.62 94.472 mo
233.62 94.472 225.04 78.2892 217.774 70.0095 cv
217.733 69.9629 217.683 69.9318 217.625 69.9157 cv
217.594 69.9071 217.561 69.9029 217.525 69.9029 cv
216.838 69.9029 215.289 71.4774 213.309 74.2035 cv
211.307 76.9579 208.864 80.8882 206.422 85.5574 cv
211.05 72.7256 209.969 70.585 208.257 70.585 cv
208.156 70.585 208.052 70.5925 207.948 70.6057 cv
206.285 70.8159 204.425 71.2043 202.516 71.6899 cv
201.634 71.9142 200.743 72.1592 199.855 72.4172 cv
193.149 74.3651 186.674 77.0463 186.674 77.0463 cv
186.674 77.0463 196.297 72.5801 202.982 67.74 cv
205.572 65.8655 207.722 63.9345 208.7 62.1857 cv
209.3 61.1153 203.202 58.7345 196.684 56.5738 cv
195.698 56.2469 194.701 55.9249 193.718 55.6134 cv
194.237 55.6534 194.75 55.6724 195.256 55.6724 cv
197.477 55.6724 199.557 55.3075 201.343 54.7602 cv
198.971 53.5451 197.437 52.571 197.437 52.571 cv
197.437 52.571 199.102 52.9195 201.18 52.9195 cv
202.672 52.9194 204.378 52.7395 205.831 52.1213 cv
206.245 51.9451 206.639 51.7332 207.001 51.4797 cv
207.511 50.9311 207.51 49.2522 207.249 47.1295 cv
206.59 41.7891 204.278 33.6426 204.278 33.6426 cv
204.278 33.6426 208.799 39.2434 212.743 43.4428 cv
213.804 44.5724 214.824 45.6008 215.702 46.3913 cv
215.828 46.5046 215.996 46.5648 216.204 46.5648 cv
216.705 46.5647 217.435 46.213 218.342 45.4074 cv
219.817 44.097 221.761 41.5854 223.956 37.4317 cv
223.215 40.4808 222.647 43.0195 222.273 45.0723 cv
221.436 49.654 221.56 51.8137 222.853 51.8136 cv
222.949 51.8136 223.051 51.8017 223.161 51.7779 cv
223.562 51.6904 223.979 51.5804 224.408 51.45 cv
232.54 48.9821 245.179 39.2798 245.179 39.2798 cv
245.179 39.2798 237.404 45.7419 230.878 51.9062 cv
228.793 53.8763 226.835 55.8158 225.3 57.5044 cv
225.277 57.5291 225.255 57.5542 225.232 57.5789 cv
223.802 59.1575 234.144 62.7485 242.883 63.5153 cv
241.43 63.4494 240.093 63.419 238.868 63.419 cv
236.737 63.419 234.942 63.511 233.448 63.6689 cv
235.496 65.1887 236.784 66.3355 236.784 66.3355 cv
236.784 66.3355 233.778 65.1761 230.696 65.1761 cv
230.496 65.1761 230.296 65.181 230.097 65.1913 cv
229.181 65.2389 228.276 65.4022 227.458 65.7424 cv
227.418 65.7589 227.378 65.7759 227.339 65.7933 cv
226.188 66.6882 225.816 66.9178 225.698 67.0116 cv
225.643 67.0558 225.644 67.0699 225.647 67.1091 cv
225.686 67.6705 225.745 68.2528 225.821 68.8524 cv
227.136 79.1441 233.62 94.472 233.62 94.472 cv
.87451 .811765 .168627 rgb
f
351.519 59.2124 mo
341.703 61.5224 319.61 65.5501 319.61 65.5501 cv
319.61 65.5501 337.591 65.1909 344.623 70.5531 cv
346.585 72.0494 342.239 79.6008 333.238 88.8496 cv
344.064 81.5031 362.855 62.1464 361.554 74.4268 cv
370.605 104.236 li
370.605 104.236 370.412 82.3519 369.726 79.1781 cv
371.807 80.4671 378.958 84.4535 385.991 90.1684 cv
377.639 77.8593 376.125 76.0838 377.603 75.5544 cv
385.116 72.8633 404.455 79.6177 404.455 79.6177 cv
404.455 79.6177 382.767 70.5253 376.146 64.3249 cv
374.639 62.9141 388.583 53.1565 404.016 40.4921 cv
388.629 49.2844 372.162 57.5791 372.016 55.8722 cv
370.984 43.8031 377.355 20.1568 377.355 20.1568 cv
377.355 20.1568 372.601 36.6451 364.879 46.6034 cv
364.787 46.7229 358.784 51.8158 358.646 51.8835 cv
354.679 50.1431 340.711 28.6225 340.711 28.6225 cv
340.711 28.6225 344.745 40.0904 352.642 48.5208 cv
350.788 46.704 331.492 30.4879 328.842 26.8641 cv
334.362 35.1602 353.784 58.6793 351.519 59.2124 cv
cp
1 .47451 0 rgb
f
373.115 55.1676 mo
379.447 45.8823 394.037 33.8199 394.037 33.8199 cv
394.037 33.8199 380.067 39.7717 370.251 40.6548 cv
367.512 40.9012 365.029 40.9824 367.856 27.3638 cv
363.009 37.1583 355.851 34.77 352.655 31.1425 cv
347.328 25.0966 343.526 18.5556 343.526 18.5556 cv
343.526 18.5556 347.4 31.1286 347.662 42.3733 cv
347.669 42.6714 347.561 42.9896 347.351 43.3144 cv
343.224 45.9185 335.603 43.021 335.603 43.021 cv
335.603 43.021 337.518 44.6306 340.471 46.7233 cv
337.79 47.2299 334.554 47.2799 331.105 46.4668 cv
340.384 51.0806 346.367 53.216 345.55 54.7635 cv
341.399 62.629 322.999 74.3 322.999 74.3 cv
322.999 74.3 338.914 69.3807 349.023 69.4956 cv
351.323 69.5217 353.216 71.9732 347.539 89.5416 cv
353.703 76.9414 357.374 72.0435 358.778 73.3369 cv
368.708 82.4825 381.264 106.716 381.264 106.716 cv
381.264 106.716 373.841 81.0443 372.696 67.0474 cv
372.682 66.8793 372.709 66.7147 372.771 66.5551 cv
377.342 65.0012 384.416 69.0472 384.416 69.0472 cv
384.416 69.0472 382.799 67.2487 380.238 64.8017 cv
383.129 64.9007 386.946 65.3611 391.851 66.3461 cv
381.07 63.6797 371.654 57.3104 373.115 55.1676 cv
cp
.94902 .847059 .0666667 rgb
f
375.006 52.9999 mo
375.006 63.2932 366.661 71.6376 356.368 71.6376 cv
346.075 71.6376 337.731 63.2932 337.731 52.9999 cv
337.731 42.7066 346.075 34.3622 356.368 34.3623 cv
366.662 34.3623 375.006 42.7066 375.006 52.9999 cv
cp
.839216 .831373 .74902 rgb
f
351.895 63.9961 mo
351.895 70.275 346.805 75.3651 340.526 75.3651 cv
334.247 75.3651 329.157 70.275 329.157 63.9961 cv
329.157 57.7172 334.247 52.6272 340.526 52.6272 cv
346.805 52.6272 351.895 57.7172 351.895 63.9961 cv
cp
f
384.714 55.1432 mo
384.714 62.9147 378.414 69.2147 370.643 69.2147 cv
362.871 69.2147 356.571 62.9147 356.571 55.1432 cv
356.571 47.3718 362.871 41.0718 370.643 41.0718 cv
378.414 41.0718 384.714 47.3718 384.714 55.1432 cv
cp
f
378.92 74.6196 mo
378.92 82.0308 372.912 88.0387 365.501 88.0387 cv
358.089 88.0387 352.082 82.0308 352.082 74.6196 cv
352.082 67.2084 358.089 61.2005 365.501 61.2005 cv
372.912 61.2005 378.92 67.2084 378.92 74.6196 cv
cp
f
390.662 72.0103 mo
390.662 77.8775 385.905 82.6338 380.038 82.6338 cv
374.171 82.6338 369.415 77.8775 369.415 72.0103 cv
369.415 66.1432 374.171 61.3869 380.038 61.3869 cv
385.905 61.3869 390.662 66.1432 390.662 72.0103 cv
cp
f
400.726 58.1253 mo
400.726 65.6909 394.593 71.824 387.027 71.824 cv
379.462 71.824 373.328 65.6908 373.328 58.1253 cv
373.328 50.5597 379.462 44.4266 387.027 44.4266 cv
394.593 44.4266 400.726 50.5597 400.726 58.1253 cv
cp
f
361.587 73.5945 mo
361.587 79.3073 356.956 83.9384 351.243 83.9384 cv
345.53 83.9384 340.899 79.3073 340.899 73.5945 cv
340.899 67.8818 345.53 63.2506 351.243 63.2506 cv
356.956 63.2506 361.587 67.8818 361.587 73.5945 cv
cp
f
395.668 64.9132 mo
393.261 67.6034 389.501 69.1024 385.111 68.832 cv
385.905 68.1082 386.598 67.1886 387.219 66.0613 cv
388.114 64.4341 388.471 62.6543 388.353 60.926 cv
388.177 61.8953 387.847 62.8527 387.346 63.7622 cv
385.284 67.5106 380.999 70.065 375.433 70.1956 cv
379.545 71.1851 382.371 70.8871 384.488 69.3395 cv
385.927 69.9051 387.217 70.2087 388.398 70.2652 cv
388.222 75.2758 384.094 79.2989 379.042 79.2989 cv
378.279 79.2989 377.54 79.2034 376.83 79.0306 cv
376.586 78.97 li
374.323 78.3534 372.398 76.9081 371.159 74.9804 cv
371.915 77.2335 373.508 79.1026 375.563 80.2274 cv
373.342 82.6192 370.177 84.1225 366.663 84.1225 cv
363.068 84.1225 359.833 82.5527 357.605 80.0639 cv
357.485 79.9299 357.371 79.7905 357.257 79.6511 cv
358.489 79.8795 359.828 79.8021 361.313 79.4643 cv
363.124 79.0526 364.691 78.1366 365.905 76.9005 cv
365.064 77.4131 364.129 77.8023 363.117 78.0325 cv
358.944 78.981 354.189 77.4758 350.393 73.402 cv
352.1 76.5977 353.884 78.4648 355.971 79.2836 cv
355.496 79.487 355.003 79.6549 354.491 79.7758 cv
353.821 79.9343 353.124 80.0224 352.405 80.0224 cv
348.317 80.0224 344.852 77.3071 343.715 73.5856 cv
346.898 72.5237 349.382 69.9229 350.275 66.6671 cv
348.765 69.092 346.257 70.8297 343.33 71.3103 cv
343.033 71.3592 342.732 71.3982 342.427 71.4203 cv
342.183 71.4381 341.937 71.449 341.689 71.449 cv
336.114 71.449 331.579 66.9136 331.579 61.3391 cv
331.579 60.4145 331.706 59.5195 331.939 58.668 cv
330.975 60.2163 330.416 62.0418 330.416 63.9962 cv
330.416 69.5707 334.952 74.1061 340.526 74.1061 cv
341.085 74.1061 341.633 74.058 342.167 73.9703 cv
342.365 78.8059 346.359 82.6795 351.243 82.6795 cv
352.799 82.6795 354.264 82.2832 355.546 81.5904 cv
357.748 84.7251 361.388 86.7796 365.501 86.7796 cv
370.068 86.7796 374.047 84.2431 376.125 80.5092 cv
377.317 81.0608 378.64 81.3747 380.038 81.3747 cv
385.201 81.3747 389.402 77.1738 389.402 72.0104 cv
389.402 71.412 389.341 70.8285 389.231 70.2618 cv
391.45 70.1382 393.285 69.0709 395.026 67.1246 cv
396.265 65.7405 397.013 64.0865 397.287 62.376 cv
396.897 63.2809 396.36 64.1396 395.668 64.9132 cv
cp
.698039 .690196 .607843 rgb
f
371.963 45.5064 mo
372.044 45.518 li
374.583 45.9911 376.861 47.2139 378.638 48.9493 cv
378.682 48.9965 li
377.591 49.1572 376.547 49.4931 375.581 49.9741 cv
374.82 48.1821 373.568 46.6279 371.963 45.5064 cv
cp
387.027 45.6857 mo
384.763 45.6857 382.64 46.2968 380.809 47.3584 cv
378.465 44.3047 374.781 42.3309 370.643 42.3309 cv
370.454 42.3309 370.267 42.3354 370.08 42.3435 cv
366.899 38.2569 361.937 35.6213 356.368 35.6213 cv
346.785 35.6213 338.99 43.4172 338.99 52.9998 cv
338.99 53.1516 338.996 53.3019 339 53.4527 cv
336.061 54.0144 333.774 56.1518 332.914 58.8652 cv
333.059 58.7504 li
334.42 56.7347 336.545 55.2508 339.081 54.7536 cv
339.293 54.7122 339.506 54.6751 339.724 54.6477 cv
339.864 54.63 340.004 54.6177 340.144 54.6063 cv
340.211 54.169 340.3 53.7387 340.4 53.3127 cv
342.197 45.6325 349.097 39.894 357.318 39.894 cv
360.905 39.894 364.24 40.9886 367.011 42.8585 cv
367.498 43.1873 367.966 43.5422 368.416 43.917 cv
368.164 43.8577 367.908 43.8069 367.648 43.7659 cv
363.577 43.1241 359.692 44.9456 357.493 48.1212 cv
357.363 48.1035 li
350.972 47.4672 345.09 50.6997 342.034 55.8945 cv
342.144 55.8396 342.257 55.7888 342.369 55.7354 cv
346.226 52.1273 351.555 50.1339 357.224 50.6983 cv
362.874 51.2607 367.691 54.2486 370.762 58.5234 cv
369.034 53.7841 365.11 50.0349 360.103 48.6293 cv
361.341 47.7943 363.633 46.6013 367.082 46.2298 cv
370.353 45.8773 373.384 47.6706 375.308 50.1084 cv
373.807 50.9114 372.512 52.0766 371.556 53.5076 cv
371.78 53.4166 li
374.422 51.2141 377.961 50.1161 381.626 50.6939 cv
385.278 51.2696 388.299 53.3914 390.137 56.285 cv
389.095 52.8239 386.282 50.0371 382.59 49.1656 cv
384.002 48.6072 385.538 48.2968 387.146 48.2968 cv
393.366 48.2968 398.535 52.8865 399.444 58.8572 cv
399.458 58.6149 399.467 58.3712 399.467 58.1254 cv
399.467 51.2662 393.886 45.6857 387.027 45.6857 cv
cp
.882353 .933333 .937255 rgb
f
322.712 41.1033 mo
325.625 42.2087 329.826 44.4841 329.855 44.4064 cv
329.885 44.3288 325.198 43.3332 322.285 42.2277 cv
319.372 41.1223 319.247 40.5585 319.306 40.4032 cv
319.365 40.2479 319.799 39.9978 322.712 41.1033 cv
cp
1 .47451 0 rgb
f
366.876 17.6678 mo
366.257 20.7219 364.693 25.2366 364.774 25.2531 cv
364.856 25.2696 365.079 20.483 365.697 17.4289 cv
366.316 14.3749 366.852 14.1604 367.015 14.1934 cv
367.177 14.2264 367.494 14.6138 366.876 17.6678 cv
cp
.94902 .847059 .0666667 rgb
f
402.267 73.5447 mo
399.16 73.3118 394.486 72.3229 394.48 72.4057 cv
394.473 72.4885 399.25 72.1125 402.357 72.3454 cv
405.465 72.5783 405.744 73.0835 405.732 73.2491 cv
405.719 73.4147 405.374 73.7776 402.267 73.5447 cv
cp
f
362.804 97.7953 mo
362.828 94.6795 363.502 89.9494 363.419 89.9487 cv
363.336 89.9481 364.031 94.689 364.007 97.8048 cv
363.983 100.921 363.497 101.234 363.331 101.232 cv
363.165 101.231 362.78 100.911 362.804 97.7953 cv
cp
f
68.1735 198.87 mo
73.9308 189.489 87.6791 177.287 87.6791 177.287 cv
87.6791 177.287 74.2267 183.324 64.6037 184.238 cv
61.9187 184.493 55.0662 191.859 57.1486 178.116 cv
30.3079 165.678 li
30.3079 165.678 55.0468 189.244 54.8573 189.573 cv
41.1096 188.263 30.598 186.708 30.598 186.708 cv
30.598 186.708 39.4027 189.105 42.4189 191.209 cv
39.8042 191.727 22.6184 192.348 19.1788 191.536 cv
31.5314 195.224 51.9814 197.829 51.2567 199.392 cv
19.7971 218.287 li
19.7971 218.287 44.3829 212.813 57.7279 209.606 cv
59.9323 209.076 45.7933 229.965 44.7547 233.602 cv
44.7547 233.602 61.2259 217.746 61.4038 219.687 cv
61.5991 221.816 59.7672 240.308 59.7672 240.308 cv
59.7672 240.308 65.2817 230.38 71.8783 220.996 cv
71.9766 220.856 68.369 210.517 68.4224 210.356 cv
72.8441 208.778 80.0207 212.842 80.0207 212.842 cv
80.0207 212.842 78.3355 211.032 75.6862 208.57 cv
78.5386 208.663 82.3223 209.118 87.205 210.1 cv
76.4485 207.436 66.8449 201.034 68.1735 198.87 cv
cp
.866667 .392157 0 rgb
f
60.0091 171.991 mo
55.4075 177.077 45.588 182.976 45.588 182.976 cv
45.588 182.976 54.5198 180.82 60.519 181.362 cv
62.1929 181.514 63.6988 181.74 60.8484 189.919 cv
64.5967 184.35 68.7172 186.637 70.3417 189.256 cv
73.0492 193.621 74.7945 198.124 74.7945 198.124 cv
74.7945 198.124 73.512 189.85 74.2983 182.807 cv
74.3191 182.62 74.4114 182.434 74.565 182.255 cv
77.2752 181.09 81.6317 183.747 81.6317 183.747 cv
81.6317 183.747 80.611 182.529 79.0045 180.895 cv
80.6654 180.878 82.6225 181.207 84.6363 182.098 cv
79.423 178.187 90.5707 184.42 90.608 183.347 cv
90.9854 172.471 93.2266 156.507 93.2266 156.507 cv
93.2266 156.507 83.3719 177.894 82.0975 177.783 cv
80.69 177.66 78.3341 153.4 78.3341 153.4 cv
77.1876 159.125 73.921 176.021 73.1819 175.058 cv
67.9561 168.247 59.4194 138.93 59.4194 138.93 cv
59.4194 138.93 61.7438 155.77 61.2599 164.628 cv
61.254 164.734 61.2241 164.834 61.1729 164.927 cv
58.2836 165.387 54.3535 162.075 54.3535 162.075 cv
54.3535 162.075 55.1783 163.377 56.5189 165.188 cv
54.7824 164.805 52.5169 164.092 49.6386 162.931 cv
55.9221 165.796 61.071 170.817 60.0091 171.991 cv
cp
f
92.2683 206.591 mo
84.3234 207.526 71.1726 205.169 71.1726 205.169 cv
71.1726 205.169 80.6714 210.131 85.5232 215.212 cv
86.877 216.63 88.026 217.984 79.2446 222.98 cv
86.811 220.966 88.6741 226.137 88.0907 229.684 cv
87.1184 235.595 89.656 253.104 89.656 253.104 cv
89.656 253.104 95.621 228.026 96.5152 227.057 cv
96.6638 226.896 110.278 247.539 110.278 247.539 cv
110.278 247.539 103.082 222.544 104.3 222.254 cv
110.491 220.782 139.737 236.41 139.737 236.41 cv
139.737 236.41 115.326 218.914 110.896 213.185 cv
109.887 211.882 126.075 208.23 141.374 203.023 cv
131.671 205.654 108.59 207.268 108.681 205.855 cv
109.319 195.863 134.827 187.639 134.827 187.639 cv
134.827 187.639 106.242 193.677 99.0184 201.085 cv
98.9316 201.174 98.8288 201.238 98.7129 201.28 cv
98.8212 202.041 112.569 157.525 112.569 157.525 cv
112.569 157.525 93.1425 183.382 92.9293 186.002 cv
91.6989 184.332 91.7516 193.904 90.1149 190.675 cv
93.4346 198.013 94.1018 206.375 92.2683 206.591 cv
cp
.94902 .847059 .0666667 rgb
f
88.2457 198.88 mo
89.5212 200.418 89.1018 202.127 88.0987 202.878 cv
87.0037 203.698 85.2822 202.744 84.2693 201.131 cv
84.5694 203.682 82.1105 205.027 81.1828 204.792 cv
80.3404 204.579 79.4873 204.085 80.2376 201.234 cv
77.6117 204.16 74.9101 203.397 74.2854 202.329 cv
73.678 201.291 75.1911 198.468 79.6927 196.855 cv
77.0292 197.08 75.2223 195.002 75.8266 193.712 cv
76.397 192.494 79.0925 192.278 80.593 192.991 cv
80.2929 191.153 81.0648 188.903 82.5094 188.793 cv
83.9683 188.683 85.6948 190.477 84.832 194.079 cv
86.4826 190.703 88.421 190.959 88.9431 191.552 cv
89.4745 192.155 89.4462 193.216 87.683 195.017 cv
89.8963 194.604 91.3644 195.885 91.3927 196.911 cv
91.4184 197.843 90.7591 198.918 88.2457 198.88 cv
cp
124.323 190.221 mo
124.323 183.352 118.754 177.783 111.884 177.783 cv
111.259 177.783 110.65 177.844 110.049 177.933 cv
108.052 169.587 100.548 163.38 91.5899 163.38 cv
88.6744 163.38 85.9153 164.042 83.4475 165.217 cv
81.1659 162.495 77.7438 160.762 73.9143 160.762 cv
67.8976 160.762 62.8795 165.034 61.7261 170.71 cv
53.47 171.718 47.0736 178.747 47.0736 187.275 cv
47.0736 188.819 47.2873 190.311 47.6793 191.73 cv
43.8087 193.838 41.1817 197.942 41.1817 202.66 cv
41.1817 208.532 45.2559 213.441 50.7283 214.746 cv
51.3851 223.365 58.581 230.155 67.3678 230.155 cv
69.9455 230.155 72.3863 229.57 74.5659 228.527 cv
77.2563 234.137 82.9885 238.011 89.626 238.011 cv
95.9949 238.011 101.529 234.443 104.344 229.198 cv
113.443 226.434 120.067 217.981 120.067 207.979 cv
120.067 205.377 119.615 202.882 118.793 200.563 cv
122.126 198.332 124.323 194.534 124.323 190.221 cv
cp
.839216 .831373 .74902 rgb
f
118.122 181.827 mo
119.891 183.703 120.984 186.223 120.984 188.999 cv
120.984 192.946 118.788 196.388 115.555 198.173 cv
115.368 198.27 li
113.915 199.035 112.263 199.474 110.509 199.474 cv
108.171 199.474 106.017 198.694 104.272 197.394 cv
106.183 199.421 108.885 200.696 111.884 200.696 cv
113.314 200.696 115.157 204.951 114.994 208.879 cv
114.64 217.359 111.468 221.299 104.038 224.29 cv
104.154 223.728 104.248 223.16 104.298 222.578 cv
104.123 223.221 103.896 223.842 103.639 224.447 cv
103.121 225.668 102.452 226.81 101.641 227.837 cv
98.942 231.253 95.9445 232.446 91.2626 232.446 cv
84.0614 232.446 78.004 223.663 78.5761 222.992 cv
80.2924 220.982 81.4796 218.508 81.9129 215.783 cv
80.8491 218.885 78.7719 221.514 76.0857 223.296 cv
75.7732 223.503 75.4529 223.698 75.1243 223.881 cv
73.006 225.064 70.5664 225.93 67.9788 225.747 cv
56.2387 224.918 55.3738 213.022 56.1987 212.812 cv
60.6103 211.69 63.9062 207.755 64.0754 203.037 cv
62.7423 207.29 58.7652 210.384 54.0784 210.384 cv
53.8076 210.384 53.5419 210.364 53.2762 210.344 cv
53.1809 210.337 53.0837 210.337 52.9891 210.327 cv
47.7237 209.781 43.6039 205.318 43.6039 199.91 cv
43.6039 199.783 43.6185 199.659 43.623 199.533 cv
43.3134 200.521 43.1457 201.571 43.1457 202.66 cv
43.1457 208.109 47.3302 212.595 52.654 213.085 cv
52.6507 213.211 52.6381 213.335 52.6381 213.461 cv
52.6381 221.583 59.2457 228.191 67.3678 228.191 cv
70.3996 228.191 73.2124 227.26 75.5569 225.683 cv
77.4217 231.68 83.0233 236.047 89.626 236.047 cv
95.5197 236.047 100.603 232.561 102.955 227.548 cv
111.657 225.295 118.103 217.376 118.103 207.979 cv
118.103 205.028 117.458 202.228 116.315 199.699 cv
119.879 198.025 122.359 194.412 122.359 190.221 cv
122.359 186.784 120.687 183.738 118.122 181.827 cv
cp
.698039 .690196 .607843 rgb
f
108.611 182.365 mo
108.611 172.98 100.975 165.344 91.5899 165.344 cv
88.3968 165.344 85.4087 166.232 82.8526 167.768 cv
83.2119 168.357 83.5135 168.982 83.7522 169.64 cv
85.9874 168.559 88.4868 167.941 91.1317 167.941 cv
100.517 167.941 108.153 175.577 108.153 184.962 cv
108.153 185.524 108.124 186.08 108.07 186.628 cv
108.423 185.265 108.611 183.837 108.611 182.365 cv
cp
.882353 .933333 .937255 rgb
f
63.8984 176.26 mo
63.8982 176.255 li
63.9059 176.103 li
63.8574 176.107 li
63.8984 176.26 li
cp
f
64.5762 172.581 mo
66.069 168.615 69.8911 165.781 74.3726 165.781 cv
77.1474 165.781 79.6675 166.871 81.543 168.639 cv
81.9653 168.329 82.4022 168.039 82.8526 167.768 cv
81.0121 164.751 77.6995 162.726 73.9143 162.726 cv
68.3573 162.726 63.8097 167.079 63.4727 172.553 cv
63.571 172.551 63.6684 172.546 63.7672 172.546 cv
64.0398 172.546 64.3072 172.567 64.5762 172.581 cv
cp
f
81.543 168.639 mo
82.0184 169.087 82.4537 169.577 82.8391 170.106 cv
83.1367 169.94 83.4439 169.789 83.7522 169.64 cv
83.5135 168.982 83.2119 168.357 82.8526 167.768 cv
82.4022 168.039 81.9653 168.329 81.543 168.639 cv
cp
f
63.4727 172.553 mo
55.4865 172.711 49.0375 179.252 49.0375 187.275 cv
49.0375 189.623 49.5923 191.842 50.5733 193.814 cv
50.3686 192.837 50.2596 191.825 50.2596 190.789 cv
50.2596 183.048 56.2627 176.687 63.8574 176.107 cv
63.5896 175.183 63.4399 174.209 63.4399 173.2 cv
63.4399 172.982 63.4594 172.768 63.4727 172.553 cv
cp
f
63.7672 172.546 mo
63.6684 172.546 63.571 172.551 63.4727 172.553 cv
63.4594 172.768 63.4399 172.982 63.4399 173.2 cv
63.4399 174.209 63.5896 175.183 63.8574 176.107 cv
63.9059 176.103 li
63.9238 174.865 64.1623 173.681 64.5762 172.581 cv
64.3072 172.567 64.0398 172.546 63.7672 172.546 cv
cp
f
65.5797 177.221 mo
68.8302 175.683 72.1796 174.949 75.2545 174.951 cv
72.0367 172.897 67.8723 172.483 64.1673 174.237 cv
60.4622 175.99 58.142 179.473 57.6898 183.263 cv
59.6379 180.884 62.3293 178.76 65.5797 177.221 cv
cp
f
83.6785 170.196 mo
87.4369 170.691 90.6532 172.603 92.8819 175.318 cv
91.2741 171.898 88.0258 169.337 84.0015 168.807 cv
80.243 168.313 76.6805 169.706 74.2399 172.243 cv
76.9589 170.549 80.2532 169.745 83.6785 170.196 cv
cp
f
88.2457 198.88 mo
89.5212 200.418 89.1018 202.127 88.0987 202.878 cv
87.0037 203.698 85.2822 202.744 84.2693 201.131 cv
84.5694 203.682 82.1105 205.027 81.1828 204.792 cv
80.3404 204.579 79.4873 204.085 80.2376 201.234 cv
77.6117 204.16 74.9101 203.397 74.2854 202.329 cv
73.678 201.291 75.1911 198.468 79.6927 196.855 cv
77.0292 197.08 75.2223 195.002 75.8266 193.712 cv
76.397 192.494 79.0925 192.278 80.593 192.991 cv
80.2929 191.153 81.0648 188.903 82.5094 188.793 cv
83.9683 188.683 85.6948 190.477 84.832 194.079 cv
86.4826 190.703 88.421 190.959 88.9431 191.552 cv
89.4745 192.155 89.4462 193.216 87.683 195.017 cv
89.8963 194.604 91.3644 195.885 91.3927 196.911 cv
91.4184 197.843 90.7591 198.918 88.2457 198.88 cv
cp
94.2085 195.295 mo
93.997 194.29 92.4091 193.07 90.1959 193.483 cv
91.959 191.682 92.2446 188.748 89.9533 187.603 cv
89.2471 187.249 87.4489 186.089 86.2753 191.079 cv
87.1381 187.478 83.7341 182.693 80.7882 184.657 cv
76.811 187.308 79.5163 190.364 79.8164 192.202 cv
78.3158 191.489 70.9684 189.567 70.9684 193.494 cv
70.9684 194.919 75.1122 197.45 77.7757 197.225 cv
73.2741 198.838 67.8195 202.742 69.1681 204.951 cv
70.3378 206.866 74.569 208.06 78.7863 204.676 cv
78.096 208.236 80.2496 211.242 81.1155 211.17 cv
85.0434 210.843 85.3435 206.683 85.0434 204.133 cv
86.0563 205.746 89.0037 208.037 90.117 207.242 cv
92.4083 205.606 92.0471 201.252 90.7716 199.714 cv
93.285 199.751 94.8632 198.404 94.2085 195.295 cv
cp
.698039 .690196 .607843 rgb
f
101.747 148.817 mo
100.505 151.65 98.0384 155.701 98.1139 155.734 cv
98.1893 155.767 99.4113 151.17 100.653 148.337 cv
101.895 145.505 102.461 145.409 102.612 145.475 cv
102.763 145.541 102.989 145.984 101.747 148.817 cv
cp
.94902 .847059 .0666667 rgb
f
136.106 214.443 mo
131.146 213.345 123.745 211.058 123.728 211.138 cv
123.71 211.219 131.405 212.179 136.365 213.278 cv
141.325 214.376 141.725 214.956 141.689 215.117 cv
141.654 215.278 141.066 215.542 136.106 214.443 cv
cp
1 .47451 0 rgb
f
73.066 246.706 mo
73.4499 241.64 74.6636 233.99 74.5814 233.983 cv
74.4992 233.977 74.6405 241.73 74.2566 246.796 cv
73.8728 251.862 73.3558 252.34 73.1914 252.328 cv
73.027 252.315 72.6822 251.772 73.066 246.706 cv
cp
f
31.0321 174.619 mo
34.8752 176.108 43.0012 179.158 42.7702 179.755 cv
42.8 179.678 35.3382 177.568 30.6008 175.733 cv
25.8635 173.898 25.5551 173.265 25.6147 173.111 cv
25.6742 172.957 26.2947 172.785 31.0321 174.619 cv
cp
.94902 .847059 .0666667 rgb
f
258.228 187.196 mo
280.68 185.297 li
280.68 185.297 262.038 180.68 252.708 178.209 cv
254.736 181.04 256.577 184.05 258.228 187.196 cv
cp
218.116 135.065 mo
218.116 135.065 225.686 152.036 226.911 153.789 cv
228.026 155.386 234.479 133.453 234.479 133.453 cv
235.378 137.126 233.446 162.276 235.098 160.724 cv
245.101 151.327 261.136 136.765 261.136 136.765 cv
242.924 168.087 li
243.069 169.803 264.979 160.238 277.536 157.322 cv
274.146 158.32 259.525 167.375 257.511 169.12 cv
261.173 169.453 270.009 167.173 270.009 167.173 cv
270.009 167.173 261.647 170.431 250.524 175.361 cv
245.82 169.775 239.664 165.397 233.543 161.543 cv
228.75 158.524 223.232 155.373 217.486 153.978 cv
218.216 143.994 218.116 135.065 218.116 135.065 cv
cp
.866667 .392157 0 rgb
f
191.131 211.235 mo
174.016 217.083 li
174.016 217.083 189.413 216.94 197.15 216.99 cv
195.029 215.234 193.019 213.305 191.131 211.235 cv
cp
233.111 252.036 mo
233.111 252.036 222.983 226.389 221.694 225.296 cv
220.519 224.3 219.92 247.466 219.92 247.466 cv
218.516 244.847 215.2 225.334 214.211 226.839 cv
208.225 235.95 198.533 250.174 198.533 250.174 cv
206.707 222.772 li
206.265 221.494 191.042 233.069 181.826 237.751 cv
184.273 236.326 193.92 226.57 195.154 224.847 cv
192.239 225.312 185.797 228.779 185.797 228.779 cv
185.797 228.779 191.682 224.661 199.397 218.729 cv
204.129 222.055 209.761 224.179 215.265 225.911 cv
219.575 227.267 222.884 219.208 227.625 219.143 cv
228.763 233.02 233.111 252.036 233.111 252.036 cv
cp
f
162.262 175.008 mo
162.262 175.008 186.78 175.028 188.086 174.398 cv
189.277 173.823 170.1 166.625 170.1 166.625 cv
172.716 166.354 190.033 169.603 189.077 168.435 cv
183.287 161.368 174.354 150.08 174.354 150.08 cv
194.762 164.094 li
195.964 164.141 190.931 149.551 189.827 141.396 cv
190.272 143.614 195.485 153.566 196.549 154.978 cv
197.049 152.695 196.114 146.938 196.114 146.938 cv
196.114 146.938 197.762 152.474 200.369 159.888 cv
196.147 162.404 192.656 165.933 189.531 169.482 cv
187.085 172.261 192.811 177.05 191.421 180.561 cv
179.478 177.352 162.262 175.008 162.262 175.008 cv
cp
.94902 .847059 .0666667 rgb
f
290.119 197.504 mo
290.119 197.504 252.639 198.634 250.671 199.66 cv
248.879 200.595 278.534 210.691 278.534 210.691 cv
274.548 211.229 247.922 207.082 249.439 208.822 cv
258.624 219.352 272.814 236.185 272.814 236.185 cv
240.954 215.728 li
239.114 215.713 247.499 237.779 249.573 250.193 cv
248.788 246.822 240.347 231.856 238.654 229.748 cv
237.998 233.262 239.699 242.018 239.699 242.018 cv
239.699 242.018 236.918 233.632 232.582 222.423 cv
238.917 218.377 244.087 212.817 248.695 207.243 cv
252.304 202.878 243.323 195.829 245.282 190.396 cv
263.691 194.736 290.119 197.504 290.119 197.504 cv
cp
f
242.026 191.625 mo
241.747 194.826 236.629 198.352 229.772 194.461 cv
230.149 194.899 233.836 197.866 234.199 198.355 cv
237.213 202.428 238.434 206.635 236.925 207.751 cv
235.417 208.867 231.75 206.471 228.736 202.399 cv
227.634 200.909 224.79 194.16 224.213 192.793 cv
224.769 201.873 220.684 205.376 217.583 204.308 cv
215.114 203.458 214.206 200.391 216.8 193.905 cv
216.039 194.889 212.41 198.854 211.324 199.828 cv
207.553 203.211 203.48 204.822 202.227 203.425 cv
200.973 202.028 203.289 199.416 206.979 195.943 cv
210.129 192.978 217.65 188.547 219.395 187.604 cv
218.983 187.606 215.934 189.435 210.685 190.94 cv
205.814 192.336 200.435 188.935 200.645 186.086 cv
200.855 183.237 205.121 181.23 210.174 181.602 cv
211.4 181.692 216.121 183.017 217.171 183.342 cv
212.723 180.006 211.763 176.046 213.441 174.612 cv
214.936 173.335 218.283 175.559 220.877 181.304 cv
220.874 181.213 220.017 175.136 220.015 175.045 cv
219.913 169.979 221.827 165.832 224.291 165.782 cv
226.756 165.732 228.837 169.798 228.939 174.864 cv
228.979 176.837 228.71 178.666 228.225 180.173 cv
228.31 180.06 228.39 179.946 228.478 179.834 cv
231.606 175.848 235.714 173.851 237.653 175.373 cv
239.557 176.867 238.656 181.199 235.661 185.129 cv
239.554 186.144 242.273 188.781 242.026 191.625 cv
cp
270.17 197.117 mo
270.17 188.478 264.335 181.207 256.393 179.017 cv
256.983 177.418 257.322 175.696 257.322 173.891 cv
257.322 165.704 250.684 159.066 242.497 159.066 cv
241.151 159.066 239.853 159.262 238.613 159.598 cv
236.82 151.382 229.507 145.23 220.754 145.23 cv
214.379 145.23 208.769 148.494 205.496 153.44 cv
204.086 152.933 202.572 152.642 200.987 152.642 cv
193.618 152.642 187.645 158.616 187.645 165.984 cv
187.645 166.595 187.7 167.191 187.779 167.779 cv
178.862 170.303 172.326 178.496 172.326 188.222 cv
172.326 196.679 177.267 203.981 184.419 207.401 cv
183.796 208.96 183.444 210.655 183.444 212.436 cv
183.444 219.941 189.528 226.025 197.034 226.025 cv
197.899 226.025 198.742 225.936 199.562 225.781 cv
203.382 232.283 210.444 236.65 218.53 236.65 cv
223.672 236.65 228.399 234.88 232.144 231.922 cv
234.032 232.736 236.11 233.191 238.296 233.191 cv
246.893 233.191 253.863 226.222 253.863 217.625 cv
253.863 216.987 253.813 216.362 253.738 215.744 cv
263.001 214.588 270.17 206.693 270.17 197.117 cv
cp
.839216 .831373 .74902 rgb
f
268.688 197.117 mo
268.688 196.533 268.658 195.956 268.601 195.387 cv
267.834 203.078 262.006 209.296 254.505 210.666 cv
257.492 207.835 258.261 203.285 256.253 199.588 cv
257.173 203.381 255.539 207.586 251.918 209.891 cv
248.298 212.195 243.796 211.894 240.75 209.455 cv
243.06 212.585 247.038 213.872 250.652 212.855 cv
250.807 213.682 250.898 214.53 250.898 215.401 cv
250.898 223.167 244.58 229.485 236.814 229.485 cv
234.947 229.485 233.17 229.108 231.539 228.442 cv
237.825 227.195 242.457 221.685 242.515 215.194 cv
240.981 220.768 235.842 225.04 229.496 225.422 cv
223.884 225.76 218.849 222.961 216.242 218.609 cv
220.162 216.497 222.019 211.842 220.599 207.589 cv
220.843 211.484 218.5 215.339 214.533 216.976 cv
210.566 218.613 206.186 217.532 203.612 214.598 cv
205.746 218.9 210.87 220.882 215.377 219.022 cv
215.514 218.966 215.642 218.897 215.775 218.835 cv
217.456 224.693 222.901 228.851 229.195 228.7 cv
226.085 230.604 222.436 231.709 218.53 231.709 cv
211.308 231.709 204.951 227.953 201.296 222.295 cv
200.478 222.47 199.632 222.566 198.763 222.566 cv
192.087 222.566 186.656 217.135 186.656 210.459 cv
186.656 209.207 186.857 208.004 187.214 206.869 cv
190.395 212.269 197.181 214.227 202.72 211.487 cv
197.785 212.485 192.445 210.171 189.654 205.391 cv
186.863 200.61 187.472 194.822 190.767 191.016 cv
186.739 193.758 184.885 198.61 185.815 203.199 cv
179.029 200.066 174.302 193.209 174.302 185.257 cv
174.302 184.66 174.333 184.07 174.386 183.486 cv
174.011 185.004 173.808 186.59 173.808 188.222 cv
173.808 196.594 179.043 203.762 186.409 206.639 cv
185.465 208.361 184.927 210.337 184.927 212.436 cv
184.927 219.111 190.358 224.543 197.034 224.543 cv
198.174 224.543 199.274 224.373 200.321 224.077 cv
203.739 230.659 210.616 235.168 218.53 235.168 cv
223.647 235.168 228.329 233.279 231.926 230.168 cv
233.841 231.146 236.002 231.708 238.296 231.708 cv
246.062 231.708 252.38 225.39 252.38 217.625 cv
252.38 216.513 252.237 215.436 251.992 214.398 cv
261.252 214.08 268.688 206.452 268.688 197.117 cv
cp
.698039 .690196 .607843 rgb
f
239.404 165.773 mo
239.164 165.521 238.909 165.292 238.648 165.074 cv
239.867 164.704 241.158 164.502 242.497 164.502 cv
249.181 164.502 254.716 169.447 255.676 175.868 cv
255.773 175.221 255.84 174.564 255.84 173.891 cv
255.84 166.534 249.854 160.549 242.497 160.549 cv
240.706 160.549 238.999 160.909 237.437 161.552 cv
236.462 153.209 229.354 146.712 220.753 146.712 cv
214.471 146.712 208.986 150.181 206.104 155.302 cv
204.552 154.555 202.821 154.125 200.987 154.125 cv
194.447 154.125 189.127 159.445 189.127 165.985 cv
189.127 166.659 189.197 167.317 189.306 167.961 cv
190.251 162.361 195.122 158.078 200.987 158.078 cv
202.148 158.078 203.26 158.267 204.318 158.583 cv
200.862 160.652 198.394 164.202 197.784 168.357 cv
201.406 163.607 207.123 160.539 213.558 160.539 cv
216.888 160.539 220.023 161.364 222.779 162.814 cv
220.325 159.1 216.118 156.647 211.334 156.647 cv
209.991 156.647 208.697 156.846 207.471 157.206 cv
210.546 153.233 215.352 150.666 220.753 150.666 cv
228.864 150.666 235.641 156.445 237.206 164.099 cv
234.307 162.533 230.706 162.7 227.947 164.646 cv
231.765 164.23 235.726 165.534 238.576 168.533 cv
240.051 170.084 241.055 171.91 241.6 173.836 cv
242.243 171.048 241.523 168.002 239.404 165.773 cv
cp
.882353 .933333 .937255 rgb
f
195.31 169.066 mo
186.865 168.276 179.25 173.304 176.344 180.847 cv
181.151 175.111 188.592 171.749 196.61 172.499 cv
201.434 172.951 205.772 174.833 209.267 177.676 cv
206.31 172.962 201.279 169.624 195.31 169.066 cv
cp
f
259.184 181.776 mo
252.78 178.731 245.357 180.491 240.909 185.58 cv
246.331 182.456 253.138 181.954 259.219 184.846 cv
262.877 186.585 265.743 189.309 267.671 192.545 cv
266.702 187.995 263.711 183.929 259.184 181.776 cv
cp
f
242.026 191.625 mo
241.747 194.826 236.629 198.352 229.772 194.461 cv
230.149 194.899 233.836 197.866 234.199 198.355 cv
237.213 202.428 238.434 206.635 236.925 207.751 cv
235.417 208.867 231.75 206.471 228.736 202.399 cv
227.634 200.909 224.79 194.16 224.213 192.793 cv
224.769 201.873 220.684 205.376 217.583 204.308 cv
215.114 203.458 214.206 200.391 216.8 193.905 cv
216.039 194.889 212.41 198.854 211.324 199.828 cv
207.553 203.211 203.48 204.822 202.227 203.425 cv
200.973 202.028 203.289 199.416 206.979 195.943 cv
210.129 192.978 217.65 188.547 219.395 187.604 cv
218.983 187.606 215.934 189.435 210.685 190.94 cv
205.814 192.336 200.435 188.935 200.645 186.086 cv
200.855 183.237 205.121 181.23 210.174 181.602 cv
211.4 181.692 216.121 183.017 217.171 183.342 cv
212.723 180.006 211.763 176.046 213.441 174.612 cv
214.936 173.335 218.283 175.559 220.877 181.304 cv
220.874 181.213 220.017 175.136 220.015 175.045 cv
219.913 169.979 221.827 165.832 224.291 165.782 cv
226.756 165.732 228.837 169.798 228.939 174.864 cv
228.979 176.837 228.71 178.666 228.225 180.173 cv
228.31 180.06 228.39 179.946 228.478 179.834 cv
231.606 175.848 235.714 173.851 237.653 175.373 cv
239.557 176.867 238.656 181.199 235.661 185.129 cv
239.554 186.144 242.273 188.781 242.026 191.625 cv
cp
237.555 184.639 mo
240.55 180.709 241.045 175.3 239.223 173.706 cv
236.258 171.111 230.143 176.115 230.143 176.115 cv
231.625 167.591 225.936 163.278 223.472 163.328 cv
221.007 163.378 218.551 167.899 218.653 172.965 cv
218.655 173.056 219.959 178.122 219.41 177.225 cv
216.632 172.676 211.934 169.674 210.685 170.741 cv
209.007 172.174 209.944 178.524 214.391 181.86 cv
213.341 181.534 210.243 180.467 209.017 180.377 cv
203.964 180.005 197.157 181.86 197.528 186.678 cv
197.747 189.526 202.108 194.189 206.979 192.793 cv
208.047 192.487 209.177 192.09 210.304 191.653 cv
210.304 191.653 207.905 193.719 204.755 196.684 cv
201.065 200.157 199.054 203.256 200.308 204.653 cv
201.561 206.05 204.199 208.73 210.129 202.614 cv
210.663 202.064 212.268 199.958 213.781 197.941 cv
213.65 201.317 213.676 206.216 216.244 206.691 cv
221.248 207.618 224.498 202.184 224.769 197.24 cv
225.346 198.608 226.817 202.237 227.919 203.726 cv
230.933 207.799 236.603 210.587 238.111 209.471 cv
239.62 208.354 239.272 202.981 236.258 198.908 cv
235.895 198.418 233.641 196.319 233.264 195.881 cv
240.891 198.167 244.134 195.439 244.412 192.237 cv
244.659 189.393 243.485 186.678 237.555 184.639 cv
cp
.698039 .690196 .607843 rgb
f
212.131 252.889 mo
213.019 246.923 215.515 238.027 215.366 238.004 cv
215.216 237.982 215.185 247.245 214.297 253.211 cv
213.41 259.178 212.449 259.655 212.15 259.61 cv
211.851 259.566 211.243 258.855 212.131 252.889 cv
cp
.94902 .847059 .0666667 rgb
f
174.294 234.441 mo
179.029 230.704 186.942 225.935 186.849 225.816 cv
186.755 225.698 180.386 232.424 175.651 236.161 cv
170.917 239.898 169.891 239.588 169.703 239.35 cv
169.516 239.113 169.56 238.179 174.294 234.441 cv
cp
f
272.068 147.871 mo
266.341 151.4 257.03 155.777 257.11 155.906 cv
257.189 156.035 265.192 149.536 270.919 146.006 cv
276.645 142.477 277.689 142.866 277.847 143.124 cv
278.006 143.381 277.794 144.341 272.068 147.871 cv
cp
f
274.891 170.322 mo
269.499 171.758 261.008 172.82 261.047 172.966 cv
261.086 173.112 268.936 169.641 274.327 168.205 cv
279.719 166.769 280.493 167.473 280.571 167.765 cv
280.648 168.057 280.282 168.886 274.891 170.322 cv
cp
f
200.964 138.841 mo
202.57 143.204 203.923 150.235 204.064 150.182 cv
204.206 150.13 200.514 143.96 198.908 139.597 cv
197.302 135.234 197.964 134.487 198.248 134.383 cv
198.532 134.278 199.358 134.478 200.964 138.841 cv
cp
1 .47451 0 rgb
f
169.871 156.488 mo
174.001 158.622 179.746 162.895 179.816 162.76 cv
179.885 162.626 172.996 160.568 168.865 158.434 cv
164.735 156.3 164.718 155.302 164.857 155.033 cv
164.996 154.764 165.74 154.354 169.871 156.488 cv
cp
f
245.24 144.219 mo
243.482 148.523 239.736 154.625 239.876 154.682 cv
240.016 154.74 241.454 147.695 243.212 143.391 cv
244.97 139.087 245.963 138.982 246.243 139.096 cv
246.523 139.21 246.998 139.915 245.24 144.219 cv
cp
f
266.287 176.154 mo
263.947 176.487 260.227 175.845 260.248 175.995 cv
260.269 176.145 263.638 174.319 265.978 173.986 cv
268.319 173.653 268.681 174.49 268.723 174.789 cv
268.766 175.088 268.628 175.821 266.287 176.154 cv
cp
f
270.496 229.136 mo
264.872 225.207 256.988 218.284 256.902 218.408 cv
256.815 218.532 266.126 223.411 271.751 227.341 cv
277.376 231.271 277.444 232.391 277.27 232.639 cv
277.097 232.887 276.121 233.066 270.496 229.136 cv
cp
f
190.687 240.225 mo
193.44 235.867 198.605 229.865 198.477 229.784 cv
198.349 229.703 195.292 237.037 192.539 241.395 cv
189.785 245.753 188.762 245.726 188.506 245.564 cv
188.251 245.403 187.934 244.583 190.687 240.225 cv
cp
f
171.517 210.27 mo
175.053 209.301 180.644 208.624 180.615 208.52 cv
180.587 208.417 175.465 210.803 171.929 211.772 cv
168.394 212.741 167.869 212.236 167.812 212.029 cv
167.755 211.822 167.982 211.239 171.517 210.27 cv
cp
f
379.214 160.063 mo
379.214 168.331 372.512 175.034 364.243 175.034 cv
355.975 175.034 349.272 168.331 349.272 160.063 cv
349.272 151.794 355.975 145.092 364.243 145.092 cv
372.512 145.092 379.214 151.794 379.214 160.063 cv
cp
.839216 .831373 .74902 rgb
f
361.473 168.896 mo
361.473 173.939 357.384 178.028 352.34 178.028 cv
347.297 178.028 343.208 173.939 343.208 168.896 cv
343.208 163.852 347.297 159.763 352.34 159.763 cv
357.384 159.763 361.473 163.852 361.473 168.896 cv
cp
f
387.835 161.784 mo
387.835 168.027 382.775 173.088 376.532 173.088 cv
370.29 173.088 365.229 168.027 365.229 161.784 cv
365.229 155.542 370.29 150.481 376.532 150.481 cv
382.775 150.481 387.835 155.542 387.835 161.784 cv
cp
f
400.697 164.18 mo
400.697 170.257 395.77 175.183 389.693 175.183 cv
383.616 175.183 378.689 170.257 378.689 164.18 cv
378.689 158.103 383.616 153.176 389.693 153.176 cv
395.77 153.176 400.697 158.103 400.697 164.18 cv
cp
f
377.593 154.043 mo
377.658 154.053 li
379.697 154.433 381.527 155.415 382.954 156.809 cv
382.99 156.847 li
382.113 156.976 381.275 157.246 380.499 157.632 cv
379.887 156.193 378.882 154.944 377.593 154.043 cv
cp
389.693 154.187 mo
387.874 154.187 386.169 154.678 384.698 155.531 cv
382.815 153.078 379.856 151.493 376.532 151.493 cv
376.381 151.493 376.23 151.496 376.08 151.503 cv
373.524 148.22 369.539 146.103 365.066 146.103 cv
357.368 146.103 351.106 152.365 351.106 160.063 cv
351.106 160.185 351.111 160.305 351.114 160.426 cv
348.754 160.878 346.916 162.594 346.226 164.774 cv
346.342 164.682 li
347.436 163.063 349.142 161.871 351.18 161.471 cv
351.35 161.438 351.521 161.408 351.696 161.386 cv
351.809 161.372 351.921 161.362 352.033 161.353 cv
352.088 161.002 352.159 160.656 352.239 160.314 cv
353.683 154.145 359.225 149.535 365.828 149.535 cv
368.71 149.535 371.389 150.414 373.615 151.916 cv
374.006 152.181 374.382 152.466 374.744 152.767 cv
374.541 152.719 374.335 152.678 374.127 152.645 cv
370.856 152.13 367.735 153.593 365.969 156.144 cv
365.865 156.13 li
360.731 155.618 356.006 158.215 353.551 162.388 cv
353.821 162.26 li
356.919 159.362 361.2 157.761 365.753 158.214 cv
370.291 158.666 374.161 161.066 376.628 164.5 cv
375.24 160.693 372.088 157.681 368.066 156.552 cv
369.061 155.881 370.902 154.923 373.672 154.624 cv
376.3 154.341 378.734 155.782 380.28 157.74 cv
379.074 158.385 378.033 159.321 377.266 160.471 cv
377.445 160.397 li
379.567 158.628 382.41 157.746 385.354 158.21 cv
388.288 158.673 390.715 160.377 392.191 162.701 cv
391.354 159.921 389.095 157.683 386.129 156.983 cv
387.263 156.534 388.497 156.285 389.788 156.285 cv
394.785 156.285 398.937 159.972 399.667 164.768 cv
399.678 164.573 399.686 164.377 399.686 164.18 cv
399.686 158.67 395.203 154.187 389.693 154.187 cv
cp
.882353 .933333 .937255 rgb
f
346.789 176.147 mo
354.355 181.724 361.606 185.223 361.606 185.223 cv
359.084 179.34 359.645 176.538 361.886 176.538 cv
364.127 176.538 365.528 187.745 365.528 189.706 cv
366.369 181.021 369.45 175.137 371.692 176.818 cv
373.933 178.499 373.653 182.982 373.092 184.383 cv
375.142 181.388 377.234 175.059 379.475 176.74 cv
381.716 178.42 378.415 187.464 377.295 188.865 cv
390.222 179.731 398.566 170.69 398.566 170.69 cv
398.566 170.69 364.999 159.058 346.789 176.147 cv
cp
.839216 .831373 .74902 rgb
f
379.475 176.739 mo
381.716 178.42 378.415 187.464 377.295 188.865 cv
378.033 187.989 378.834 187.118 379.672 186.262 cv
382.649 180.92 386.417 172.356 382.057 170.375 cv
379.507 169.215 376.174 174.297 374.493 179.34 cv
375.054 177.939 374.493 171.775 372.252 170.094 cv
370.011 168.414 366.712 175.807 365.919 183.868 cv
365.919 181.907 364.808 174.289 362.727 173.456 cv
358.524 171.775 356.003 177.939 360.92 184.504 cv
360.918 184.506 li
361.178 184.761 361.415 185.005 361.606 185.223 cv
359.085 179.34 359.645 176.538 361.886 176.538 cv
364.127 176.538 365.528 187.744 365.528 189.706 cv
366.369 181.021 369.45 175.137 371.692 176.818 cv
373.933 178.499 373.653 182.982 373.092 184.383 cv
375.141 181.388 377.234 175.059 379.475 176.739 cv
cp
.698039 .690196 .607843 rgb
f
408.447 220.991 mo
400.471 218.81 395.773 210.577 397.954 202.602 cv
400.134 194.626 408.367 189.928 416.343 192.109 cv
424.318 194.289 429.016 202.522 426.836 210.498 cv
424.655 218.473 416.422 223.171 408.447 220.991 cv
cp
.839216 .831373 .74902 rgb
f
405.05 191.18 mo
400.185 189.85 397.319 184.828 398.649 179.962 cv
399.979 175.097 405.002 172.232 409.867 173.562 cv
414.732 174.892 417.598 179.914 416.267 184.779 cv
414.937 189.644 409.915 192.51 405.05 191.18 cv
cp
f
409.744 203.895 mo
403.723 202.248 400.176 196.032 401.822 190.011 cv
403.469 183.989 409.685 180.442 415.706 182.089 cv
421.728 183.735 425.275 189.951 423.628 195.973 cv
421.982 201.994 415.766 205.541 409.744 203.895 cv
cp
f
398.334 230.048 mo
393.358 228.688 390.427 223.552 391.788 218.576 cv
393.148 213.6 398.284 210.67 403.26 212.03 cv
408.236 213.39 411.166 218.527 409.806 223.502 cv
408.446 228.478 403.309 231.409 398.334 230.048 cv
cp
f
400.009 177.451 mo
397.82 181.209 391.945 185.702 389.265 187.003 cv
395.605 186.122 398.16 187.401 397.569 189.563 cv
396.978 191.725 385.799 190.121 383.907 189.604 cv
392.063 192.705 396.925 197.229 394.713 198.948 cv
392.5 200.666 388.25 199.214 387.047 198.304 cv
389.395 201.07 394.949 204.757 392.736 206.476 cv
390.524 208.195 382.671 202.626 381.615 201.176 cv
387.613 209.867 391.798 223.419 391.798 223.419 cv
391.798 223.419 411.691 199.523 400.009 177.451 cv
cp
f
392.736 206.476 mo
390.524 208.195 382.671 202.626 381.615 201.176 cv
382.266 202.119 382.894 203.121 383.499 204.155 cv
387.867 208.435 395.134 214.328 398.195 210.646 cv
399.986 208.491 395.963 203.937 391.542 200.985 cv
392.745 201.895 398.838 202.98 401.051 201.261 cv
403.263 199.543 397.002 194.411 389.435 191.521 cv
391.326 192.038 398.968 192.974 400.32 191.187 cv
403.05 187.576 397.769 183.519 390.14 186.531 cv
390.139 186.528 li
389.824 186.711 389.526 186.876 389.265 187.002 cv
395.605 186.122 398.16 187.401 397.569 189.563 cv
396.978 191.725 385.799 190.121 383.907 189.604 cv
392.063 192.705 396.925 197.229 394.713 198.948 cv
392.5 200.666 388.25 199.214 387.047 198.304 cv
389.395 201.07 394.949 204.757 392.736 206.476 cv
cp
.698039 .690196 .607843 rgb
f
421.355 188.067 mo
420.039 185.763 417.906 184.108 415.346 183.408 cv
415.152 183.362 li
415.37 181.694 415.05 180.009 414.202 178.523 cv
413.174 176.722 411.507 175.428 409.506 174.881 cv
408.833 174.697 408.143 174.604 407.453 174.604 cv
403.967 174.604 400.89 176.955 399.969 180.323 cv
399.688 181.351 399.625 182.402 399.765 183.427 cv
399.812 183.075 399.873 182.723 399.969 182.375 cv
400.89 179.007 403.967 176.656 407.453 176.656 cv
408.143 176.656 408.833 176.749 409.506 176.933 cv
411.507 177.48 413.174 178.773 414.202 180.575 cv
414.701 181.449 415.017 182.393 415.151 183.362 cv
414.351 183.16 413.535 183.054 412.719 183.054 cv
408.258 183.054 404.32 186.063 403.142 190.372 cv
402.81 191.587 402.719 192.83 402.849 194.046 cv
402.905 193.503 402.995 192.96 403.142 192.423 cv
404.32 188.115 408.258 185.105 412.719 185.105 cv
413.601 185.105 414.485 185.224 415.346 185.46 cv
417.906 186.159 420.039 187.814 421.355 190.119 cv
422.045 191.33 422.459 192.644 422.602 193.989 cv
422.813 191.944 422.394 189.889 421.355 188.067 cv
cp
.882353 .933333 .937255 rgb
f
425.516 207.629 mo
423.903 213.529 418.511 217.649 412.404 217.649 cv
411.195 217.649 409.985 217.486 408.807 217.163 cv
405.302 216.206 402.38 213.939 400.58 210.784 cv
399.603 209.072 399.034 207.207 398.857 205.302 cv
398.597 208.063 399.176 210.833 400.58 213.291 cv
402.38 216.447 405.302 218.713 408.807 219.671 cv
409.985 219.993 411.195 220.156 412.404 220.156 cv
418.511 220.156 423.903 216.036 425.516 210.137 cv
425.958 208.518 426.072 206.889 425.925 205.309 cv
425.853 206.081 425.727 206.856 425.516 207.629 cv
cp
.698039 .690196 .607843 rgb
f
408.487 219.95 mo
407.542 223.407 404.382 225.822 400.803 225.822 cv
400.094 225.822 399.385 225.726 398.694 225.538 cv
395.704 224.72 393.583 222.292 392.995 219.445 cv
392.161 223.523 394.623 227.616 398.694 228.729 cv
399.385 228.918 400.094 229.014 400.803 229.014 cv
404.382 229.014 407.542 226.599 408.487 223.142 cv
408.828 221.892 408.844 220.631 408.598 219.442 cv
408.564 219.611 408.533 219.781 408.487 219.95 cv
cp
f
406.979 191.791 mo
410.268 190.668 413.825 192.24 415.251 195.326 cv
415.209 194.77 415.105 194.21 414.917 193.657 cv
413.717 190.142 409.896 188.265 406.38 189.464 cv
402.865 190.663 400.987 194.485 402.186 198 cv
402.264 198.227 402.353 198.446 402.451 198.658 cv
402.225 195.675 404.017 192.801 406.979 191.791 cv
cp
.882353 .933333 .937255 rgb
f
335.638 197.488 mo
341.986 196.181 347.844 200.343 348.722 206.783 cv
349.601 213.223 345.167 219.504 338.819 220.811 cv
332.471 222.118 326.613 217.957 325.734 211.517 cv
324.856 205.076 329.29 198.796 335.638 197.488 cv
cp
.839216 .831373 .74902 rgb
f
345.949 212.442 mo
350.95 211.412 355.565 214.691 356.257 219.764 cv
356.949 224.838 353.456 229.786 348.455 230.816 cv
343.454 231.846 338.839 228.567 338.147 223.494 cv
337.455 218.42 340.948 213.472 345.949 212.442 cv
cp
f
328.011 183.018 mo
336.266 181.318 343.883 186.729 345.026 195.104 cv
346.168 203.479 340.402 211.646 332.147 213.346 cv
323.892 215.046 316.274 209.635 315.132 201.26 cv
313.99 192.885 319.756 184.717 328.011 183.018 cv
cp
f
331.729 176.317 mo
337.755 175.076 343.316 179.027 344.149 185.14 cv
344.983 191.253 340.774 197.215 334.748 198.456 cv
328.723 199.697 323.162 195.747 322.328 189.633 cv
321.495 183.52 325.704 177.558 331.729 176.317 cv
cp
f
356.3 222.447 mo
356.311 218.024 359.125 210.896 360.78 208.28 cv
355.768 212.608 352.935 212.966 352.367 210.799 cv
351.799 208.632 362.208 203.678 364.092 203.048 cv
355.536 205.025 349.104 203.936 350.15 201.229 cv
351.196 198.522 355.573 197.353 357.061 197.445 cv
353.665 196.426 347.055 196.437 348.101 193.73 cv
349.147 191.023 358.671 191.308 360.301 191.942 cv
350.817 187.961 340.472 178.835 340.472 178.835 cv
340.472 178.835 335.267 210.331 356.3 222.447 cv
cp
f
350.403 193.938 mo
351.058 192.479 358.671 191.308 360.301 191.942 cv
359.272 191.51 357.55 191.666 356.514 191.131 cv
350.503 190.674 345.869 190.301 345.404 192.619 cv
344.838 195.444 349.117 197.903 351.862 197.711 cv
350.374 197.619 347.169 199.486 346.123 202.192 cv
345.076 204.899 350.441 206.368 358.385 204.545 cv
356.502 205.175 350.535 208.117 349.107 213.497 cv
347.909 218.01 355.204 216.037 360.263 209.174 cv
360.266 209.176 li
360.445 208.842 360.619 208.534 360.78 208.28 cv
355.768 212.608 352.935 212.966 352.367 210.799 cv
351.799 208.632 362.208 203.678 364.092 203.048 cv
355.536 205.025 349.104 203.936 350.15 201.229 cv
351.196 198.522 355.573 197.353 357.061 197.445 cv
353.665 196.426 349.213 196.589 350.403 193.938 cv
cp
.698039 .690196 .607843 rgb
f
343.669 195.383 mo
342.715 188.382 336.751 183.557 329.798 184.159 cv
329.266 184.205 328.728 184.284 328.198 184.393 cv
326.929 184.655 328.691 180.577 333.086 179.535 cv
337.906 178.391 342.164 182.504 342.836 187.425 cv
342.848 187.566 li
342.903 186.853 342.891 186.135 342.793 185.419 cv
342.122 180.498 337.93 177.105 333.043 177.529 cv
332.669 177.561 332.29 177.616 331.917 177.693 cv
327.724 178.557 324.538 182.048 323.778 186.132 cv
318.971 188.999 315.937 194.531 316.428 200.271 cv
316.698 195.357 319.472 190.81 323.603 188.254 cv
323.825 188.124 li
325.172 187.323 326.654 186.726 328.241 186.399 cv
328.771 186.29 329.309 186.211 329.84 186.165 cv
336.794 185.563 342.758 190.388 343.712 197.389 cv
343.745 197.626 343.753 197.862 343.773 198.098 cv
343.822 197.202 343.794 196.294 343.669 195.383 cv
cp
.882353 .933333 .937255 rgb
f
355.685 220.202 mo
355.38 221.762 354.68 223.236 353.614 224.48 cv
352.081 226.27 349.993 227.373 347.737 227.585 cv
347.406 227.616 347.074 227.62 346.747 227.619 cv
339.813 227.615 340.25 219.576 340.849 219.309 cv
342.644 218.509 344.217 217.22 345.402 215.542 cv
346.316 214.247 346.927 212.807 347.238 211.315 cv
346.904 212.172 346.472 213 345.926 213.774 cv
344.275 216.111 341.876 217.705 339.168 218.263 cv
338.772 218.344 338.37 218.403 337.973 218.437 cv
333.356 218.837 329.329 216.024 327.998 211.717 cv
328.501 211.736 329.009 211.734 329.527 211.689 cv
334.856 211.228 339.321 207.417 341.012 202.459 cv
338.339 206.114 334.22 208.655 329.556 209.059 cv
324.706 209.479 320.347 207.493 317.533 204.076 cv
319.049 208.21 322.678 211.139 327.088 211.647 cv
327.103 211.833 li
327.816 217.055 332.263 220.654 337.449 220.205 cv
337.846 220.171 338.248 220.112 338.644 220.03 cv
338.749 220.009 338.849 219.976 338.953 219.951 cv
338.837 220.585 338.774 221.233 338.799 221.897 cv
338.965 226.306 342.311 229.713 346.582 229.821 cv
346.909 229.83 347.242 229.818 347.572 229.787 cv
349.828 229.575 351.916 228.472 353.45 226.682 cv
354.984 224.891 355.781 222.628 355.694 220.307 cv
355.685 220.202 li
cp
.698039 .690196 .607843 rgb
f
330.688 191.984 mo
333.954 190.551 337.548 191.85 339.043 194.882 cv
338.989 194.317 338.872 193.754 338.671 193.205 cv
337.395 189.713 333.529 188.125 330.037 189.656 cv
326.546 191.188 324.75 195.259 326.027 198.751 cv
326.109 198.976 326.203 199.192 326.306 199.4 cv
326.015 196.369 327.745 193.274 330.688 191.984 cv
cp
.882353 .933333 .937255 rgb
f
378.318 238.282 mo
377.658 244.956 371.712 249.832 365.037 249.172 cv
358.362 248.512 353.486 242.565 354.147 235.891 cv
354.807 229.216 360.753 224.34 367.428 225 cv
374.103 225.661 378.979 231.607 378.318 238.282 cv
cp
.839216 .831373 .74902 rgb
f
389.106 236.082 mo
388.602 241.18 384.06 244.904 378.962 244.399 cv
373.864 243.895 370.14 239.353 370.645 234.255 cv
371.149 229.157 375.691 225.433 380.789 225.938 cv
385.887 226.442 389.611 230.984 389.106 236.082 cv
cp
f
365.413 245.365 mo
359.975 244.827 355.895 240.251 355.847 234.906 cv
355.769 235.277 355.707 235.655 355.669 236.041 cv
355.093 241.865 359.363 247.073 365.188 247.649 cv
369.723 248.098 373.874 245.601 375.766 241.727 cv
375.482 241.548 375.214 241.35 374.958 241.138 cv
372.804 244.019 369.246 245.745 365.413 245.365 cv
cp
.698039 .690196 .607843 rgb
f
387.06 232.291 mo
387.088 232.712 387.091 233.138 387.048 233.572 cv
386.628 237.822 382.828 240.938 378.578 240.518 cv
377.822 240.443 377.104 240.259 376.434 239.987 cv
376.262 240.593 376.036 241.173 375.766 241.727 cv
376.747 242.345 377.881 242.755 379.113 242.877 cv
383.363 243.297 387.163 240.181 387.584 235.931 cv
387.711 234.649 387.511 233.41 387.06 232.291 cv
cp
f
372.155 235.687 mo
372.3 237.852 373.351 239.807 374.958 241.138 cv
375.294 240.688 375.601 240.215 375.865 239.712 cv
374.179 238.859 372.855 237.426 372.155 235.687 cv
cp
f
375.865 239.712 mo
375.601 240.215 375.294 240.688 374.958 241.138 cv
375.214 241.35 375.482 241.548 375.766 241.727 cv
376.036 241.173 376.262 240.593 376.434 239.987 cv
376.237 239.907 376.052 239.807 375.865 239.712 cv
cp
f
356.225 230.426 mo
357.649 227.685 366.848 216.294 369.881 205.063 cv
369.088 211.135 366.804 221.779 370.345 222.898 cv
373.886 224.017 372.962 217.865 372.361 211.074 cv
373.653 214.692 375.216 219.513 377.964 218.547 cv
380.951 217.497 379.347 213.252 378.134 199.345 cv
380.602 211.313 388.712 232.295 388.712 232.295 cv
356.225 230.426 li
cp
.839216 .831373 .74902 rgb
f
368.724 208.622 mo
364.544 222.356 366.491 227.9 369.868 228.509 cv
374.588 229.36 374.357 223.192 373.756 216.401 cv
375.048 220.019 377.468 225.886 380.217 224.92 cv
382.676 224.056 381.902 215.494 379.715 205.726 cv
379.08 203.449 378.533 201.278 378.134 199.345 cv
379.347 213.251 380.951 217.497 377.964 218.547 cv
375.216 219.513 373.653 214.692 372.361 211.074 cv
372.962 217.865 373.886 224.017 370.345 222.898 cv
366.804 221.779 369.088 211.135 369.881 205.063 cv
369.56 206.251 369.167 207.441 368.724 208.622 cv
cp
.698039 .690196 .607843 rgb
f
337.331 169.658 mo
340.889 172.946 345.665 178.628 345.747 178.538 cv
345.83 178.449 339.695 174.238 336.136 170.95 cv
332.578 167.661 332.696 166.808 332.861 166.63 cv
333.025 166.452 333.772 166.369 337.331 169.658 cv
cp
1 .47451 0 rgb
f
338.304 162.009 mo
340.066 164.721 341.962 169.352 342.064 169.285 cv
342.166 169.219 338.59 165.68 336.828 162.967 cv
335.066 160.254 335.48 159.594 335.683 159.461 cv
335.887 159.329 336.542 159.296 338.304 162.009 cv
cp
f
341.367 239.205 mo
343.56 236.827 347.579 233.846 347.489 233.764 cv
347.4 233.681 344.853 238.021 342.66 240.398 cv
340.466 242.776 339.724 242.538 339.546 242.373 cv
339.367 242.209 339.173 241.583 341.367 239.205 cv
cp
f
322.931 229.679 mo
327.956 227.668 335.939 225.476 335.893 225.363 cv
335.848 225.251 328.61 229.301 323.584 231.313 cv
318.559 233.324 317.786 232.873 317.696 232.647 cv
317.605 232.422 317.905 231.691 322.931 229.679 cv
cp
f
404.141 241.207 mo
400.648 237.072 396.052 230.186 395.959 230.264 cv
395.866 230.343 401.992 235.936 405.485 240.072 cv
408.978 244.207 408.793 245.083 408.607 245.24 cv
408.422 245.397 407.633 245.342 404.141 241.207 cv
cp
f
398.144 176.068 mo
392.197 180.766 382.729 187.358 382.786 187.429 cv
382.842 187.501 391.382 179.734 397.328 175.036 cv
403.275 170.338 404.206 170.275 404.319 170.418 cv
404.431 170.56 404.09 171.37 398.144 176.068 cv
cp
f
410.212 161.718 mo
406.924 165.276 401.243 170.053 401.332 170.135 cv
401.421 170.217 405.632 164.082 408.92 160.523 cv
412.208 156.965 413.061 157.082 413.239 157.247 cv
413.418 157.412 413.5 158.159 410.212 161.718 cv
cp
f
320.408 219.769 mo
323.207 219.154 327.66 219.129 327.634 219.01 cv
327.608 218.891 323.585 220.872 320.786 221.487 cv
317.987 222.103 317.551 221.475 317.499 221.238 cv
317.447 221.001 317.609 220.384 320.408 219.769 cv
cp
.94902 .847059 .0666667 rgb
f
326.033 240.819 mo
331.493 236.653 340.356 231.062 340.282 230.965 cv
340.208 230.868 332.56 238.051 327.101 242.218 cv
321.641 246.384 320.657 246.246 320.51 246.053 cv
320.363 245.859 320.573 244.985 326.033 240.819 cv
cp
f
334.276 238.766 mo
337.256 236.059 342.411 232.633 342.329 232.543 cv
342.247 232.454 338.439 237.361 335.46 240.069 cv
332.48 242.776 331.702 242.529 331.539 242.349 cv
331.375 242.169 331.297 241.474 334.276 238.766 cv
cp
f
409.068 157.074 mo
406.983 160.267 403.034 164.609 403.136 164.676 cv
403.237 164.742 405.51 159.305 407.595 156.112 cv
409.68 152.919 410.484 152.981 410.687 153.114 cv
410.891 153.247 411.154 153.882 409.068 157.074 cv
cp
f
417.987 161.71 mo
413.692 164.556 406.652 168.104 406.719 168.205 cv
406.786 168.306 412.721 163.089 417.015 160.243 cv
421.309 157.397 422.136 157.697 422.27 157.9 cv
422.404 158.102 422.281 158.864 417.987 161.71 cv
cp
f
326.766 168.941 mo
331.409 171.173 338.061 175.405 338.114 175.296 cv
338.166 175.186 330.647 172.759 326.004 170.527 cv
321.361 168.295 321.195 167.431 321.301 167.212 cv
321.406 166.993 322.124 166.709 326.766 168.941 cv
cp
f
403.014 249.705 mo
401.219 246.866 399.279 242.055 399.176 242.12 cv
399.073 242.185 402.706 245.926 404.501 248.764 cv
406.297 251.602 405.882 252.268 405.677 252.398 cv
405.471 252.528 404.809 252.543 403.014 249.705 cv
cp
f
410.278 236.396 mo
408.06 235.065 405.168 232.243 405.105 232.348 cv
405.043 232.452 408.965 233.556 411.183 234.887 cv
413.402 236.219 413.264 236.96 413.139 237.168 cv
413.014 237.376 412.496 237.727 410.278 236.396 cv
cp
f
378.621 252.339 mo
378.17 249.792 378.403 245.758 378.284 245.779 cv
378.164 245.8 379.903 249.486 380.354 252.033 cv
380.804 254.581 380.154 254.963 379.915 255.005 cv
379.676 255.047 379.071 254.887 378.621 252.339 cv
cp
f
418.296 227.161 mo
416.019 225.659 413.075 222.601 413.008 222.702 cv
412.94 222.804 416.992 224.191 419.268 225.693 cv
421.544 227.194 421.385 227.936 421.251 228.138 cv
421.117 228.341 420.572 228.662 418.296 227.161 cv
cp
1 .47451 0 rgb
f
313.865 180.923 mo
316.142 181.461 319.33 183.425 319.365 183.275 cv
319.401 183.126 315.626 183.626 313.348 183.088 cv
311.071 182.55 311.047 181.626 311.118 181.327 cv
311.189 181.028 311.587 180.385 313.865 180.923 cv
cp
f
389.126 146.78 mo
388.248 148.876 385.86 151.616 385.998 151.674 cv
386.135 151.732 386.256 148.037 387.134 145.941 cv
388.011 143.846 388.9 143.97 389.175 144.085 cv
389.45 144.201 390.003 144.685 389.126 146.78 cv
cp
f
121.461 336.933 mo
114.164 343.868 105.547 346.641 95.6612 348.316 cv
101.532 350.273 110.044 348.55 108.313 352.429 cv
107.476 354.306 101.71 354.187 93.7042 352.585 cv
101.532 355.788 107.403 359.524 113.722 373.981 cv
116.035 363.35 121.461 336.933 121.461 336.933 cv
cp
.839216 .831373 .74902 rgb
f
112.608 351.505 mo
113.63 347.96 101.903 349.893 95.6612 348.316 cv
100.491 351.326 110.044 348.55 108.313 352.429 cv
107.476 354.306 99.931 353.831 93.7042 352.585 cv
101.354 355.432 110.829 357.672 112.608 351.505 cv
cp
.698039 .690196 .607843 rgb
f
37.4854 340.666 mo
40.6877 342.623 53.8529 347.604 62.2146 348.138 cv
55.2762 348.316 47.6261 348.849 46.9145 351.162 cv
46.2029 353.475 60.2576 353.475 69.6867 351.874 cv
59.9018 354.542 48.8715 358.634 48.6936 361.125 cv
48.5157 363.616 51.718 363.438 57.9448 360.058 cv
50.8285 366.284 48.5157 371.622 43.8901 377.315 cv
40.154 367.885 29.8354 356.499 37.4854 340.666 cv
cp
.839216 .831373 .74902 rgb
f
82.6893 312.743 mo
82.6893 318.286 78.1958 322.779 72.6528 322.779 cv
67.1099 322.779 62.6164 318.286 62.6164 312.743 cv
62.6164 307.2 67.1099 302.706 72.6528 302.706 cv
78.1958 302.706 82.6893 307.2 82.6893 312.743 cv
cp
f
99.5071 310.844 mo
99.5071 317.735 93.9207 323.322 87.0294 323.322 cv
80.1381 323.322 74.5516 317.735 74.5516 310.844 cv
74.5516 303.953 80.1381 298.366 87.0294 298.366 cv
93.9207 298.366 99.5071 303.953 99.5071 310.844 cv
cp
f
104.392 314.305 mo
104.392 318.949 100.627 322.714 95.983 322.714 cv
91.3389 322.714 87.5741 318.949 87.5741 314.305 cv
87.5741 309.66 91.3389 305.896 95.983 305.896 cv
100.627 305.896 104.392 309.66 104.392 314.305 cv
cp
f
34.6244 360.989 mo
40.1076 360.178 45.2106 363.965 46.0221 369.448 cv
46.8337 374.931 43.0466 380.034 37.5633 380.846 cv
32.0801 381.658 26.9771 377.87 26.1656 372.387 cv
25.354 366.904 29.1411 361.801 34.6244 360.989 cv
cp
f
27.341 345.217 mo
34.158 344.208 40.5022 348.917 41.5112 355.734 cv
42.5202 362.551 37.8119 368.895 30.9949 369.904 cv
24.1779 370.913 17.8337 366.204 16.8247 359.387 cv
15.8157 352.57 20.524 346.226 27.341 345.217 cv
cp
f
29.3074 338.481 mo
35.168 337.613 40.6223 341.661 41.4897 347.522 cv
42.3572 353.382 38.3093 358.837 32.4487 359.704 cv
26.588 360.572 21.1338 356.524 20.2663 350.663 cv
19.3989 344.803 23.4467 339.348 29.3074 338.481 cv
cp
f
44.6142 369.657 mo
44.5258 369.059 44.3693 368.486 44.1646 367.936 cv
44.2393 369.887 43.6569 371.792 42.4766 373.383 cv
41.1054 375.23 39.097 376.433 36.821 376.769 cv
36.3992 376.832 35.9704 376.864 35.5472 376.864 cv
31.9204 376.864 28.7205 374.536 27.4891 371.23 cv
27.5007 371.545 27.5262 371.861 27.5733 372.179 cv
28.1939 376.371 31.8514 379.532 36.0809 379.532 cv
36.5041 379.532 36.9329 379.5 37.3548 379.438 cv
39.6307 379.101 41.6391 377.898 43.0103 376.051 cv
44.3814 374.203 44.9513 371.933 44.6142 369.657 cv
cp
.698039 .690196 .607843 rgb
f
20.4688 353.819 mo
22.2284 351.448 24.806 349.904 27.7276 349.471 cv
28.269 349.391 28.818 349.35 29.3607 349.35 cv
34.6325 349.35 39.2013 353.181 40.1912 358.329 cv
40.2447 357.541 40.2217 356.742 40.1033 355.942 cv
39.3069 350.562 34.6118 346.504 29.1828 346.504 cv
28.6401 346.504 28.0911 346.545 27.5497 346.625 cv
24.6281 347.057 22.0505 348.601 20.2909 350.972 cv
18.5313 353.344 17.8002 356.258 18.2325 359.179 cv
18.2555 359.335 18.2929 359.485 18.3224 359.639 cv
18.464 357.55 19.1912 355.541 20.4688 353.819 cv
cp
.882353 .933333 .937255 rgb
f
23.5843 346.394 mo
25.0659 344.398 27.2349 343.099 29.6936 342.735 cv
30.1495 342.668 30.6123 342.634 31.0689 342.634 cv
35.4191 342.634 39.2026 345.732 40.1343 349.936 cv
40.2001 349.215 40.1923 348.478 40.0818 347.731 cv
39.4118 343.202 35.4603 339.787 30.891 339.787 cv
30.4344 339.787 29.9716 339.821 29.5157 339.889 cv
27.057 340.252 24.888 341.552 23.4064 343.548 cv
21.9254 345.544 21.3104 347.997 21.6746 350.455 cv
21.7063 350.669 21.7522 350.878 21.7983 351.087 cv
21.9501 349.403 22.5511 347.787 23.5843 346.394 cv
cp
f
125.806 352.289 mo
120.927 351.23 117.83 346.416 118.889 341.537 cv
119.947 336.658 124.761 333.561 129.641 334.62 cv
134.52 335.679 137.617 340.493 136.558 345.372 cv
135.5 350.252 130.686 353.349 125.806 352.289 cv
cp
.839216 .831373 .74902 rgb
f
123.897 371.012 mo
115.892 369.274 110.811 361.377 112.548 353.372 cv
114.285 345.367 122.183 340.287 130.188 342.024 cv
138.192 343.761 143.273 351.659 141.536 359.664 cv
139.799 367.668 131.901 372.749 123.897 371.012 cv
cp
f
129.886 343.415 mo
128.944 343.211 127.982 343.107 127.027 343.107 cv
124.656 343.107 122.394 343.748 120.425 344.875 cv
121.367 341.671 124.343 339.394 127.714 339.394 cv
128.257 339.394 128.803 339.453 129.339 339.569 cv
132.287 340.209 134.459 342.489 135.123 345.243 cv
135.168 345.071 li
136.059 340.967 133.444 336.902 129.339 336.011 cv
128.803 335.895 128.257 335.836 127.714 335.836 cv
124.161 335.836 121.035 338.361 120.279 341.839 cv
120.051 342.888 120.064 343.948 120.273 344.969 cv
117.125 346.826 114.751 349.933 113.939 353.674 cv
113.573 355.36 113.556 357.04 113.817 358.649 cv
113.817 357.711 113.91 356.761 114.117 355.809 cv
115.446 349.686 120.95 345.242 127.205 345.242 cv
128.16 345.242 129.122 345.345 130.064 345.55 cv
135.603 346.752 139.588 351.24 140.446 356.523 cv
140.448 350.35 136.159 344.777 129.886 343.415 cv
cp
.882353 .933333 .937255 rgb
f
119.745 378.556 mo
114.91 377.507 111.841 372.736 112.89 367.901 cv
113.94 363.066 118.71 359.997 123.545 361.047 cv
128.38 362.096 131.449 366.866 130.4 371.701 cv
129.351 376.536 124.58 379.605 119.745 378.556 cv
cp
.839216 .831373 .74902 rgb
f
129.461 367.683 mo
129.259 367.683 129.057 367.663 128.855 367.65 cv
128.823 367.525 li
128.816 367.648 li
128.369 367.617 127.921 367.565 127.48 367.469 cv
125.732 367.09 124.171 366.23 122.929 365.001 cv
123.06 365.222 li
124.242 367.059 126.068 368.325 128.203 368.789 cv
128.363 368.824 128.527 368.842 128.689 368.867 cv
128.653 369.087 li
127.906 372.528 124.813 375.025 121.298 375.025 cv
120.762 375.025 120.221 374.967 119.691 374.852 cv
117.725 374.425 116.041 373.258 114.952 371.565 cv
114.587 370.997 114.311 370.391 114.111 369.765 cv
114.101 371.212 114.507 372.632 115.308 373.878 cv
116.397 375.571 118.08 376.738 120.047 377.165 cv
120.577 377.28 121.118 377.338 121.654 377.338 cv
125.169 377.338 128.262 374.841 129.009 371.4 cv
129.188 370.575 129.209 369.745 129.113 368.931 cv
129.39 368.96 129.669 368.977 129.946 368.977 cv
133.761 368.977 137.117 366.266 137.928 362.532 cv
137.967 362.353 137.982 362.174 138.008 361.994 cv
136.576 365.37 133.216 367.683 129.461 367.683 cv
cp
.698039 .690196 .607843 rgb
f
48.4322 315.394 mo
53.5088 318.12 55.4144 324.445 52.6884 329.522 cv
49.9624 334.599 43.637 336.504 38.5604 333.778 cv
33.4837 331.052 31.5781 324.727 34.3042 319.65 cv
37.0302 314.574 43.3555 312.668 48.4322 315.394 cv
cp
.839216 .831373 .74902 rgb
f
56.8615 311.682 mo
60.2828 313.519 61.567 317.782 59.7299 321.203 cv
57.8928 324.624 53.63 325.908 50.2088 324.071 cv
46.7876 322.234 45.5034 317.972 47.3405 314.55 cv
49.1776 311.129 53.4403 309.845 56.8615 311.682 cv
cp
f
66.6176 388.73 mo
68.127 394.291 64.8425 400.023 59.2814 401.532 cv
53.7203 403.041 47.9886 399.757 46.4792 394.196 cv
44.9698 388.635 48.2544 382.903 53.8154 381.394 cv
59.3765 379.884 65.1082 383.169 66.6176 388.73 cv
cp
f
75.1076 392.301 mo
76.1248 396.049 73.9113 399.911 70.1637 400.929 cv
66.416 401.946 62.5533 399.732 61.5361 395.985 cv
60.5189 392.237 62.7324 388.374 66.4801 387.357 cv
70.2277 386.34 74.0904 388.553 75.1076 392.301 cv
cp
f
73.7209 395.152 mo
72.9766 396.452 71.7702 397.383 70.3247 397.775 cv
69.841 397.907 69.3455 397.973 68.8507 397.973 cv
67.087 397.973 65.4823 397.129 64.4428 395.795 cv
64.9043 394.952 65.2211 394.058 65.396 393.139 cv
65.2505 393.487 65.0906 393.831 64.8999 394.164 cv
64.6649 394.574 64.3936 394.954 64.1042 395.316 cv
63.8159 395.677 63.5064 396.017 63.1694 396.326 cv
62.1217 397.288 60.8547 397.996 59.4424 398.38 cv
58.6668 398.59 57.8704 398.697 57.0761 398.697 cv
53.0231 398.697 49.4497 395.961 48.3864 392.044 cv
48.0231 390.705 47.983 389.332 48.2349 388.008 cv
47.4672 389.845 47.3228 391.87 47.8527 393.823 cv
48.916 397.74 52.4894 400.476 56.5424 400.476 cv
57.3367 400.476 58.1331 400.369 58.9087 400.159 cv
60.7752 399.652 62.3858 398.578 63.5705 397.095 cv
64.5745 398.708 66.3494 399.753 68.3169 399.753 cv
68.8117 399.753 69.3073 399.686 69.7909 399.554 cv
71.2364 399.163 72.4429 398.231 73.1872 396.931 cv
73.5659 396.27 73.8005 395.555 73.8898 394.821 cv
73.8354 394.932 73.7829 395.044 73.7209 395.152 cv
cp
.698039 .690196 .607843 rgb
f
58.9045 316.259 mo
58.4723 314.825 57.5077 313.645 56.188 312.936 cv
55.3617 312.492 54.4714 312.267 53.5409 312.267 cv
51.4685 312.267 49.5734 313.4 48.5942 315.223 cv
48.3218 315.731 48.1335 316.267 48.0271 316.816 cv
47.9351 316.763 47.8534 316.698 47.7589 316.647 cv
46.4503 315.945 44.9798 315.574 43.5058 315.574 cv
40.177 315.574 37.131 317.394 35.5576 320.324 cv
34.4523 322.383 34.1974 324.739 34.8187 326.983 cv
34.8051 325.488 35.1634 324.006 35.8902 322.652 cv
37.4636 319.722 40.5096 317.902 43.8384 317.902 cv
45.0643 317.902 46.2808 318.176 47.4104 318.667 cv
47.2557 318.678 li
46.0504 318.857 44.9871 319.494 44.2611 320.472 cv
43.5352 321.45 43.2336 322.653 43.4119 323.858 cv
43.449 324.047 li
43.5074 323.186 43.8075 322.357 44.3345 321.646 cv
45.0605 320.668 46.1238 320.031 47.3291 319.853 cv
47.5525 319.82 47.7789 319.803 48.0029 319.803 cv
50.1777 319.803 52.0626 321.383 52.471 323.507 cv
52.4931 323.182 52.4836 322.852 52.4347 322.522 cv
52.1341 320.492 50.4835 318.934 48.4904 318.681 cv
48.5981 318.294 48.7323 317.914 48.9268 317.552 cv
48.9869 317.456 li
49.9809 315.691 51.8392 314.595 53.8735 314.595 cv
54.804 314.595 55.6943 314.821 56.5206 315.264 cv
57.7424 315.92 58.6539 316.983 59.1263 318.275 cv
59.1739 317.604 59.1046 316.923 58.9045 316.259 cv
cp
.882353 .933333 .937255 rgb
f
97.5664 307.507 mo
96.1477 303.038 91.9617 299.79 87.0292 299.79 cv
82.86 299.79 79.2246 302.111 77.3419 305.528 cv
75.991 304.647 74.3822 304.13 72.6527 304.13 cv
67.9034 304.13 64.0395 307.994 64.0395 312.743 cv
64.0395 313.342 64.1015 313.926 64.2184 314.491 cv
64.3513 309.857 68.1535 306.126 72.8191 306.126 cv
74.2011 306.126 75.5047 306.459 76.6634 307.04 cv
76.7653 307.091 76.8575 307.157 76.9573 307.212 cv
75.9186 307.575 75.0118 308.238 74.3416 309.141 cv
73.4573 310.332 73.0899 311.797 73.3071 313.265 cv
73.3523 313.496 li
73.4234 312.446 73.7889 311.437 74.431 310.571 cv
75.3152 309.38 76.6106 308.604 78.0788 308.387 cv
78.3508 308.346 78.6267 308.326 78.8995 308.326 cv
81.5488 308.326 83.8448 310.251 84.3423 312.838 cv
84.3691 312.442 84.3576 312.04 84.298 311.638 cv
83.8978 308.934 81.5384 306.895 78.8101 306.895 cv
78.5936 306.895 78.3755 306.918 78.1585 306.944 cv
78.2793 306.781 78.402 306.621 78.531 306.465 cv
80.558 304.018 83.6098 302.451 87.0292 302.451 cv
90.8363 302.451 94.1907 304.391 96.1774 307.329 cv
95.983 307.319 li
92.1309 307.319 88.9973 310.453 88.9973 314.305 cv
88.9973 314.445 89.0101 314.581 89.0183 314.719 cv
89.7376 311.627 92.5091 309.315 95.8167 309.315 cv
96.3292 309.315 96.8269 309.375 97.308 309.481 cv
97.551 309.534 97.7883 309.601 98.021 309.679 cv
100.666 310.564 102.61 312.987 102.781 315.886 cv
102.9 315.377 102.969 314.849 102.969 314.305 cv
102.969 310.998 100.657 308.227 97.5664 307.507 cv
cp
f
64.7053 318.783 mo
67.0181 321.63 71.9995 328.746 73.2448 334.795 cv
72.7111 329.28 75.5576 327.145 76.9809 327.5 cv
78.4042 327.856 79.9735 336.157 79.8274 339.598 cv
81.0728 334.083 82.3181 325.01 85.6984 325.01 cv
89.0786 325.01 88.367 331.237 87.6554 333.194 cv
90.5019 328.034 98.1519 322.697 100.109 321.452 cv
96.5507 319.495 64.7053 318.783 64.7053 318.783 cv
cp
.839216 .831373 .74902 rgb
f
87.6554 333.194 mo
91.7472 326.611 90.5019 319.317 87.1216 319.317 cv
83.7414 319.317 80.6826 324.656 79.4373 330.171 cv
79.5834 326.73 78.76 322.341 77.3367 321.985 cv
75.9135 321.63 70.7541 324.832 73.2448 334.795 cv
72.889 329.635 75.5576 327.145 76.9809 327.5 cv
78.4042 327.856 79.9735 336.157 79.8274 339.598 cv
81.0728 334.083 82.3181 325.01 85.6984 325.01 cv
89.0786 325.01 88.367 331.237 87.6554 333.194 cv
cp
.698039 .690196 .607843 rgb
f
75.1751 392.57 mo
74.4855 387.328 75.5949 370.421 76.6251 362.904 cv
75.2572 369.645 69.9626 380.192 69.0617 379.497 cv
68.1609 378.801 68.7573 373.539 69.952 369.423 cv
67.3171 375.83 64.4712 381.495 62.0639 380.862 cv
59.6565 380.228 62.1368 372.863 63.2639 370.64 cv
59.6014 376.319 54.2644 379.988 50.6148 382.878 cv
52.5286 385.901 75.1751 392.57 75.1751 392.57 cv
cp
.839216 .831373 .74902 rgb
f
63.2639 370.64 mo
58.2634 377.8 56.8385 386.816 59.2459 387.45 cv
61.6532 388.084 65.524 382.227 68.1589 375.82 cv
66.9642 379.936 66.1595 385.376 67.0603 386.071 cv
67.9612 386.766 75.2413 375.368 76.6251 362.904 cv
75.2433 369.183 69.9626 380.192 69.0617 379.497 cv
68.1609 378.801 68.7573 373.539 69.952 369.423 cv
67.3171 375.83 64.4712 381.495 62.0639 380.862 cv
59.6565 380.228 62.1368 372.863 63.2639 370.64 cv
cp
.698039 .690196 .607843 rgb
f
48.6936 361.125 mo
48.8715 358.634 59.9018 354.542 69.6867 351.874 cv
60.2576 353.475 46.2029 353.475 46.9145 351.162 cv
47.6261 348.849 55.2762 348.316 62.2146 348.138 cv
60.9551 348.057 59.5857 347.875 58.1587 347.618 cv
43.0377 346.051 41.4328 348.93 41.3994 351.162 cv
41.3445 354.833 54.1385 354.17 59.7239 353.475 cv
49.9389 356.144 43.3564 359.524 43.1785 362.015 cv
43.0102 364.37 47.0933 369.479 56.3276 361.541 cv
56.8414 361.051 57.3726 360.558 57.9448 360.058 cv
51.718 363.438 48.5157 363.616 48.6936 361.125 cv
cp
f
85.033 386.14 mo
90.0649 383.816 96.0287 386.01 98.3535 391.042 cv
100.678 396.074 98.4837 402.038 93.4518 404.362 cv
88.4199 406.687 82.4561 404.493 80.1314 399.461 cv
77.8066 394.429 80.0011 388.465 85.033 386.14 cv
cp
.839216 .831373 .74902 rgb
f
97.1691 379.144 mo
103.66 376.145 111.352 378.976 114.351 385.467 cv
117.349 391.957 114.519 399.649 108.028 402.648 cv
101.538 405.647 93.8454 402.816 90.8467 396.326 cv
87.8481 389.835 90.6787 382.143 97.1691 379.144 cv
cp
f
113.462 387.061 mo
113.799 389.026 113.63 391.051 112.923 392.972 cv
111.86 395.861 109.736 398.162 106.942 399.453 cv
105.985 399.895 104.977 400.205 103.948 400.371 cv
101.873 400.708 99.8066 400.448 97.9357 399.714 cv
100.904 398.522 102.912 395.664 103.005 392.45 cv
101.927 395.46 99.2917 397.809 95.9132 398.357 cv
92.5348 398.905 89.292 397.509 87.3186 394.995 cv
88.4022 397.961 91.1307 400.018 94.2536 400.273 cv
93.7387 400.678 93.1798 401.033 92.5701 401.314 cv
91.8542 401.645 91.1017 401.876 90.332 402.001 cv
86.5344 402.617 82.754 400.604 81.1385 397.108 cv
80.9294 396.655 80.7692 396.189 80.6421 395.718 cv
80.7005 396.792 80.9582 397.857 81.4234 398.864 cv
83.0389 402.361 86.8192 404.373 90.6168 403.757 cv
91.3865 403.632 92.1391 403.401 92.8549 403.071 cv
94.1736 402.462 95.2909 401.55 96.1365 400.418 cv
98.5154 402.031 101.47 402.756 104.437 402.275 cv
105.466 402.108 106.474 401.799 107.431 401.356 cv
110.225 400.065 112.349 397.764 113.412 394.876 cv
114.35 392.326 114.359 389.59 113.462 387.061 cv
cp
.698039 .690196 .607843 rgb
f
79.7326 391.967 mo
81.6669 388.563 87.006 374.901 88.1537 366.51 cv
87.7308 373.406 87.5525 380.971 89.4663 381.429 cv
91.38 381.887 92.5439 367.88 91.959 358.658 cv
93.4249 368.119 96.0016 378.667 98.1112 378.573 cv
100.221 378.48 100.334 375.308 97.9669 369.47 cv
102.689 375.885 107.049 377.609 111.522 381.6 cv
103.17 386.348 92.6042 397.869 79.7326 391.967 cv
cp
.839216 .831373 .74902 rgb
f
98.1112 378.573 mo
96.0016 378.667 93.4249 368.119 91.959 358.658 cv
92.5439 367.88 91.38 381.887 89.4663 381.429 cv
87.5525 380.971 87.7308 373.406 88.1537 366.51 cv
87.9808 367.774 87.7115 369.159 87.3745 370.609 cv
84.7858 385.848 87.1083 387.135 89.0096 386.925 cv
92.1358 386.581 92.63 373.903 92.4997 368.412 cv
93.9655 377.874 96.3036 384.066 98.4132 383.973 cv
100.409 383.884 105.104 379.26 99.0983 370.92 cv
98.7231 370.461 98.3465 369.986 97.9669 369.47 cv
100.334 375.308 100.221 378.48 98.1112 378.573 cv
cp
.698039 .690196 .607843 rgb
f
60.3915 316.317 mo
61.6641 321.777 66.9173 333.515 71.3011 339.016 cv
66.1437 336.609 59.769 328.653 57.4616 332.219 cv
56.3445 333.945 69.1522 342.283 75.513 344.346 cv
68.5505 343.228 42.3335 335.492 39.4969 334.117 cv
47.1471 326.38 60.3915 316.317 60.3915 316.317 cv
cp
.839216 .831373 .74902 rgb
f
54.1097 330.506 mo
56.8543 323.117 66.9173 333.515 71.3011 339.016 cv
66.1437 336.609 59.769 328.653 57.4616 332.219 cv
56.3445 333.945 69.1522 342.283 75.513 344.346 cv
68.5505 343.228 51.8748 336.523 54.1097 330.506 cv
cp
.698039 .690196 .607843 rgb
f
108.115 318.605 mo
107.225 323.053 94.9496 337.997 91.7472 340.666 cv
101.71 333.549 106.514 329.813 108.293 330.525 cv
110.072 331.237 107.047 333.905 103.845 336.93 cv
107.759 334.795 114.697 332.304 121.102 330.347 cv
117.366 326.967 108.115 318.605 108.115 318.605 cv
cp
.839216 .831373 .74902 rgb
f
122.004 322.851 mo
120.279 326.539 115.89 328.13 112.202 326.404 cv
108.514 324.678 106.923 320.29 108.649 316.602 cv
110.375 312.914 114.763 311.323 118.451 313.048 cv
122.139 314.774 123.73 319.163 122.004 322.851 cv
cp
f
124.281 327.648 mo
123.118 330.133 120.161 331.205 117.675 330.042 cv
115.19 328.879 114.118 325.922 115.281 323.436 cv
116.444 320.951 119.401 319.879 121.887 321.042 cv
124.372 322.205 125.444 325.162 124.281 327.648 cv
cp
f
123.114 324.334 mo
122.791 323.444 122.141 322.732 121.283 322.331 cv
121.113 322.251 120.937 322.191 120.759 322.139 cv
122.069 319.19 120.783 315.711 117.848 314.337 cv
117.05 313.964 116.204 313.775 115.332 313.775 cv
113.03 313.775 110.913 315.121 109.938 317.205 cv
109.643 317.835 109.476 318.492 109.412 319.148 cv
110.39 317.073 112.502 315.732 114.798 315.732 cv
115.67 315.732 116.517 315.921 117.315 316.294 cv
119.611 317.369 120.886 319.734 120.71 322.125 cv
120.409 322.043 120.1 321.996 119.784 321.996 cv
118.699 321.996 117.689 322.503 117.024 323.327 cv
117.536 323.048 118.114 322.885 118.717 322.885 cv
119.236 322.885 119.741 322.999 120.216 323.221 cv
121.074 323.622 121.724 324.334 122.046 325.224 cv
122.369 326.114 122.326 327.077 121.925 327.934 cv
121.803 328.194 121.646 328.429 121.471 328.646 cv
122.123 328.29 122.667 327.74 122.992 327.045 cv
123.393 326.187 123.436 325.225 123.114 324.334 cv
cp
.882353 .933333 .937255 rgb
f
111.772 327.961 mo
109.347 325.71 94.9496 337.997 91.7472 340.666 cv
101.71 333.549 106.514 329.813 108.293 330.525 cv
110.072 331.237 107.047 333.905 103.845 336.93 cv
107.759 334.795 114.342 330.347 111.772 327.961 cv
cp
.698039 .690196 .607843 rgb
f
135.498 328.108 mo
131.928 329.55 126.083 330.702 126.138 330.838 cv
126.193 330.973 131.135 327.587 134.705 326.145 cv
138.275 324.703 138.957 325.345 139.066 325.616 cv
139.176 325.887 139.068 326.666 135.498 328.108 cv
cp
.94902 .847059 .0666667 rgb
f
27.039 329.841 mo
30.6053 331.293 35.6024 334.536 35.6575 334.401 cv
35.7126 334.265 29.8073 333.254 26.241 331.802 cv
22.6747 330.351 22.6327 329.416 22.7429 329.146 cv
22.853 328.875 23.4727 328.39 27.039 329.841 cv
cp
f
35.6272 388.489 mo
41.2133 383.479 50.4508 376.698 50.3532 376.589 cv
50.2557 376.481 42.6268 385.055 37.0407 390.066 cv
31.4547 395.077 30.3194 394.953 30.1243 394.736 cv
29.9291 394.518 30.0412 393.5 35.6272 388.489 cv
cp
f
120.304 393.896 mo
118.32 390.598 116.266 385.009 116.141 385.085 cv
116.015 385.16 120.134 389.507 122.118 392.805 cv
124.102 396.103 123.575 396.876 123.325 397.027 cv
123.074 397.177 122.288 397.194 120.304 393.896 cv
cp
f
52.9194 298.617 mo
55.5107 302.452 58.5195 308.908 58.6406 308.826 cv
58.7617 308.745 53.756 303.637 51.1648 299.802 cv
48.5735 295.966 49.0147 295.101 49.2569 294.937 cv
49.4992 294.773 50.3282 294.781 52.9194 298.617 cv
cp
1 .47451 0 rgb
f
126.575 390.021 mo
122.167 386.394 116.182 380.017 116.089 380.13 cv
115.996 380.243 123.513 384.759 127.921 388.386 cv
132.328 392.012 132.236 393.037 132.05 393.263 cv
131.864 393.489 130.982 393.647 126.575 390.021 cv
cp
f
138.309 386.066 mo
135.031 384.443 130.547 380.972 130.482 381.103 cv
130.417 381.234 135.971 382.546 139.249 384.169 cv
142.527 385.792 142.483 386.718 142.353 386.98 cv
142.223 387.242 141.587 387.689 138.309 386.066 cv
cp
f
115.94 303.848 mo
113.866 306.861 109.791 310.804 109.911 310.887 cv
110.032 310.97 112.122 305.66 114.196 302.647 cv
116.27 299.634 117.181 299.81 117.422 299.975 cv
117.663 300.141 118.014 300.835 115.94 303.848 cv
cp
f
111.613 299.222 mo
110.219 304.266 107.02 311.632 107.161 311.67 cv
107.302 311.709 108.178 303.701 109.572 298.658 cv
110.966 293.614 111.927 293.328 112.209 293.406 cv
112.491 293.484 113.007 294.179 111.613 299.222 cv
cp
.94902 .847059 .0666667 rgb
f
74.4316 404.34 mo
74.9191 402.232 76.3577 399.141 76.2667 399.127 cv
76.1758 399.112 76.2369 402.443 75.7494 404.55 cv
75.2619 406.657 74.6833 406.787 74.5014 406.758 cv
74.3194 406.729 73.9441 406.447 74.4316 404.34 cv
cp
1 .47451 0 rgb
f
78.1017 405.735 mo
77.6956 402.716 77.7866 398.024 77.6943 398.038 cv
77.602 398.051 79.0332 402.516 79.4394 405.534 cv
79.8455 408.553 79.3497 408.94 79.165 408.967 cv
78.9803 408.995 78.5078 408.753 78.1017 405.735 cv
cp
.94902 .847059 .0666667 rgb
f
76.7994 293.846 mo
77.0475 296.192 76.3097 299.874 76.4551 299.859 cv
76.6004 299.844 74.9419 296.414 74.6938 294.068 cv
74.4457 291.722 75.2659 291.394 75.5566 291.364 cv
75.8473 291.333 76.5513 291.5 76.7994 293.846 cv
cp
f
58.757 299.373 mo
59.6534 302.1 59.9506 306.593 60.0895 306.547 cv
60.2284 306.501 57.6419 302.76 56.7455 300.034 cv
55.8491 297.308 56.5656 296.765 56.8434 296.674 cv
57.1211 296.583 57.8606 296.647 58.757 299.373 cv
cp
1 .47451 0 rgb
f
28.5256 386.42 mo
31.8348 384.842 37.3459 383.456 37.283 383.324 cv
37.2201 383.193 32.7455 386.754 29.4363 388.332 cv
26.1272 389.91 25.4252 389.303 25.2994 389.039 cv
25.1737 388.775 25.2164 387.998 28.5256 386.42 cv
cp
f
19.0684 332.146 mo
25.0276 333.345 33.8621 336.268 33.891 336.124 cv
33.9199 335.981 24.6092 335.421 18.65 334.221 cv
12.6908 333.021 12.2532 332.066 12.311 331.779 cv
12.3687 331.493 13.1093 330.946 19.0684 332.146 cv
cp
f
253.961 322.939 mo
252.236 325.649 250.615 328.309 245.464 331.371 cv
250.405 329.021 251.93 333.027 252.173 334.198 cv
252.417 335.37 249.401 337.766 246.125 338.88 cv
251.785 337.837 256.372 338.281 257.782 340.748 cv
260.031 344.685 255.744 347.31 253.626 347.482 cv
259.602 347.742 263.841 348.896 265.797 349.891 cv
266.187 346.583 253.961 322.939 253.961 322.939 cv
cp
.839216 .831373 .74902 rgb
f
279.283 348.417 mo
272.457 352.945 263.253 351.082 258.725 344.256 cv
254.197 337.43 256.06 328.226 262.886 323.698 cv
269.712 319.171 278.916 321.033 283.444 327.859 cv
287.972 334.685 286.109 343.889 279.283 348.417 cv
cp
f
282.418 329.92 mo
281.646 328.755 280.708 327.768 279.664 326.953 cv
279.797 327.132 279.937 327.303 280.062 327.492 cv
283.918 333.305 282.331 341.143 276.518 344.999 cv
271.87 348.083 265.931 347.678 261.764 344.423 cv
265.739 349.782 273.25 351.159 278.875 347.428 cv
284.688 343.571 286.275 335.733 282.418 329.92 cv
cp
.698039 .690196 .607843 rgb
f
175.711 364.68 mo
178.65 365.186 184.998 365.714 191.33 363.656 cv
186.258 365.822 185.6 367.75 185.753 369.667 cv
185.906 371.583 189.252 370.802 195.746 366.854 cv
189.302 371.694 189.39 374.611 189.989 376.503 cv
190.588 378.394 191.377 380.466 194.985 376.143 cv
191.555 382.829 192.935 384.307 191.189 389.868 cv
185.664 384 174.705 378.617 175.711 364.68 cv
cp
.839216 .831373 .74902 rgb
f
201.691 312.654 mo
203.875 317.749 201.517 323.649 196.422 325.834 cv
191.328 328.019 185.427 325.66 183.243 320.566 cv
181.058 315.471 183.417 309.571 188.511 307.386 cv
193.605 305.201 199.506 307.56 201.691 312.654 cv
cp
f
216.399 304.281 mo
219.115 310.614 216.182 317.95 209.849 320.666 cv
203.515 323.382 196.179 320.45 193.463 314.117 cv
190.747 307.783 193.68 300.447 200.013 297.731 cv
206.346 295.015 213.683 297.947 216.399 304.281 cv
cp
f
222.252 305.536 mo
224.082 309.804 222.106 314.748 217.838 316.578 cv
213.57 318.409 208.626 316.432 206.795 312.164 cv
204.965 307.896 206.941 302.952 211.209 301.122 cv
215.478 299.291 220.421 301.267 222.252 305.536 cv
cp
f
179.558 380.529 mo
183.37 378.321 188.249 379.622 190.457 383.433 cv
192.664 387.245 191.363 392.124 187.552 394.332 cv
183.74 396.539 178.861 395.239 176.653 391.427 cv
174.446 387.615 175.747 382.736 179.558 380.529 cv
cp
f
169.554 371.016 mo
174.293 368.272 180.359 369.889 183.103 374.627 cv
185.847 379.366 184.231 385.432 179.492 388.177 cv
174.753 390.921 168.687 389.304 165.943 384.565 cv
163.198 379.827 164.815 373.76 169.554 371.016 cv
cp
f
169.031 365.464 mo
173.104 363.105 178.32 364.495 180.679 368.569 cv
183.038 372.643 181.648 377.858 177.574 380.217 cv
173.501 382.577 168.285 381.187 165.926 377.113 cv
163.567 373.039 164.957 367.824 169.031 365.464 cv
cp
f
189.478 384 mo
189.237 383.585 188.954 383.207 188.641 382.862 cv
189.269 384.281 189.397 385.858 188.992 387.379 cv
188.521 389.145 187.39 390.622 185.808 391.538 cv
185.515 391.708 185.208 391.858 184.895 391.982 cv
182.216 393.045 179.171 392.265 177.292 390.184 cv
177.392 390.413 177.504 390.639 177.632 390.86 cv
179.32 393.774 182.948 395.036 186.072 393.796 cv
186.384 393.672 186.692 393.523 186.985 393.353 cv
188.567 392.437 189.698 390.959 190.169 389.193 cv
190.639 387.426 190.394 385.582 189.478 384 cv
cp
.698039 .690196 .607843 rgb
f
167.001 379.384 mo
167.605 377.117 169.056 375.221 171.087 374.045 cv
171.463 373.827 171.857 373.635 172.258 373.476 cv
176.151 371.93 180.649 373.419 182.889 376.931 cv
182.698 376.333 182.447 375.75 182.124 375.194 cv
179.958 371.454 175.301 369.834 171.291 371.426 cv
170.891 371.585 170.497 371.777 170.121 371.994 cv
168.09 373.17 166.639 375.067 166.035 377.334 cv
165.431 379.601 165.745 381.968 166.921 383.999 cv
166.984 384.107 167.056 384.207 167.122 384.312 cv
166.614 382.728 166.562 381.03 167.001 379.384 cv
cp
.882353 .933333 .937255 rgb
f
167.124 372.987 mo
167.633 371.078 168.854 369.483 170.563 368.493 cv
170.88 368.31 171.212 368.149 171.549 368.015 cv
174.762 366.739 178.465 367.917 180.386 370.749 cv
180.223 370.198 180.001 369.655 179.7 369.136 cv
177.878 365.988 173.958 364.625 170.583 365.965 cv
170.246 366.099 169.914 366.259 169.597 366.443 cv
167.888 367.432 166.667 369.028 166.158 370.937 cv
165.65 372.845 165.915 374.837 166.905 376.546 cv
166.991 376.695 167.086 376.836 167.182 376.977 cv
166.8 375.689 166.77 374.318 167.124 372.987 cv
cp
f
267.191 333.996 mo
263.031 336.756 257.42 335.621 254.66 331.46 cv
251.9 327.3 253.035 321.689 257.196 318.929 cv
261.357 316.169 266.968 317.305 269.728 321.465 cv
272.488 325.626 271.352 331.236 267.191 333.996 cv
cp
.839216 .831373 .74902 rgb
f
213.3 301.978 mo
210.234 298.431 205.107 297.095 200.574 299.039 cv
196.742 300.683 194.316 304.249 193.932 308.131 cv
192.344 307.854 190.661 308.013 189.072 308.694 cv
184.707 310.566 182.679 315.64 184.551 320.005 cv
184.786 320.555 185.074 321.068 185.404 321.541 cv
183.699 317.229 185.723 312.302 190.011 310.463 cv
191.281 309.918 192.611 309.71 193.905 309.788 cv
194.018 309.795 194.129 309.819 194.242 309.83 cv
193.431 310.573 192.859 311.54 192.599 312.634 cv
192.256 314.078 192.495 315.569 193.274 316.832 cv
193.406 317.027 li
193.058 316.034 192.996 314.962 193.245 313.913 cv
193.588 312.47 194.472 311.246 195.736 310.468 cv
195.97 310.324 196.216 310.196 196.467 310.088 cv
198.901 309.044 201.77 309.908 203.247 312.09 cv
203.116 311.715 202.947 311.351 202.734 311.005 cv
201.3 308.678 198.328 307.734 195.821 308.809 cv
195.622 308.894 195.43 309.001 195.241 309.11 cv
195.288 308.914 195.337 308.718 195.395 308.524 cv
196.293 305.476 198.48 302.832 201.623 301.485 cv
205.122 299.984 208.969 300.445 211.953 302.362 cv
211.77 302.43 li
208.23 303.948 206.585 308.063 208.104 311.603 cv
208.159 311.732 208.224 311.852 208.286 311.976 cv
207.729 308.851 209.364 305.633 212.404 304.33 cv
212.875 304.128 213.356 303.987 213.84 303.894 cv
214.084 303.847 214.329 303.815 214.574 303.795 cv
217.353 303.566 220.095 305.027 221.395 307.624 cv
221.303 307.109 221.158 306.597 220.944 306.097 cv
219.641 303.058 216.424 301.422 213.3 301.978 cv
cp
.882353 .933333 .937255 rgb
f
187.543 325.294 mo
190.79 326.998 193.983 328.6 197.512 333.669 cv
194.848 328.81 199.829 327.331 201.277 327.097 cv
202.725 326.863 205.532 329.832 206.754 333.052 cv
205.725 327.493 206.472 322.993 209.561 321.62 cv
214.49 319.429 217.521 323.648 217.639 325.727 cv
218.221 319.864 219.825 315.708 221.132 313.792 cv
217.091 313.396 187.543 325.294 187.543 325.294 cv
cp
.839216 .831373 .74902 rgb
f
217.639 325.727 mo
218.805 318.065 212.393 315.427 209.287 316.759 cv
206.18 318.092 204.542 324.394 205.571 329.954 cv
204.349 326.734 202.099 324.974 199.976 324.701 cv
196.913 324.305 194.985 328.642 197.512 333.669 cv
196.4 330.091 200.182 327.576 202.441 328.534 cv
203.667 329.054 205.532 329.832 206.754 333.052 cv
205.725 327.493 207.514 323.407 210.621 322.075 cv
213.728 320.743 217.521 323.648 217.639 325.727 cv
cp
.698039 .690196 .607843 rgb
f
189.989 376.503 mo
189.39 374.611 189.302 371.694 195.746 366.854 cv
189.252 370.802 185.906 371.583 185.753 369.667 cv
185.6 367.75 186.258 365.822 191.33 363.656 cv
190.376 363.966 189.311 364.233 188.182 364.462 cv
181.815 366.885 181.05 369.625 181.68 371.284 cv
182.716 374.011 184.937 373.109 188.858 370.958 cv
186.116 373.37 186.057 375.76 186.609 377.666 cv
187.416 380.451 191.494 381.388 194.226 377.713 cv
194.461 377.201 194.709 376.681 194.985 376.143 cv
191.377 380.466 190.588 378.394 189.989 376.503 cv
cp
f
238.415 384.931 mo
242.53 381.218 248.877 381.545 252.589 385.661 cv
256.302 389.777 255.975 396.123 251.859 399.836 cv
247.743 403.548 241.397 403.221 237.684 399.106 cv
233.972 394.99 234.299 388.643 238.415 384.931 cv
cp
.839216 .831373 .74902 rgb
f
247.929 374.65 mo
253.238 369.861 261.424 370.283 266.213 375.592 cv
271.002 380.901 270.58 389.086 265.271 393.875 cv
259.962 398.664 251.776 398.242 246.988 392.933 cv
242.199 387.624 242.62 379.438 247.929 374.65 cv
cp
f
265.837 377.378 mo
266.742 379.154 267.181 381.139 267.076 383.183 cv
266.918 386.257 265.572 389.084 263.286 391.146 cv
262.503 391.853 261.633 392.446 260.7 392.911 cv
258.818 393.848 256.767 394.212 254.763 394.067 cv
257.244 392.047 258.314 388.723 257.449 385.626 cv
257.313 388.82 255.492 391.845 252.428 393.37 cv
249.365 394.896 245.854 394.525 243.223 392.709 cv
245.138 395.22 248.354 396.375 251.412 395.693 cv
251.04 396.232 250.612 396.737 250.113 397.186 cv
249.528 397.715 248.877 398.158 248.179 398.506 cv
244.735 400.22 240.528 399.42 237.948 396.559 cv
237.614 396.189 237.323 395.792 237.062 395.379 cv
237.436 396.388 237.998 397.329 238.741 398.152 cv
241.321 401.012 245.528 401.813 248.972 400.098 cv
249.67 399.751 250.32 399.307 250.906 398.779 cv
251.985 397.806 252.781 396.604 253.253 395.273 cv
256.003 396.107 259.04 395.923 261.731 394.584 cv
262.664 394.119 263.535 393.525 264.318 392.818 cv
266.603 390.757 267.949 387.929 268.107 384.856 cv
268.247 382.143 267.444 379.527 265.837 377.378 cv
cp
.698039 .690196 .607843 rgb
f
235.081 392.067 mo
235.918 388.242 236.339 383.602 234.947 375.248 cv
236.588 381.958 239.288 379.247 241.251 379.117 cv
243.214 378.986 243.647 374.727 240.353 366.093 cv
244.559 374.694 246.673 374.54 248.66 373.825 cv
250.647 373.11 249.814 370.047 245.822 365.174 cv
252.234 369.9 256.91 370.254 262.365 372.738 cv
255.797 379.75 249.124 393.886 235.081 392.067 cv
cp
.839216 .831373 .74902 rgb
f
240.353 366.093 mo
243.647 374.727 236.588 381.958 234.947 375.248 cv
235.156 376.506 236.599 383.561 241.626 381.66 cv
244.567 380.547 244.915 378.115 243.162 372.91 cv
245.077 376.351 247.319 376.698 249.306 375.983 cv
251.186 375.307 255.542 372.406 247.333 366.224 cv
246.838 365.897 246.337 365.554 245.822 365.174 cv
249.814 370.047 244.559 374.694 240.353 366.093 cv
cp
.698039 .690196 .607843 rgb
f
274.399 381.876 mo
271.526 379.315 267.906 374.587 267.809 374.696 cv
267.712 374.805 272.935 377.735 275.808 380.296 cv
278.68 382.857 278.407 383.752 278.212 383.97 cv
278.017 384.188 277.271 384.437 274.399 381.876 cv
cp
.94902 .858824 .172549 rgb
f
226.439 292.358 mo
227.146 297.543 227.109 305.573 227.254 305.553 cv
227.398 305.534 225.048 297.828 224.341 292.644 cv
223.634 287.459 224.405 286.818 224.694 286.778 cv
224.984 286.739 225.732 287.174 226.439 292.358 cv
cp
.94902 .858824 .180392 rgb
f
254.903 317.593 mo
252.931 319.037 249.272 320.326 249.358 320.444 cv
249.445 320.562 251.68 317.328 253.652 315.884 cv
255.624 314.441 256.327 314.98 256.499 315.216 cv
256.672 315.452 256.875 316.149 254.903 317.593 cv
cp
1 .537255 .121569 rgb
f
175.229 315.016 mo
177.127 317.168 179.171 321.181 179.281 321.084 cv
179.391 320.987 175.539 318.569 173.641 316.416 cv
171.742 314.264 172.187 313.483 172.406 313.29 cv
172.626 313.096 173.331 312.864 175.229 315.016 cv
cp
f
228.344 407.76 mo
227.537 405.029 228.028 400.192 227.804 400.282 cv
227.58 400.371 230.78 403.73 231.587 406.46 cv
232.394 409.191 231.174 409.99 230.726 410.169 cv
230.279 410.349 229.151 410.49 228.344 407.76 cv
cp
1 .694118 .419608 rgb
f
161.18 359.934 mo
167.563 358.777 177.477 358.196 177.449 358.043 cv
177.422 357.889 167.966 361.001 161.582 362.158 cv
155.199 363.315 154.389 362.539 154.333 362.232 cv
154.278 361.925 154.797 361.091 161.18 359.934 cv
cp
1 .537255 .121569 rgb
f
271.14 353.664 mo
269.441 354.531 265.664 356.059 261.405 356.005 cv
264.915 356.365 265.682 357.417 265.953 358.617 cv
266.224 359.817 264.031 359.975 259.315 358.796 cv
264.17 360.529 264.671 362.328 264.664 363.597 cv
264.657 364.866 264.568 366.281 261.544 364.326 cv
264.908 367.758 264.345 368.923 266.468 371.988 cv
268.728 367.355 274.401 361.986 271.14 353.664 cv
cp
.839216 .831373 .74902 rgb
f
271.799 364.076 mo
269.052 363.451 266.318 365.172 265.694 367.919 cv
265.069 370.666 266.79 373.4 269.537 374.024 cv
272.284 374.649 275.018 372.928 275.643 370.181 cv
276.267 367.434 274.546 364.7 271.799 364.076 cv
cp
f
276.104 356.366 mo
272.688 355.589 269.29 357.728 268.513 361.144 cv
267.737 364.559 269.876 367.958 273.292 368.734 cv
276.707 369.511 280.106 367.372 280.882 363.956 cv
281.659 360.541 279.52 357.142 276.104 356.366 cv
cp
f
275.37 352.875 mo
272.433 352.208 269.512 354.047 268.844 356.983 cv
268.176 359.919 270.015 362.841 272.952 363.509 cv
275.888 364.177 278.81 362.337 279.477 359.401 cv
280.145 356.465 278.306 353.543 275.37 352.875 cv
cp
f
266.399 368.079 mo
266.467 367.78 266.569 367.496 266.694 367.225 cv
266.58 368.211 266.801 369.199 267.338 370.051 cv
267.961 371.04 268.932 371.728 270.072 371.987 cv
270.283 372.035 270.499 372.068 270.714 372.085 cv
272.552 372.226 274.264 371.171 275.017 369.543 cv
274.999 369.702 274.973 369.861 274.937 370.021 cv
274.46 372.121 272.483 373.581 270.34 373.416 cv
270.125 373.4 269.909 373.367 269.698 373.319 cv
268.557 373.06 267.586 372.372 266.963 371.382 cv
266.34 370.393 266.14 369.22 266.399 368.079 cv
cp
.698039 .690196 .607843 rgb
f
279.252 360.992 mo
278.453 359.722 277.206 358.839 275.743 358.507 cv
275.471 358.445 275.195 358.403 274.92 358.382 cv
272.248 358.177 269.783 359.94 269.081 362.511 cv
269.085 362.109 269.128 361.705 269.219 361.304 cv
269.832 358.609 272.369 356.735 275.121 356.946 cv
275.396 356.967 275.672 357.009 275.943 357.071 cv
277.407 357.404 278.654 358.287 279.453 359.557 cv
280.252 360.827 280.51 362.332 280.177 363.796 cv
280.113 364.025 li
280.123 362.961 279.833 361.915 279.252 360.992 cv
cp
.882353 .933333 .937255 rgb
f
277.962 357.108 mo
277.289 356.039 276.24 355.296 275.008 355.016 cv
274.78 354.964 274.547 354.929 274.315 354.911 cv
272.111 354.742 270.073 356.165 269.437 358.259 cv
269.432 357.891 269.464 357.518 269.549 357.144 cv
270.065 354.875 272.201 353.298 274.516 353.476 cv
274.748 353.493 274.981 353.529 275.209 353.581 cv
276.441 353.861 277.49 354.604 278.163 355.673 cv
278.836 356.742 279.052 358.009 278.772 359.241 cv
278.747 359.348 278.716 359.452 278.685 359.556 cv
278.673 358.697 278.432 357.854 277.962 357.108 cv
cp
f
264.664 363.597 mo
264.671 362.328 264.17 360.529 259.315 358.796 cv
264.031 359.975 266.224 359.817 265.953 358.617 cv
265.682 357.417 264.915 356.365 261.405 356.005 cv
262.047 356.013 262.748 355.973 263.481 355.899 cv
267.831 356.17 268.818 357.699 268.748 358.832 cv
268.633 360.694 267.105 360.565 264.302 359.995 cv
266.434 360.948 266.924 362.397 266.949 363.666 cv
266.984 365.52 264.672 366.867 262.306 365.14 cv
262.064 364.872 261.814 364.602 261.544 364.326 cv
264.568 366.281 264.657 364.866 264.664 363.597 cv
cp
.698039 .690196 .607843 rgb
f
258.086 332.86 mo
257.813 333.981 257.701 335.133 257.718 336.286 cv
258.643 332.078 261.306 328.276 265.388 326.055 cv
265.923 325.764 266.469 325.517 267.021 325.296 cv
270.597 323.607 274.654 323.642 278.13 325.168 cv
278.703 325.381 279.267 325.618 279.812 325.898 cv
275.375 322.09 268.781 321.496 263.673 324.884 cv
262.869 325.417 262.125 326.035 261.459 326.719 cv
259.806 328.42 258.689 330.488 258.124 332.685 cv
256.484 329.776 256.926 326.055 259.276 323.638 cv
259.654 323.25 260.078 322.899 260.534 322.595 cv
263.048 320.928 266.197 320.961 268.634 322.404 cv
268.542 322.252 li
266.221 318.752 261.483 317.793 257.983 320.115 cv
257.526 320.418 257.103 320.769 256.725 321.158 cv
254.248 323.705 253.878 327.707 255.846 330.673 cv
256.439 331.568 257.208 332.298 258.086 332.86 cv
cp
.882353 .933333 .937255 rgb
f
253.626 347.482 mo
261.436 348.151 262.505 342.893 261.137 340.41 cv
259.768 337.927 254.938 336.76 249.278 337.803 cv
252.554 336.689 254.338 334.79 254.61 333.05 cv
255.001 330.54 250.576 329.127 245.464 331.371 cv
249.105 330.334 251.681 333.323 250.713 335.2 cv
250.187 336.218 249.401 337.766 246.125 338.88 cv
251.785 337.837 255.954 339.146 257.322 341.629 cv
258.69 344.112 255.744 347.31 253.626 347.482 cv
cp
.698039 .690196 .607843 rgb
f
177.365 333.749 mo
178.487 335.137 179.549 336.505 182.585 337.874 cv
179.71 336.885 179.118 339.193 179.057 339.855 cv
178.996 340.518 180.811 341.652 182.69 342.063 cv
179.499 341.841 176.993 342.373 176.369 343.824 cv
175.373 346.139 177.906 347.32 179.086 347.283 cv
175.802 347.8 173.533 348.703 172.514 349.375 cv
172.092 347.572 177.365 333.749 177.365 333.749 cv
cp
.839216 .831373 .74902 rgb
f
164.974 349.405 mo
169.027 351.478 173.994 349.873 176.068 345.82 cv
178.141 341.767 176.536 336.8 172.483 334.727 cv
168.43 332.653 163.463 334.258 161.389 338.311 cv
159.316 342.364 160.921 347.331 164.974 349.405 cv
cp
f
162.085 339.385 mo
162.439 338.693 162.895 338.09 163.421 337.574 cv
163.358 337.681 163.292 337.785 163.234 337.897 cv
161.469 341.348 162.835 345.578 166.287 347.344 cv
169.048 348.756 172.302 348.161 174.4 346.102 cv
172.54 349.311 168.478 350.542 165.138 348.833 cv
161.686 347.067 160.319 342.837 162.085 339.385 cv
cp
.698039 .690196 .607843 rgb
f
170.75 340.683 mo
173.22 341.947 176.248 340.969 177.512 338.499 cv
178.776 336.028 177.798 333.001 175.327 331.737 cv
172.856 330.473 169.829 331.451 168.565 333.922 cv
167.301 336.392 168.279 339.42 170.75 340.683 cv
cp
.839216 .831373 .74902 rgb
f
175.708 339.486 mo
175.928 340.088 176.062 340.718 176.125 341.356 cv
175.351 339.089 173.642 337.156 171.249 336.185 cv
170.935 336.057 170.618 335.956 170.3 335.868 cv
168.218 335.159 165.98 335.432 164.156 336.492 cv
163.853 336.646 163.556 336.812 163.273 337.001 cv
165.485 334.62 169.09 333.879 172.123 335.431 cv
172.6 335.675 173.05 335.969 173.46 336.306 cv
174.48 337.141 175.226 338.214 175.675 339.392 cv
176.399 337.683 175.922 335.655 174.473 334.467 cv
174.24 334.277 173.984 334.109 173.713 333.97 cv
172.22 333.207 170.483 333.422 169.228 334.372 cv
169.269 334.282 li
170.332 332.204 172.888 331.378 174.967 332.441 cv
175.238 332.58 175.494 332.747 175.727 332.938 cv
177.254 334.19 177.709 336.377 176.808 338.138 cv
176.536 338.67 176.157 339.121 175.708 339.486 cv
cp
.882353 .933333 .937255 rgb
f
179.086 347.283 mo
174.814 348.141 173.895 345.304 174.495 343.847 cv
175.095 342.39 177.69 341.443 180.882 341.665 cv
179.002 341.254 177.898 340.318 177.639 339.374 cv
177.266 338.012 179.622 336.955 182.585 337.874 cv
180.51 337.529 179.274 339.341 179.926 340.317 cv
180.28 340.846 180.811 341.652 182.69 342.063 cv
179.499 341.841 177.278 342.825 176.678 344.281 cv
176.078 345.738 177.906 347.32 179.086 347.283 cv
cp
.698039 .690196 .607843 rgb
f
216.26 403.216 mo
217.868 406.691 216.355 410.811 212.88 412.419 cv
209.406 414.027 205.285 412.514 203.677 409.04 cv
202.069 405.565 203.582 401.445 207.057 399.837 cv
210.531 398.229 214.652 399.742 216.26 403.216 cv
cp
.839216 .831373 .74902 rgb
f
222.219 404.61 mo
223.302 406.952 222.283 409.728 219.941 410.812 cv
217.6 411.896 214.823 410.876 213.739 408.535 cv
212.655 406.193 213.675 403.416 216.017 402.333 cv
218.358 401.249 221.135 402.269 222.219 404.61 cv
cp
f
221.628 406.632 mo
221.285 407.566 220.599 408.311 219.695 408.729 cv
219.393 408.868 219.076 408.967 218.752 409.022 cv
217.597 409.219 216.452 408.845 215.622 408.086 cv
215.83 407.483 215.938 406.862 215.951 406.24 cv
215.894 406.485 215.828 406.728 215.74 406.967 cv
215.632 407.262 215.496 407.541 215.347 407.81 cv
215.198 408.079 215.033 408.336 214.847 408.576 cv
214.268 409.323 213.517 409.928 212.635 410.337 cv
212.15 410.561 211.64 410.719 211.12 410.808 cv
208.465 411.259 205.82 409.865 204.687 407.418 cv
204.3 406.581 204.121 405.687 204.138 404.791 cv
203.84 406.08 203.971 407.423 204.535 408.643 cv
205.668 411.09 208.314 412.484 210.968 412.033 cv
211.489 411.944 211.998 411.785 212.483 411.561 cv
213.649 411.021 214.585 410.139 215.195 409.035 cv
216.033 409.98 217.312 410.466 218.601 410.247 cv
218.925 410.192 219.242 410.093 219.544 409.953 cv
220.447 409.536 221.134 408.791 221.476 407.857 cv
221.651 407.382 221.725 406.887 221.702 406.396 cv
221.628 406.632 li
cp
.698039 .690196 .607843 rgb
f
222.293 404.779 mo
221.257 401.422 219.912 399.529 219.749 394.49 cv
219.604 399.058 217.5 397.251 216.832 396.896 cv
216.165 396.541 215.969 393.028 216.293 390.198 cv
215.281 394.689 214.048 398.717 212.4 398.57 cv
210.753 398.423 211.557 393.323 212.048 391.741 cv
210.282 395.869 207.194 398.866 205.125 401.165 cv
206.716 402.933 222.293 404.779 222.293 404.779 cv
cp
.839216 .831373 .74902 rgb
f
212.048 391.741 mo
209.57 396.987 210.17 400.497 211.818 400.644 cv
213.465 400.791 214.819 399.079 215.831 394.588 cv
215.507 397.418 215.937 400.015 216.604 400.37 cv
217.272 400.725 220.231 402.808 219.749 394.49 cv
219.544 398.757 217.747 397.006 217.288 396.405 cv
217.028 396.064 215.969 393.028 216.293 390.198 cv
215.281 394.689 214.423 396.825 212.775 396.678 cv
211.128 396.531 211.557 393.323 212.048 391.741 cv
cp
.698039 .690196 .607843 rgb
f
234.491 303.358 mo
235.135 310.057 235.434 313.106 234.135 316.052 cv
235.988 312.872 238.382 312.43 238.257 317.551 cv
240.777 313.576 245.001 311.181 247.827 308.588 cv
244.082 307.534 234.491 303.358 234.491 303.358 cv
cp
.839216 .831373 .74902 rgb
f
245.876 303.093 mo
245.95 306.237 243.461 308.845 240.317 308.918 cv
237.173 308.991 234.565 306.502 234.491 303.358 cv
234.418 300.214 236.907 297.606 240.051 297.533 cv
243.195 297.46 245.803 299.949 245.876 303.093 cv
cp
f
249.099 305.629 mo
249.149 307.748 247.471 309.505 245.352 309.555 cv
243.234 309.604 241.476 307.927 241.427 305.808 cv
241.377 303.689 243.055 301.932 245.174 301.882 cv
247.292 301.833 249.05 303.51 249.099 305.629 cv
cp
f
247.154 303.738 mo
246.625 303.233 245.93 302.964 245.199 302.981 cv
245.054 302.985 244.911 303.003 244.771 303.029 cv
244.663 300.539 242.579 298.573 240.077 298.632 cv
239.397 298.648 238.746 298.808 238.143 299.107 cv
236.551 299.898 235.549 301.556 235.59 303.333 cv
235.603 303.87 235.713 304.382 235.894 304.857 cv
235.858 303.086 236.858 301.433 238.446 300.644 cv
239.05 300.345 239.7 300.185 240.38 300.169 cv
242.338 300.123 244.032 301.322 244.732 303.036 cv
244.495 303.082 244.265 303.156 244.047 303.264 cv
243.297 303.637 242.772 304.335 242.595 305.133 cv
242.854 304.764 243.197 304.453 243.614 304.246 cv
243.973 304.068 244.361 303.973 244.766 303.963 cv
245.497 303.946 246.192 304.215 246.721 304.72 cv
247.25 305.225 247.55 305.906 247.568 306.637 cv
247.573 306.858 247.545 307.074 247.498 307.285 cv
247.827 306.815 248.014 306.248 248 305.655 cv
247.983 304.924 247.682 304.243 247.154 303.738 cv
cp
.882353 .933333 .937255 rgb
f
234.135 316.052 mo
235.988 312.872 238.382 312.43 238.257 317.551 cv
242.753 311.181 237.258 307.559 234.135 316.052 cv
cp
.698039 .690196 .607843 rgb
f
421.963 331.938 mo
416.708 334.615 410.278 332.526 407.6 327.271 cv
404.923 322.017 407.012 315.586 412.267 312.909 cv
417.522 310.232 423.952 312.321 426.63 317.576 cv
429.307 322.83 427.218 329.261 421.963 331.938 cv
cp
.839216 .831373 .74902 rgb
f
425.727 318.965 mo
425.27 318.069 424.68 317.286 424 316.617 cv
424.081 316.756 424.167 316.89 424.241 317.035 cv
426.521 321.51 424.741 326.986 420.266 329.266 cv
416.688 331.089 412.473 330.311 409.761 327.64 cv
412.163 331.801 417.422 333.403 421.752 331.197 cv
426.227 328.917 428.007 323.44 425.727 318.965 cv
cp
.698039 .690196 .607843 rgb
f
325.542 372.503 mo
328.165 371.361 331.218 372.563 332.36 375.186 cv
333.501 377.81 332.3 380.862 329.676 382.004 cv
327.053 383.146 324 381.945 322.859 379.321 cv
321.717 376.697 322.918 373.645 325.542 372.503 cv
cp
.839216 .831373 .74902 rgb
f
319.791 365.622 mo
323.053 364.202 326.848 365.696 328.267 368.958 cv
329.687 372.219 328.193 376.014 324.931 377.434 cv
321.67 378.853 317.875 377.36 316.455 374.098 cv
315.036 370.836 316.529 367.041 319.791 365.622 cv
cp
f
319.865 362 mo
322.67 360.78 325.932 362.064 327.152 364.868 cv
328.373 367.672 327.089 370.935 324.285 372.155 cv
321.48 373.376 318.218 372.092 316.997 369.287 cv
315.777 366.483 317.061 363.22 319.865 362 cv
cp
f
329.85 377.345 mo
331.77 376.51 334.002 377.388 334.837 379.307 cv
335.672 381.226 334.794 383.459 332.875 384.294 cv
330.956 385.129 328.723 384.251 327.888 382.332 cv
327.053 380.413 327.931 378.18 329.85 377.345 cv
cp
f
334.345 379.522 mo
334.254 379.313 334.14 379.119 334.012 378.939 cv
334.231 379.643 334.206 380.394 333.932 381.09 cv
333.614 381.899 333 382.535 332.203 382.881 cv
332.056 382.945 331.902 382.999 331.748 383.041 cv
330.426 383.397 329.031 382.864 328.257 381.78 cv
328.292 381.893 328.332 382.006 328.381 382.117 cv
329.019 383.584 330.663 384.377 332.205 383.961 cv
332.359 383.92 332.513 383.866 332.66 383.801 cv
333.457 383.455 334.071 382.819 334.389 382.011 cv
334.707 381.202 334.691 380.319 334.345 379.522 cv
cp
.698039 .690196 .607843 rgb
f
318.077 366.713 mo
318.547 365.52 319.453 364.58 320.63 364.068 cv
320.848 363.974 321.074 363.894 321.302 363.833 cv
323.47 363.248 325.772 364.283 326.802 366.253 cv
326.737 365.885 326.634 365.519 326.479 365.161 cv
325.536 362.995 323.108 361.824 320.83 362.438 cv
320.603 362.5 320.377 362.579 320.159 362.674 cv
318.982 363.185 318.076 364.125 317.606 365.319 cv
317.136 366.513 317.159 367.818 317.671 368.994 cv
317.716 369.097 317.767 369.195 317.818 369.293 cv
317.667 368.433 317.749 367.546 318.077 366.713 cv
cp
.882353 .933333 .937255 rgb
f
414.5 320.629 mo
411.297 322.261 407.377 320.987 405.745 317.784 cv
404.113 314.581 405.386 310.662 408.59 309.03 cv
411.793 307.398 415.712 308.671 417.345 311.874 cv
418.977 315.077 417.703 318.997 414.5 320.629 cv
cp
.839216 .831373 .74902 rgb
f
384.862 391.965 mo
388.418 389.429 393.356 390.256 395.892 393.812 cv
398.427 397.368 397.6 402.306 394.045 404.841 cv
390.489 407.377 385.551 406.55 383.015 402.994 cv
380.48 399.438 381.307 394.5 384.862 391.965 cv
cp
f
393.235 384.774 mo
397.822 381.503 404.191 382.57 407.462 387.156 cv
410.732 391.743 409.666 398.112 405.079 401.383 cv
400.493 404.653 394.123 403.587 390.853 399 cv
387.582 394.414 388.649 388.044 393.235 384.774 cv
cp
f
407.007 388.521 mo
407.555 389.992 407.72 391.586 407.454 393.176 cv
407.054 395.568 405.746 397.66 403.771 399.068 cv
403.095 399.55 402.36 399.937 401.588 400.217 cv
400.03 400.781 398.392 400.881 396.836 400.587 cv
398.96 399.23 400.097 396.724 399.699 394.222 cv
399.305 396.71 397.608 398.914 395.072 399.832 cv
392.537 400.75 389.822 400.144 387.926 398.485 cv
389.199 400.624 391.612 401.817 394.067 401.558 cv
393.728 401.947 393.347 402.303 392.916 402.61 cv
392.41 402.971 391.862 403.26 391.284 403.469 cv
388.434 404.501 385.213 403.496 383.451 401.025 cv
383.223 400.705 383.031 400.368 382.863 400.022 cv
383.066 400.845 383.421 401.632 383.928 402.343 cv
385.69 404.814 388.911 405.819 391.761 404.787 cv
392.339 404.578 392.888 404.289 393.394 403.928 cv
394.325 403.264 395.057 402.395 395.546 401.395 cv
397.624 402.296 400.018 402.425 402.244 401.619 cv
403.017 401.339 403.751 400.952 404.428 400.47 cv
406.402 399.062 407.71 396.97 408.111 394.578 cv
408.464 392.467 408.071 390.347 407.007 388.521 cv
cp
.698039 .690196 .607843 rgb
f
402.208 381.475 mo
403.7 379.009 406.908 378.221 409.374 379.713 cv
411.839 381.205 412.628 384.413 411.136 386.878 cv
409.644 389.343 406.435 390.132 403.97 388.64 cv
401.505 387.148 400.716 383.94 402.208 381.475 cv
cp
.839216 .831373 .74902 rgb
f
405.403 374.93 mo
407.327 371.75 411.465 370.733 414.645 372.657 cv
417.825 374.582 418.843 378.72 416.918 381.9 cv
414.993 385.08 410.855 386.097 407.676 384.173 cv
404.496 382.248 403.478 378.11 405.403 374.93 cv
cp
f
420.152 350.218 mo
417.232 349.987 414.676 352.166 414.444 355.087 cv
414.213 358.007 416.392 360.563 419.313 360.795 cv
422.233 361.027 424.789 358.847 425.021 355.926 cv
425.253 353.006 423.073 350.45 420.152 350.218 cv
cp
f
423.429 341.641 mo
419.798 341.352 416.621 344.062 416.333 347.693 cv
416.044 351.324 418.754 354.501 422.385 354.79 cv
426.016 355.078 429.193 352.368 429.482 348.737 cv
429.77 345.106 427.06 341.929 423.429 341.641 cv
cp
f
422.151 338.159 mo
419.03 337.911 416.298 340.24 416.05 343.362 cv
415.803 346.483 418.132 349.215 421.254 349.463 cv
424.375 349.711 427.107 347.381 427.355 344.26 cv
427.603 341.138 425.273 338.406 422.151 338.159 cv
cp
f
415.194 355.146 mo
415.22 354.828 415.282 354.52 415.37 354.223 cv
415.4 355.255 415.775 356.238 416.455 357.035 cv
417.244 357.96 418.346 358.522 419.558 358.618 cv
419.783 358.636 420.01 358.638 420.233 358.623 cv
422.146 358.493 423.75 357.151 424.281 355.364 cv
424.286 355.53 424.284 355.697 424.271 355.867 cv
424.094 358.1 422.278 359.898 420.047 360.049 cv
419.824 360.064 419.597 360.062 419.372 360.045 cv
418.16 359.949 417.058 359.386 416.269 358.461 cv
415.48 357.536 415.098 356.359 415.194 355.146 cv
cp
.698039 .690196 .607843 rgb
f
425.452 342.127 mo
424.6 341.127 423.409 340.52 422.1 340.416 cv
421.857 340.397 421.612 340.395 421.371 340.412 cv
419.077 340.567 417.192 342.336 416.852 344.587 cv
416.791 344.209 416.769 343.82 416.8 343.422 cv
416.992 341.01 418.953 339.068 421.363 338.904 cv
421.604 338.888 421.849 338.889 422.092 338.908 cv
423.401 339.012 424.592 339.62 425.444 340.619 cv
426.297 341.619 426.709 342.891 426.605 344.2 cv
426.596 344.314 426.579 344.426 426.562 344.538 cv
426.422 343.655 426.047 342.824 425.452 342.127 cv
cp
.882353 .933333 .937255 rgb
f
408.08 319.067 mo
407.793 319.847 407.618 320.662 407.535 321.488 cv
408.543 318.554 410.76 316.053 413.863 314.8 cv
414.269 314.636 414.68 314.505 415.093 314.391 cv
417.79 313.478 420.689 313.836 423.05 315.214 cv
423.442 315.413 423.826 315.629 424.193 315.875 cv
421.333 312.786 416.665 311.819 412.732 313.822 cv
412.114 314.137 411.53 314.517 410.998 314.952 cv
409.676 316.033 408.707 317.42 408.122 318.945 cv
407.188 316.73 407.81 314.104 409.69 312.569 cv
409.992 312.322 410.324 312.106 410.676 311.927 cv
412.611 310.94 414.86 311.223 416.485 312.456 cv
416.432 312.339 li
415.059 309.645 411.749 308.57 409.055 309.943 cv
408.703 310.122 408.371 310.338 408.069 310.585 cv
406.088 312.203 405.495 315.035 406.658 317.319 cv
407.009 318.008 407.498 318.593 408.08 319.067 cv
cp
f
326.757 310.765 mo
329.084 314.888 334.313 316.343 338.436 314.016 cv
342.559 311.689 344.014 306.46 341.687 302.337 cv
339.359 298.214 334.13 296.759 330.008 299.086 cv
325.885 301.413 324.429 306.642 326.757 310.765 cv
cp
.839216 .831373 .74902 rgb
f
323.025 317.993 mo
324.744 321.038 328.607 322.113 331.652 320.394 cv
334.697 318.675 335.772 314.813 334.053 311.768 cv
332.334 308.723 328.472 307.648 325.426 309.367 cv
322.381 311.086 321.306 314.948 323.025 317.993 cv
cp
f
325.417 310.349 mo
325.937 310.056 326.485 309.863 327.04 309.755 cv
326.784 309.882 li
324.191 311.346 323.275 314.636 324.739 317.229 cv
325.91 319.303 328.247 320.299 330.463 319.869 cv
327.913 321.137 324.789 320.206 323.372 317.696 cv
321.908 315.103 322.824 311.813 325.417 310.349 cv
cp
.698039 .690196 .607843 rgb
f
336.768 306.511 mo
338.186 309.024 341.374 309.911 343.887 308.492 cv
346.4 307.074 347.287 303.887 345.868 301.373 cv
344.449 298.86 341.262 297.973 338.749 299.392 cv
336.236 300.81 335.349 303.997 336.768 306.511 cv
cp
.839216 .831373 .74902 rgb
f
341.755 308.314 mo
341.601 308.963 341.357 309.586 341.046 310.176 cv
341.673 307.766 341.3 305.109 339.78 302.894 cv
339.581 302.604 339.364 302.334 339.138 302.075 cv
337.739 300.267 335.641 299.22 333.45 299.094 cv
333.099 299.054 332.747 299.027 332.392 299.029 cv
335.677 298.232 339.229 299.656 340.97 302.741 cv
341.244 303.226 341.466 303.74 341.629 304.267 cv
342.034 305.576 342.067 306.935 341.781 308.214 cv
343.389 307.147 344.138 305.114 343.562 303.253 cv
343.469 302.954 343.343 302.662 343.187 302.386 cv
342.33 300.867 340.7 300.058 339.066 300.162 cv
339.153 300.108 li
341.267 298.914 343.958 299.664 345.152 301.778 cv
345.308 302.054 345.434 302.345 345.526 302.645 cv
346.134 304.607 345.274 306.765 343.483 307.776 cv
342.942 308.081 342.355 308.255 341.755 308.314 cv
cp
.882353 .933333 .937255 rgb
f
359.721 399.872 mo
360.97 403.652 358.917 407.729 355.137 408.978 cv
351.356 410.226 347.28 408.174 346.031 404.393 cv
344.782 400.613 346.835 396.536 350.615 395.287 cv
354.396 394.039 358.473 396.091 359.721 399.872 cv
cp
.839216 .831373 .74902 rgb
f
365.712 402.019 mo
366.553 404.567 365.17 407.314 362.622 408.156 cv
360.075 408.997 357.327 407.614 356.486 405.066 cv
355.644 402.519 357.027 399.771 359.575 398.93 cv
362.123 398.088 364.87 399.472 365.712 402.019 cv
cp
f
364.861 404.038 mo
364.396 404.962 363.598 405.65 362.616 405.974 cv
362.287 406.083 361.948 406.147 361.606 406.166 cv
360.389 406.232 359.251 405.709 358.484 404.827 cv
358.771 404.229 358.956 403.6 359.043 402.959 cv
358.955 403.205 358.858 403.448 358.739 403.685 cv
358.592 403.976 358.419 404.248 358.233 404.509 cv
358.047 404.769 357.846 405.015 357.625 405.241 cv
356.938 405.944 356.091 406.48 355.13 406.797 cv
354.603 406.971 354.058 407.074 353.51 407.104 cv
350.713 407.255 348.146 405.5 347.267 402.838 cv
346.966 401.927 346.887 400.982 347.012 400.059 cv
346.55 401.355 346.526 402.757 346.965 404.085 cv
347.844 406.748 350.412 408.502 353.208 408.351 cv
353.756 408.321 354.301 408.218 354.829 408.044 cv
356.097 407.625 357.169 406.824 357.931 405.757 cv
358.683 406.832 359.947 407.486 361.304 407.413 cv
361.646 407.395 361.985 407.33 362.314 407.222 cv
363.297 406.897 364.094 406.209 364.559 405.285 cv
364.796 404.815 364.931 404.313 364.965 403.803 cv
364.861 404.038 li
cp
.698039 .690196 .607843 rgb
f
389.506 296.579 mo
389.209 299.835 386.327 302.234 383.071 301.936 cv
379.814 301.638 377.416 298.757 377.713 295.501 cv
378.011 292.244 380.892 289.845 384.149 290.143 cv
387.405 290.441 389.804 293.322 389.506 296.579 cv
cp
.839216 .831373 .74902 rgb
f
392.534 299.582 mo
392.334 301.776 390.392 303.393 388.197 303.192 cv
386.003 302.991 384.386 301.05 384.587 298.855 cv
384.788 296.66 386.729 295.044 388.924 295.245 cv
391.119 295.445 392.735 297.387 392.534 299.582 cv
cp
f
390.749 297.397 mo
390.263 296.812 389.577 296.452 388.82 296.383 cv
388.669 296.369 388.52 296.371 388.371 296.381 cv
388.557 293.796 386.637 291.518 384.045 291.281 cv
383.34 291.217 382.649 291.305 381.991 291.543 cv
380.252 292.171 379.02 293.765 378.852 295.605 cv
378.801 296.161 378.853 296.703 378.984 297.216 cv
379.157 295.381 380.387 293.793 382.121 293.167 cv
382.78 292.929 383.471 292.841 384.175 292.905 cv
386.204 293.09 387.811 294.53 388.33 296.384 cv
388.08 296.404 387.834 296.452 387.596 296.538 cv
386.776 296.834 386.152 297.493 385.874 298.297 cv
386.185 297.946 386.577 297.666 387.032 297.501 cv
387.424 297.36 387.837 297.308 388.256 297.346 cv
389.013 297.415 389.699 297.775 390.185 298.36 cv
390.672 298.944 390.902 299.683 390.833 300.44 cv
390.812 300.67 390.757 300.89 390.684 301.102 cv
391.08 300.655 391.34 300.092 391.396 299.477 cv
391.465 298.72 391.235 297.981 390.749 297.397 cv
cp
.882353 .933333 .937255 rgb
f
316.345 331.722 mo
315.472 334.323 316.084 336.166 315.141 335.849 cv
314.197 335.533 314.14 333.168 315.012 330.567 cv
315.885 327.967 317.358 326.115 318.302 326.432 cv
319.245 326.749 317.218 329.122 316.345 331.722 cv
cp
f
312.669 349.143 mo
313.014 352.725 314.734 354.606 313.434 354.731 cv
312.134 354.857 309.516 352.55 309.17 348.968 cv
308.824 345.385 310.882 341.883 312.182 341.758 cv
313.482 341.632 312.323 345.56 312.669 349.143 cv
cp
.839216 .831373 .74902 rgb
f
358.666 295.224 mo
357.18 295.509 356.461 296.303 356.357 295.764 cv
356.254 295.225 357.116 294.038 358.601 293.753 cv
360.087 293.467 361.633 294.191 361.737 294.73 cv
361.841 295.269 360.151 294.938 358.666 295.224 cv
cp
f
406.758 299.458 mo
404.971 297.636 403.185 297.366 403.846 296.717 cv
404.508 296.068 406.979 296.172 408.766 297.993 cv
410.552 299.815 410.977 302.665 410.315 303.314 cv
409.654 303.963 408.544 301.28 406.758 299.458 cv
cp
.882353 .933333 .937255 rgb
f
433.088 330.219 mo
433.096 328.562 432.014 327.62 432.941 327.624 cv
433.867 327.628 435.554 328.807 435.546 330.464 cv
435.539 332.121 433.839 333.628 432.913 333.624 cv
431.986 333.62 433.081 331.876 433.088 330.219 cv
cp
.839216 .831373 .74902 rgb
f
420.047 386.987 mo
420.974 385.614 420.599 384.229 421.367 384.748 cv
422.135 385.266 422.881 387.184 421.953 388.557 cv
421.026 389.93 418.776 390.238 418.008 389.719 cv
417.24 389.201 419.119 388.36 420.047 386.987 cv
cp
f
341.881 406.031 mo
343.611 407.682 344.964 408.147 344.645 408.548 cv
344.325 408.949 342.518 408.512 340.788 406.861 cv
339.059 405.209 338.062 402.968 338.382 402.567 cv
338.701 402.166 340.152 404.379 341.881 406.031 cv
cp
.882353 .933333 .937255 rgb
f
337.808 395.513 mo
338.956 396.165 339.814 395.97 339.637 396.451 cv
339.459 396.932 338.322 397.349 337.174 396.697 cv
336.026 396.046 335.301 394.572 335.479 394.091 cv
335.656 393.61 336.66 394.862 337.808 395.513 cv
cp
.839216 .831373 .74902 rgb
f
375.837 409.629 mo
377.079 409.182 377.49 408.404 377.74 408.852 cv
377.989 409.3 377.565 410.434 376.323 410.881 cv
375.081 411.328 373.491 410.918 373.241 410.47 cv
372.992 410.022 374.595 410.076 375.837 409.629 cv
cp
.882353 .933333 .937255 rgb
f
427.725 372.936 mo
428.19 371.7 427.863 370.883 428.366 370.983 cv
428.868 371.083 429.458 372.141 428.994 373.377 cv
428.529 374.612 427.187 375.559 426.684 375.458 cv
426.181 375.358 427.261 374.171 427.725 372.936 cv
cp
f
370.828 287.22 mo
369.508 287.238 368.866 287.839 368.777 287.334 cv
368.687 286.83 369.457 285.896 370.777 285.878 cv
372.097 285.861 373.467 286.767 373.557 287.272 cv
373.646 287.776 372.148 287.203 370.828 287.22 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (\700\755\762\756\755) ()
%%Title: (1505.m00.i125.n021.P.c25.266972300 Animation of explosion effect in cartoon comic style.eps)
%%CreationDate: 5/14/2015 9:04 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj9?5dQdZB51aqkK<pZ$"<;PWC.UZ'%*!sR,Qu3&&7ZYu0Xg!f1NQn#5PnBoWg53BMOEPFG^SWb9Y&\HFmW2bR[RDpopaKX
%F+:1^k?Q<Sc$I*f_iOEHs%H-MX`)e%kI)eI.fH,GZa\=r<GL@XEi[UQFQ[\fJ!HM6(Zg)AVO[N[CG]4EjH^_GarroH=S$`/ogZ(5
%l5Z(93KnY(kjIrXDn>QTFb%dH%sHNa#ddUtok4uf2ikS]\s+6K'>o=KT0<K`I1CYr3Uem(p?9!c3=(lIp@72$o9XgfVQaZCfWA>h
%gaW!_XX4K6QW*P61jtcBf(R8b7Si01)ml?#]mDb]nK@S+%7lhX1,K<Vs#Kd;q+HDJ+T?:[iW"OB-U6RrcFGr2`nAum@LOgt%!I39
%f(K,e@K8ZjH'5u2G3u6a./.JhNEZ4)5;t+-dXT2pBn*YOCnUC>jCXD7k9H2^2?0X"r+4Um8>,[_?Me4bpU!u(eiIuP$_?-TrI;2L
%Q>A*sZeq^(hDFO]6CW'2a[WpV<GN%Ik2>c-UWhJa=sa2a>ATWfqm@KmBrfY%50W+T-iWOFs(K+D<t,kCll`Lc[H;Yu/PgIHn=lGN
%BkqBZ-HIXf;n9sUj5'8-Jn[0ONH*#&"b">&#M>^Z,1BVaqL6+<2]L3-)QbOoYBK3]!<EEd(WntTNdR5jM;fU=?!;WZ=)5hI=*eNT
%7>_hMr/3-8^!`u7[uR[#?2V64UIc#H1g9eMgVG!0*HfbJgU/_Ck@KPmW&N,oJ,f+<^'f-C)L_I&[F=EMf:%&gs8HZB:i5UNEc5`Y
%?E6Hj>0Xb7rD%jtb>!J0[JoM2kHjL%O&>K.3s$XeFGV5J?fV$RI,P8&$T31U_r!YoI;'>te9<ZS^0GU6]3oZ4ZVE)"hpSk/-iMo>
%mjucuc]`#\FR[t+[*/dH$CnrfI"d9!FqOB$\Fc2<!\YpLXYbOY)Qbp;O$DdLc"cZP\^ShZQ]4JF=mkAGMgm^OS+JDn3H4BJUc+.p
%>W)\6i$$sIA@HI)aQrMk1n-6t8>^)7=0u\fp`XO=/E+GMWNS&d<ULlhDQ,Loh1(G-(!)#d)#X*fp'D4>W%9aZqWhh(eYm\QG[AP<
%-&m8CJiB?HUFl'sadf1XqT,b$9C[k%WUVc.^/2?@bAj^h>%!JaL%u3Q-CIt*r:Xlrk,Y@%]$p*hjL/9p`]lu%FpAY1Z!dqm`WB'b
%.+!/BBFB&481ho9rZ*L[)ZS7=.k>lID(/<)"M)Flm-X/+bDeu>^Jf"le18:W!BMNFA!uY[1oP'M*m5fDbN!X[GK,"d$*4JTb4/K3
%R)2dbMuO8t`R$$=i`P,`Z+R@jZ+</UKp*9'5STb+Ei^U&78Ift=ss4/$rqOiS#not]uiWY]tW5MGNuRD'G$"GYMLPr41EbDpM+0'
%WF</YZ#[<%&aePR.*tk#i$QW;a/)bUK5(*BA6u.Xa4],R%85g(QWnB0aV4$W=a6<]cHXaDmpE02,YrqT([DeQp>sS,(OS*4S,W#X
%dA/F.$)a?jDSK6tUL8fp(-8#WnMZYbHDB2n27\Fd4^;dr#%-A^hHqtlkf[]%3)fQl&%ALdk5K=pTB/Q"[ecb*m2__EXB@`M<\sj3
%DJ#[\F&8q++7q=i->n'.b:0O[O<f!Y!@su43BQNc2:efGeqZ^r[C-i4=/cJL`G=1;-=YRf_r?DS?e$X4OQ0[c(A$-k0B'"W9/#8M
%jMOFX*&S>]lZ[OLj;V*6(Loe'\e#`Nk?"s^Ao"GK-f'.>Ek:$90s`D^2q7]HkV_i((GBU6goZi&[3'hNegq5SXSl-N%]"@>i]=Jb
%^QCt$`=9"c3VqaC2#BeH._YE!9E^`#S5Iq/20!cq`%P.k[I&m*7V^fCU]3r0#3!CV(>3HS3b:)51Mk:.kuEl"<ib,We5jP8b[<Z+
%[Jh?HWB'7,T\_eh`J3!<YFJsc>=\']QQ<[Hm.-WX_'\3]'6mW\mH*IXT&%I>k1Y0*hScaiG]ojhK^nd&p,Zb?(E5#3p$Tc-],&+d
%L="Pj[2T;$/qYL?\98P;DW9CK>tH_imJaf%S[]3N8nu#K$qKd=gok4'#F)>8Lf<h`/VgTJ`Zq8>4#tdjAYXq'9M-\_p0ZiS>t6uj
%;`eamb[A99=rZ-kd^Zk/0/rkYs)lo<%@_s_E[RV6-nVXHDU5PWh:d<)c"u-?ePa!G7_P4@e10QL"Voo4<]"K9<Jsa826WR@o''L/
%7mHV;R=<JW1Ap.>o#E;e->n'Nc>f/P.p"5!UHVEeA6;a@nWdru(B1?-ZWQhSlDiETO_RY[;*=DBT)?R^1u/)1<erfC]mB9d>Bi]Q
%[qk)31"3S-g0W=XBF9`>Q4f$p[9?',I$S&2RU2s$;f:0I1.d*1o_*JJB+iR61@BcGn]YaQp9W&"fJ3Uee'5'SG#;q[&'AAn\]@6V
%Ij]trQ19d_EkgA2Q^^W\YAU^Y^t;*R1((EdB9u6r/h[n.]93n/i_\O5r`KYYN<R/[!h#f1"Z"$9%aW;OUc/C8Y0>A:YQd&0)Vi_H
%6P`-U]L"g.6;(snF(c$JlIJf"e9_Ej[9aWrH`a[8jb3+\d?9nljD1S:1WY/tXcg>WM24gmm:CP2.eiR(Xg;@:19WHc/$kW(O@M0`
%SDc0BaG6013TQkK:3+FR@V1cjT&c"5a\n3d/nYGt?)nr#Mb[fF[54FPN)&r`PJ$Fh=N;\*4NSO<o#?m+nL;YKjGg?1Li8G8*_@5G
%XmbZMZ^csnGqkC@cFQH!F;><AeG?1GobUt"IIY`(3:'<JAh1BH35b$A5B(0t70`#4n*H24OEKH8Ru]6`>2EJ$29G<)As%BeSeu<Y
%54V;pZh4-#H>1mY_'D?*M3(FUAH,V7cgQ'm[H9RXakAkfp%A:7r6K\i;<uJNC=W,\VqaBjaYaBqNDA]]+-4cO-IZoH5F]U;rnc0)
%^%!lnAk7H:s&VGMB=`OBBmE]hAhkp8etBc5L=&n9Y;f3SXL#[KT'bgIRGU":Fu\'T8A:C#:H$E6a!9*D"sh4,A]NPJa=uuY[aPJV
%96GF>.t>"Li6E#i3r-j^/MMfpM._0lJCqt6-@qLTi8lmKBbGY.mD+VhZUj#n7U\:U1'tTe!\]bQb9ZR4$,!Xb-LfGCa,du9,n#n:
%dNj?b\VY-*LZ_i2ON-^oMG"+!7R"aGDPqK(HcYD#-.Cql$4M?J(KP'L_l-pEO_"usIUP[29/e16<a;V!)4q;lZe%p4^4'nJHQ2)C
%RIU!-EZAM]4R1(/EgtNk.*'GH:*Zh[ZO>]Rf8H!fKWgAQSD<*\?FMn"@UCKA3)+:0\gfI8r]%UL2:H$;faD-ZB@f*9dOZUZC#O4e
%hp@^]-eE7p<\7+jDqqY[gFKdcZRk#"Pf3EB]F/m`NPX@WZRoY!hZl4iQX43IpZ=?IoO<4-KTg1)7P_@%g=trE`hA&2K,gh%d7Vq>
%<(gBFO@:Turu?/F+*hiPHi^\De>aB:!3Vg\H?C:tO1*]`=@bLD;JWJ`C/q)]G&FcdXrPaM"Oq1Q/+qb+F&"o_Jb)sOo2jB.WYV(D
%e#jW/Q*=]KP)HmVj_F+BjY>_jYq)]p.ceTHQX5<'aM5PZ\DD?1P<8^qTW]k0M>bI\VR&&0p'CW,StM]\l$!TDmc7!T@gHMB0FfaR
%;/QTS1-$pD3A!*pfBl85L$NG)N/9_=e,+;@E?3<s]Pf1pqYlK+m>T9rnqg'tZ&'eTaA6+,[0h4U:6:NWb^4A^Ht4P>3#n*NS0/o5
%6ZSA(j<L`La/q+=Ee8\5*(N:CO1KA%S0/m_jZ#7d5/PH^Ee8\5)m?G_]T*Tb^K96XSbK:-@kW%hI+3?%pW15;ZQHr)(>"]np,_;-
%YM=BUWb:k2jLGZ_,3f(f6s)rak;QUL]m?l&<f1YUbQlj=f,L,1kT=Pf<K#$^)00i2j_h3MWVu&4R[#Geoo?GpWjQ^<41kFqbom0r
%NE's`Z[_V)ABN4lA=.7^`N&"9%3'.UIT3341>FR'/S)B63VL5:4sc;K=*ndj=E5:!1%IqPQ(IE8;j)=+4hF1aoAVl=)f7;ahR@!R
%Mq'cCB?77S*>u1$bgqok>@Maq/sl?];5PjHcDuH2$.<U:ai)i^em6-h)b]%u#"]H''!NcD#id9@Y'1J/b%E`/EuiNib>I*:bD,Y0
%1*$)%DHq;N%I.r]6_Lj]HaQVJhRUMua/JBEYIp?9GHXGW;Wffg_0Nk8Z\BQW>$nNk.J90qc"eat`ehe-6-dT34.33GaR#qK9T?e@
%>Ir8B&9`&4jE\@9DKbc[]RaJoBn#D8+."e47c*FCoGNa+&bqGf?*,D9$%8>P4'_>WBJ_%WcJPJM8VuQt.C&eF1Dm0Z-h.Rj<+'(W
%j4X1qi8m'=N5:XkqW%VR]fXhC>`E1RDe0pVnuM]Jp[1bUQ@J^M^FWN[CKe-9KnUl(b*Rp"N1/Dfe;d]s1C/A+EG*tua#%5b.QK6)
%TXn<0'N](gjiLi,Fd-H%\CjlaUtka?r7>)11b:q=j\A8W+t^!58WA&&<mGYgAYn1\]P(krP#>#X:-CNlLk'NBdQd"Ub#oo&6]J9a
%=agS'X(KJ89<5*s7MaGr]hS%\06mR7n'l=RX'0)J=fq)AS!e0`mF9jtEj(jElV_T'C2#MY7QJXXNcMO2n(#``a$[J)1sK]Yr15T5
%\QM/>,S5E3+Qg6We/Gqm8g_#oe32C?GVA+M8MWt+V\^!RLJB^5?&kOB_P_t^felr>?gd`7q7/!bN%=?Sa,fEMA2nULR/kc[F?oj:
%%\R)R_d0hfF2E"5RHH>Y#f`Fu18&$lEtb-,S*.RZJKqg>*(^tCI_pGE>r)1.@^-=ik`i.@I[2[/h!h=[iG/=]T[.cR;L[XP\Q;t*
%dH\(L>)h*^L*Y59o)3UNB-rcp!t$B<D^,!(P&Kt=TCSMOM[AI*H8X/%PAIk3,5Z273N-M9m827#Wg4l5M6rDKV/.eUCEm2n<=nMQ
%;]L9!GWT'nM+50,C0#!#b:Ico=*`asVF>%+ETPM^CFi/^T=PNSODHT6]P[s,Y5KgF//L4(qQ3]VE9Yl>]YAW/:]'qWqDGutCA@2F
%EuA>*h<k0+m1%Fjm]'r<nk/51((#6'aQ.Kp=f?6/3pZ+jE0/O;s19+<s3#qWs';>eW3S!be6QHHdjfgK&,a%UN/^kdo%*(t;<0sk
%Ua'dkN8kkX-Z?%,3=.Bb+_PO!mV&e4nj:XZ^P9"A+m6AKXni[!IcPY3jGfZG.`^l="CEM(HYpni-?%nV`r#:1B/-@jqP?%sj&\u2
%\KE@(OtrQmS<Rbn\b.s3eJLmV4t5$LP\U+3"+KfIY]4j4Ia>(]Y)cd@C-+5S7jfXtg=Z49j)oO_*Q,3&_g_5;gf=6$mRLV]m>[`h
%(e;:1-IX0Yqs[13PH'h&`g-E^PDI4LR_n##6o;3N@1ps)=eGH"nbaZ,0o9S&g<NA9)O#usFbsckitTn^[$^.qdGW1`E>+%hcb;Js
%EYp%q,R)#f^*.A,mJ(P!*.s/--J*)+0"N5irI,H0l9]#,SR9b`/&qF>;U5'O;$s,oHX+0[%3bZ;=%`EDlZMc)L!_q0Oc=EO51264
%ZbjZ<S+q@114Ls04YuX&-N;l?hto8J(rM\#O1E;tTt#F.n;W%;QXQX9%c>4`RlGd/LMu2A?.)5@j5f]hj)st->W!$>&&19RQ7q:e
%a[+kNio83p,0^^Dnn'9Bb?<?ZW,nKOB/oZ?H!eqK?dLV^jlBoR=*htI+,u^+bMqPU`7RJ:r?#^r;&<QR.?HG"?@RGp`kh&1*J`rP
%`Z\<IKpo.`K4!Y?YDcm.D0HuFR:d/DUX&18T$Y\HB@eu6R>$?t9fb't@Ep-hGr9+j%VK<-XJ)-V`ElXD7^$gY3LR8Sk[-uSKf-#m
%"Q%@a``PDQ2k.4p<io6"A;dpeI,q<Y=3-J<]);D"5'"WrVHE;q)s']ZW7L=K.(?CVauLqMG8YFmf>H(Z&C_PBrTWD&s)KJNWhGIi
%0:"h7Z/O\sUFb7l?e&a2^ZuZX=iMCo?^rJh7U*UoNl*T)/2-e2Njk<cP1Lr)obf1EGB*S[ESFft<r66Y\ER>5dE#?LeJRO18["Du
%->JOIjOie*NjA!T2nQ)4PT,+:s#S>b).p6^\W`0)UudlpGo;pS>MIILs(o<J>"YRHXHbSH8QR?".PFt.DJ2X"]rFLY>KmS>XB_as
%O8A%h:8A\kDL?"n/Ha[+ZWp<UXfcCV)=3pd0#`IXjS</q;8_e)C6>&*`tpM4Y?J(&l9@'V/STO-Sjg1m5K^o$1V[]0@rNT,ALo<.
%`o1+SEMu:I6;?&`HnhTg)5[+EAK30s1'uc6kOgR56lG%.e?\Sj[7Q%O$os8</]uVjff7KUA2#U=8M/(eBUqinJ+RMRZEV?V&]'Z7
%PY!ILLo?iKW^WnGAM&f9(Y#0iZ@#,JeP9jV7S^Zt-FG8">1OoqMipY<O$)$$@4fWEaO4>6R[QoJit@#jQ$[ei?_!C\Q>j,CfC*1(
%la%2<FV\%=K<`#<ODiEcICU\qDp8Z=f5%UnUINE>5.`HAk0uG)ZgMtL2J69%&:(g%B-r5uT*`(;Y?E#l6'hTU'1"PhF;$r1Jo7Tm
%VOX3BAi10F%.aMRH.cqM:bOusBQhtDQVd:FroUuqH.i2OcU@>0U!qc]rRIihBqLtU>CSL*05T53VpBo$4pSgDI1D3/+$BHe5P3XU
%(S4!dIJTYpJb_V_8+A;%pf@?lh5DW*3Or5d-]XbX^\;;)2X-jHM#sH)*.8*?/K`cp%t+3b\<65MoKg$=p&S#oq1^'HpS-I?!kM7;
%lh>nfY@mLl42Lp;.4=j6pZ[U"X8\I"gr']OaAn\e7[_VS>tAm(">lteE\V/bb)KT.=-LU?ls_i*%]st1OU5=mi+T7W6f]ZUfpMoP
%=p[AU/\(HZQ[t=W0j[#8n;7C`s.AXKeqa8%T8h!-31p0i3,s#n`rQ":in"-G/#7A08FOPra0-Omq%7HnrHt91kDtkffWI0!"rikE
%bN3tV^#&/T%D"bq44;O6A5!UCr8lL:8%Yl-]))HT_VuF)X:agIMQKJm):E!)8'%1RGo-Y!QM>MlnIQh>Ptq/OC`uT6'/BN:e]f`c
%jXbO.[<&K+S_BLGe*QN#/9e\s(TLAJN%ZfjH]m'(L]>$\W7nBFFn6Cs;lD:AFK=!9EcQkHP\rZ@&rY"VP)@sN>*["ZKe<DP,]<H/
%M;k-Pi`qCUC+%bBf?:cDC2G\b/A$8jRt#^W0_[B8=?tWg+EFQiddQm57jB/UIOg9#FiuIOTgMDuA>drW$bk<*poqg=omFc;Q+MBm
%Mu\95"%h?de19Q(`]`5$4l!-()s=:^dp&8c%YOL4?&t7^HY!jd,5'B]X'aUtQGm,H,iT..2'P])GWckoL<8X(Z5sW89<Hcjle-.J
%aJ`4EmIae.l5?aWi5qL:BOpH7(5rlOjgT,eL&jSdD'\7`<9ogMA6Jk_a[H/R1:O8A4HbQ`;QY^WFfA6=<C)O];k<g>e"N=@@4fWe
%42'HN\PpaQ;!"+o\c#8T=iuGX4,Gb,I,FVCDQ7`hK/okdgDsd12!B))c#1/K_=9aY>eQTlf)M(^25sGK#T;66m%`*S4Wiu9$_e-j
%fsiBKBY.NO%^7JcjJ^is4>'UEm8i\#]5j[<1:IU+\O+'_b&*HV]io'QTVQjA9rVC1Zamt#3SpleNtB\'[njGlEp[nZefiQ44XY5<
%kF);!].I9C6KkCg5U>YB?=L[uFJOj7\k1pAppXLGr[`9&#)cPMPMPHP]!]i0>&LtGB.p_lXnTuMogZV2X$kf.fb[??<PR-4"N:XX
%,igk![*X7/+3G[OkXDV#E7#oZT3g$Ip&7hRRkH51jLHW-9QE8lm9GL0gT*2G6[03V>Uh;##5!64_=_hi^L,j$jYg<0oKK/iHFq^&
%oCMI<S$7L!fKK4[[F*\[2`>I=I\WB!7ge9BDQDZ4dsSd<G6`77N`SG\SMoK<V[g,QW\-HcJ?>*nfch2n_XU[7G)Wn\H&El>n9)L)
%D9]37Ib#DldZp/Co',0DLP<-6^X7iLp9rPg3p><s.,E#4,s+@sK6rc%4eeZL<de0#DQhMM9GDT[A!:Y5DYE?URX$o2k_BJ!2J@:$
%=p5_VXHLZYJJ;GdZSrHDkHs>6*,9lL/K(u7[VCf"jW7ibYZpFp'taD:l1RQoG.gm)2aE]sXj\l1iCRNmqcto6pE?ndR"&^tnqjFf
%;-B:thk#bk8u(5i;1X8;T-RG1Bm&5>*bi[cTG>r;5b8T</$2RS<]pUp\VDhB^#AEi8mS?_(TcOu/"VL_;]\[lmbtsIHWVH:aoBbo
%f3SjpP&Ak<2=f;O?FetW[G06lI!)1$+g5Ln$HILXpt&>t-UpRLd`s`X4dD*#Bg\Y0rJ77G?Hh)iA0X>-T(tY*[lhF%FPTNjm/3gk
%+lQC*%=2k&T4MfkCUMLA-a^5WFQ"RC=$HT9<Hr:t+Jh)i05p9tDnO2YJ,AIhq<"IR2b#B[U>K,m`jIsYqLlfW8Z#1tF3&$N/l/5P
%DT8!n0afPgk^.)(c[<3;rJ*2@6d'5H>Mj??ZUN1-ZaEkQe?Un^GB`AdUN66:Y!D;]e=9caK,C?5,[&QJ\TZhMd.D"E`m/=^aJI]^
%\T2q$j%_JhlI8D@?\BK-g`o[Ad-COIT[?PP`c"CD>:i7#W!Y=K@Ks4%%GiLM!_[FF/K6KQcCcntk&Ab7qL*W$V=C;Ro*8D:`T[Kd
%SCri3r[5Bbf^S&-=R9)BNQPVkYe2fm1qVrA#rV"1&XlhGB<RJSTi#^*kB26kK6)camiNS4amC=$I'/DuZS#/Uk;!9$'4$]3]"I`4
%'q&`0Z4N=!>1B+l2fW3.hE.'p\_Sn)aGUtE8Qs`8H``4[<B@8U7;ZFGOE#IVf1CHG??aS`mQ!+f<p*lg>3EQS*itdjn\qMCW-,:d
%_AbJHE@6t#?tYuBPNL)lO34$2m]fo-BK_`*L;rI\T8)^GAhRM.>Tefu;7j0dC7Zs(dB;6]9pja"N=<D*gjr+=.]%7Yc.[V,\_-E\
%CSI<UXi$_m^F.H!4\j\&hrolEZjS:LVQS:QS1O/O!D3g5#N]^&;`bLoBN=B7'Q;FHK9`%^hm$e0BaX1PG5dl$i1Dn[2;@R>pW!MI
%Rq#/S-^pXSd&R%QO78ZoiX_X<-bM`g"p_`uXA2?ZTAN_Nh7[4'<kECD5i`^2r].D,[HLe4rsq*d$)>@Tct_3\Kpf`KrS51fohm\c
%i1t0nrd:"p6/u9ZQZ]=!D?aCec1_"Yb'DJbNN<AQ:upjsj0n&]ZZX"CjCUc>e9#nUFXaf.Z><KNbcK*jZYZTcP.>9gpJ`s0-uE^j
%[WU($JpS&q3MW(r?`kCIFfmG[B\DYk,T?"h^!WulL5cT7&LP"ilDLoK74N,po?<jiL>&7LK87&,GAG/uL#Z9&6!4[ZU*d>\5FG.J
%5V@p&SF)6ML`u5%s1FmEGW:]&"jOW6oenfJc1CWDm5h&W3o(^OfX[Y(%/osQm.46ja*B>EReW<";>mT(]12L")UU#Tfl"5&&YE=A
%a\a;X3_?pD_YC4X("UZiaUX+$&=Z1+YAcgu-]PXVA]1g=D%(4ObSV,)I:Yd(>A&[+LRN&j<)YjC`bcu+rU?qBgQmkTgP4Fr3Z]co
%'$O\8fX_3od/"r.8Y6mj-&jQIfPnGY0IDc7U<N=U*,"M%rB\ANU]+o.Yu0iReHU,bc7[0JXPs3lR[9LDRr149TG`2n*D7l(j=/B(
%S=dp-;nqs4nlV4*/tKC@-i&e1DjQrM<Lk;eH:#'iRtlu@O$m#5d=JPn=_f)@:mO9j[[69!pP#a2[C+@7dL]DB,;S@DH$/<!K8"N1
%m`q0VcTH:;]UE,0m&V6Kbj@?-4=f6TRD-:<0B]sVc'tU]k18>IS(5P4]I.ddTC9Krm.;eoBgocBVj-B#Eh%%;HZ=PT\\1!&21L*q
%@A_jdlos#3Bpcm8oc'I3e[+,\rmTKbM[Nj.CUsH.EM]&Khq^LOep?uk%2]dP;ffdqeR%eCQR2+\lqHB:[GEL:D=nA[4>s\FV4r22
%h9u&;h01\LER/p=HYRK.K4lo_qtee)_Y/$LmFe83gWb.L>W=9_=e+g?Nuf!JVY[.Re`n1b_tY^0gNh=&mX9?s/2\1^n)sD1%XQ;'
%_+-A9O`,H$'t+$NET,$qGL@'t]"@l_s(dNVh>'oQX018\RLR$h/o8ehC<@gYQ`GNQ-Mfq)TX%Jc?V`<sGWYL)KdlcAK;Fnjh]==$
%hgJF,Y4_6JIf&K__0i(W5/aAqK9a.C!uY9&&'I8:If%l)rTgfT;If"6h:^)+ci(`Wet!mb^qI__B*U$uA*2Zt=Y)B[GE3e-H85FR
%3;WQO*X!"cHZ#NU=]5h@k>]l@V>..hQ7s-1XTe/uV`ImdITWIA<\GLgcd(%+)SsFUXPq(neDg&Q_QA#41Qd`.4N4^(k18R#\b5X3
%_V=@R3PBe*$hsP.3CQSeD!p2t[X9k!bj-TPom#`jSscthqR4!'W%YVd'H`VWmZ_TOpt3D:#%)c>?FU:Nj6YW-oD"@OO%TlSe&&_^
%kL+g)B'#NSVEa9%U>YdkK?'$SAp!RbrZg1F]138#eaG0+nnod1VZ'mRq=-/gC?\kVKeJ'-W9HgABN=X@k208jmP)51[I+^SHo0_2
%L$dmo#K=B3c[W$\bBIkXRGBg*(S2Cd*Z)6q._W^=mE1@([WXq<L#C.0>P(bbj3%7;:\kB`KQr9Np$:S0\$2"`4H2;e6`[`+[8LS#
%;SV=?%j'VsIj_j]SnXRW*VJ@XP5"rYBsH,IGiR&^GkZl8.J2pH6T]OBk.sqGqKa-N_b3e#5":fR0"RccjrZ_N:R?qJ[H'IAkNJO<
%V_/uQ2S6*1q<d%`_Y1<Bs!0L`m:H^una=0\g]2.01@7TG?9!tFrao+[:#B[B><Xa1+'3WVL&8hmV_dA_2BL*j1D,QkkZD1Dlo\3?
%Eso>38mp?8q;U-&TPUHTltX''j61dIe^pW6V<,C'Tqe4J<_LWdUCSnI:YCNRV1s9fDU>rYXZuZloQ9u]ULTL\@;$^i=2i_-W>^ch
%H3(n&FnXtS[8,$AGe4<2Rd$r_Dsg*BK6cqI0q?IkOmfMZn(%r+cIku4qVJ?^Vh9-:fB2K@&Pm?%"-L9AnEAQGBCVqtT1Pojo^10)
%rRKb"or,+fm9/sfrR#^Y3nV(Ae.f>u[.Y<nDQf<u/)fgg1sEf=BB=2dOnQpkl_Q5i0luetj874rjm^<]GQ_WC7Tm\%SPOI]8QJ$d
%>M*c!n#+pR/jCXZGh3<]&+8TgcTc5'Bpb,QNuRF:D?kAl/[,3,<^S@trgi%TiU5;@Q*=C@mG,<n^^D:dgoM*'q7F\]NCa*Z%Yll:
%lLFbI<``KU1Y\0bKZMd6LrJ9/Idm,pEV\A+f$%TE\R'bk`Std.a`d4Mo;ApkKbaV/J'4nG^Yb:LgFj>?Q5\)>4SJ*iJ5PL%ReI3H
%inN:E_8aq7S+u.U;>$^)m[Y<+$i'A4WU6"C"TIc-[_?t_H]c))InXp5Fd%O\Ga\T)LRcfN8[\H']Hk0*(8=eB.Y!*M<"]+t-eN7W
%Cp!"4r:?A'q7<Y.Qe)W;fUF0E1VJa@kKqDA!Y%M<Ha+%L4Em3@P$rTe19I\Oa04T_RH[e2kk?eBLu'1oDs1qo7nC@"i$L8h)E`RQ
%IhLeX=VVV^DRM:D()HJ0LXA2UmZqP7mq$kT=?tn8N::S4V$)p=g][HXhf3Rn)umt;bc:kfO5mL&04c:`6@f@]N/sZ6"s`V"q2+1;
%"WA`JoF%&)dij*%H9BhD*Wc<1ZQ"ND0aSh(hjKD?:9X8u6;*[_G<&bdG<iBZc\JK<$cCm5=].S?geg1Tl#JKr7NU_qEZa'h-G`2J
%Oq*c_CSbGnh[OHa(i/>T+g&Rq:8)ctrd[T_%p1>g%F\%/SZj?E/IBO*MFRjZ1-i/lJ^Q68TCA9_P*KT"g\hi"fK!*q%R2+-L^@7(
%$%bdJn8&f/[Jin%E$6BZ`C0&TYp:Gj3/spNApZWcadc7D%G:XS$&`4cG(XeU(m_j<?f^\JcGt*j=#1\*5X>]F4QbmiguoLY3'<,?
%Ke,Zi$'Mb&F=n8t:sd0$]J<0MBmB\-'XQtJdb$b%gW0*KIZJI`ru"I\Hd;fc2SVc9jh&]^)8iDOcn'#$m6;s3pj)b(7Or;iIGUc+
%eD]]Bl4-[E5Aa:&<<)X@6><@,I=H7nfspQ[jmDrCZ)XA.4YV0>Gbf/Bj,REV.D%<DA!)oC+QZ7rM#==:9BIjpW:rKHk5E[]4KW#j
%j*I]_*o;@cI`q5D*jA!F[[oLqb3[?D=+(#.LR0&oBr>"aCi6p8D"ZA><Z\>,S0%[<6,Sp&UT&G'"`<*83/fW0g8F<[KicGj)i5/O
%1kZh=RUI`WY;Kl&"nS!<S*U`7I^WC,f"(hJZp"irdk>KjkO2`,Zu^RMFh$.R<U3a#FknU2AaqdQGWPZL4<7N^M$9O%dm7n<nE*C2
%H#`:qGO&[citG;Sb)^-(%:">QdkU$F%B(HM/X,cA'<3TYiWAQVY=ce&mrk#_hp'(7]q_QTZGc2^_TChV@*`5eg;3u*#DSbV\[NJa
%:A4C*r#cn)X"3g<r#jjcCp$V$#FYH\*92$YJ+h_4)<&"#p`%nMYO4"b4SZ/YYl=FFSD>j8':co?WeR%A6XkRnC#H`:@;b*SDZPj_
%hEoS!>mT=#BPJmR!mr\L]q@HJL#N?=Yjo*jG2TJ2].0d3N=KaMQYB%A#Gl?#O/(_"LL>&bnD9%W9[g'!MrXcM^2`W5BjOe%lF5Ba
%]f-I(C6LQSXp?P`G7AC+M$3^eE9E=T!.1;JZ(Ua^bPbYAQ"L&cSr/Op-@pl=gCHN&6"U#Jdd)l]>0VhtQSpJDs"IGtrGq4@WHbTb
%IkdVlef=tuIG!H5E7UZM[KjPFnSj?aG^+$"i:Dr=#EMr1G%1=EP,CIe5@6I!nUUP!NP,Aac65aNFm2^e]"qal"J(3"S@Ro^_h"h5
%$(QK-4&U-fTrf8VI.VK8N]FV?J,S<Ig[^DMK^E/erqV>=jRF;H(g\#cB45S`qOR?B;+E:R\If;EiR)aSf0FS-o#6fFDP),6H;3sq
%L*;9*R+gu2m'P=2ir#:Xq,E;Kqi.*:Hi8rmL$^h\%o<B:.ru/toQei\)*ONbAG,KN9@PAtp<JiE.VY6REOmY[m+FAO*GED"fN=W[
%S`6eRgD[:N$_('T3Ah[no)>Q8]oC$ZWT\i]%j$5qErT[:k6*.Dla62=<57`J:0q,]3J^Q/XC'1i<bE63?@G+4FOmn2=_]SDi$OTE
%D#6`'?@;NsIPF=V?/.j>n=]LJ)mJ&('3m+QZJtN4,9P'80-.`Pljqbn0>42`IJ4uFHF(6Si4dl;`?,?7#AQ$'DuBqRm[ee"UHZHe
%FE`4SmX8e!eXNK?#s(JdXMPcc5+&8'GtOLZG0]_P`U?f?%mS>UC[G3hCg`W7lc_9flf.O'(H2Rt#i7Jj[n6BY\\5</1qsb![YoJ_
%1T_JlK"kF_Zr5RjgcK+:g#2/pe0.E8k[r1iq!r91H[QLM)"BaI-`4X4^"Aa4qLspRLL93/?c,%\pilJ]-BBRQ7h:Gif'egIo(c!o
%BE$iJnPSu>+%N]_q_s&4+&=Ao_0=P;INdK`n)r6M[kedh3ur4rr\7WGDFO;[IA(i9fCY_g7,MIn05$Ui8'W1Ec-+"ck4.6-%u^&H
%8=a"UD9D6tn9+'rq+^"Oe_M=fRL%euS1QeLa1J20RQ2p8(X$Qm&`*j84nGG_3;;]\_buR22CE0pP:_hFmlqEU'OMP4[hjN6,7kaT
%<d2+RkXB]8Xu'-::X&^djd4//T-T_t-&[J'j\p0$ZFR7$^!jY.]DqQT%FQNIldGF3-gT1/c_[5@Ng"GVUHF[nF#3joG%%SaJ*W"/
%bdI&cA1,prTBL-qecOfY>.Ad'C'R/@Yd4/q@s^2g+qk?nn(cbLmG,8T:RW'pi:G+Cn%B&5;GSKc[C<HRFFSW)`<5j5@=.msN?NUn
%ZBk-pDI[LK2V(<A,cc2prHngC4M=`u/pni6EH1AoWAq6O-W*[-Dff)`fe*ETk'lB>><8Ki/ifge@8i_#5rFnc9AQ(Sc>4k?gEW'?
%W$d@Y$]j'2Q5WK\c7+1kQ4EBWSh540DSCDmkd,L-['eW<$n^)bImY5Nk<CUW%bG$MDmIe`1S@le5sIP#]QT1bfY'`A_oHH;_41jN
%]S'J#pL0guGlC!/;b2B0r+39<4c3j+ju,q#s4-*-5T5PODLFV9;_4E6@RToRGhMr=1+dh'..5rq:IXU,3X_cNUNr&u]#X#ho945K
%QQLZ/5(C<9:^f>^H>BsrU@tHWF+ql.nWpnY-:P0;co`cm*\Wq\[a3X*Eb"Bf1hpj^,6WGJKOE%@T<I'U5/p&"1]<:DV+%;k6Q=q<
%/`!p$UWCc0K-qj;*9;PnApb4$/0";2mSD^R#;k'C^;^Ji`Mlc=k'UlhmALR:I"$@A<8;`'<LRZL,\Puap(uP]O5>C9X_B$`4YXQ/
%2-C3nDCl[gkNV!CD#W9?_k>,B<Q)O7;j.sj,cBHZ/9oW:DcWaI]3c[We5-o^f&_!d54UlK'@2+eA!jCk-%0]MS,5/g..0:"_QePr
%BH=asc`U87d)0+8N+L=Dp*&]sdKlI)Tn30j`U_UFB/gr2X'\2fS&9]TI;cgkKh,VA2Oc*Qq.^[P'_AL<(/i*JfZ^]pp[??D16&pq
%nh_+$S3idM7?t>?X_=<>)0Q@B_A,jgBn#4,.B`YA4l3@0Q):1W7d4c%H@>bf(;=IdEP'u^';&0lS,5iK2oG)5")@@?gTog(hs`>g
%gkBc&s8(88@B9DtT<pl]:3#["hBaJVF9JMGEnE(BD_Iu^Z`Sg\EsnJ\0<4?I:>bZqcj6Dt_og,>lfmc@Fp[%7RVq#.pLU3!D=-K6
%d=XNYkj651H1LMhD0J-CQ>iq+!V^#i'?c)]g"W46I!Yet=la?O;j-d"kO/5qSUS2ZjRnk\)'ObtjgoMsUZmlYBmun`o_n[,@WAOH
%)HRIcT1r+JOPsK/>Zd[s5%9FaV0?S>7Qg=BG4#-?`iZXf41D5_^6uk(q`>N`kiKsL8djfprLU@hBm&Akc60HiZ9@sQlYaK0mAiDP
%V7B0s^rJ8h4fU(C*i!/2irp<!cJ^-K([n8[H["2Q9^d8q;/)qjJ!_.OrcMhFG,0ILR/?_f$ONs@a7mTef6#,*nB(q'mbLp>hE?YS
%;$^784]Fn4Xg_>[^Y$6orat]rZS+P#[=teCLGnOh7ll"#9p4T/6Sl4Kl;#oC`IRe#OTY=LBkaL>A[\sj\$eGi@iUkLZ.#pCg3Rc4
%+J]$N<`_M?gRhPj[gVY^qu3/_5`uR%fJ/R7&R?Tgm'a"bNc8TQq;B`=O&BCrYs%iUgM[OV&rl^\U<R.Y\U7Ml?[l/a(>P2/b/_3'
%'p([#dc=G5`;<abW2jq^SB]qZi+,i@fOM8X1"cL!oO4`O06"Am245V3B8`Tui<<rFm<_K]o*_nUAf9lpA"EKBn$`)IeNnK':qs2P
%0)>66%p,cP`Vl%b[,5cYZ=p]1HW/R5Xa`-fJ)!+*cj%O,JE`oB$gT<!?^>TVj8*GNfk#Pn6N15f-gs8Mm_5lA'&,Qu])#j5rJ^tm
%_FA12hNj,)QEe9F7jQJp9=IUXp!Y:!'0RLirVX]6g>@BCh#gY/Qo>u7LW$K:AkH!:R_7t<Rkr#r2tic*NSDgOk3\5C!\9,Ue9Wfm
%<p0G0SWEZmia1ro!tI/Y)Ygb(IjmcVH$crkDgs?$s*-1:+orB<gg-oODgi.&4a"4YGNRS+BkQSqgsCRC8)#Pr'7)dsbI?U3K@4&$
%oQcg&qe2JL6L./9+c9B.'u/6_ge-s8+q!J(Q/B:mXFJ=EISGReMpgG3WR=`/S&B4h&*i!<I.>mB>CLn^7dp%CATt!YYNC[q*SnA\
%h;<bu[kJL=rt6m.J">sC[[2Uenk?+FKg2(r/OuL7W0IQ#P`FP`_YiEkQT%Q'F)>+r^[-HtKrrAS_mhXg)]Mdd`;0NeGfW9Y.G\-4
%D\">$ni,u)W9#_q=af1Dc[PYf=)Q574ZmCYbI=8FG9*.@;qrn-UmC=*52BLiE51t=khMbHZHDo[/DjOi0-&dnBAh&&.`/;db5HgN
%#GlngFi:glD:B2AF%*gc7B/Wu8#NCse'1d7:JBMQ%pD^^i07d1jU0PhDCr=p/E'9,9:e1N>Fb-NjiNtdj2_$)r,JK/DOrg4J%Y#H
%Z[Bo$+'[j![28d2YMO0H$HFWs0<1o1diCCJC6tA/!]>#df]VAZef'N3T9F&5EcRWE2]X,+;;-jN:."^#7X;bW2E:AR>(q7W<3Ed2
%T3D^G\)ePXQHh_E(UlQhqMWhVC:)gbPhYTd]ZM,*H>"0<4#l[W`:1p(c3^(&g[.c7kQO^KS3I7Mm8gDaI+QJ(LS]o(<t+RKVpgGS
%#CNB78Kf9/Tfg\_nPc@BrScd(da/pQM<D5:a2ucY[M=#L#\i9)->Yp/h0V8B@OW[QoD$.PL',aCA\r()&#2i1jQsgT!P9UInl<OV
%QXZ"<[8If7_WS2l=krP0/'gk2A?QL$0.rjR9[6rk@'Rd/#,_]DC,7t`OV=ASnma4SA9`+SPcXAEpbZ*#bCL>Q)IpgN1jMNH*pepZ
%2mgEkL;m:Bn0;h.7Qe<!I[U[WEW^;5<+@;CN6\JcH0%pppBHOK2s#ndH<e(]R3lM#h!hud8\`@o`*8LKjeQKS/_6B0RS4CH-LeJ6
%H=A%Wh^54Uiu=GaVt?SO-D*g$l&A9U1cV'';LFpL2#?_60jHJfk0MBWYm`,5\s6%(IF5$u+Yg>aHkFGf;J<DFT,*.D2(b**]m$m?
%\+SGsRA[<\*0r_[D!U2#a#R'hbC*F$dAP[POCNpiSK"\#]eX[5esU<#d;$*>#G'FCXk<KF.CTPS4P4YF'"6s);[eFs\7e[)bAFeK
%X+'KIi<7>UNU>4qDAe](Rr43]Li'%C>W?Z9X$Cp?=5,q&+71u0ogV&&F5B9TnmBRm6e0NKbsX4VE?i>?Q2C"/>C)#_Fh-&(VXNf[
%OAcGHj^Z<ZH)-XM@Ye:7fA'mS%Ho'kL@]&e.9A"sp%!]M";7bmYG*HX<K`@28#p]uZ>\#m'@1TbcXV0[YKK$#n9CB2"q+YQm6?<\
%f$@#jW*GI8:#8Y$*U97?,I6/RpKLEq+6,BX?;Bu!Dp\<%E&p4RYru6nof@;\^kLrBWQUFRk25:@[42L;qHc<F/UJY]UbHA`Z&;Cq
%lSEY#.Eak?P?oT8I]6Tk''P$AVmTasXdB'f-*GVj'0[`a:<`KR)`5p7=gmLH%a6%JD!SK@KiD,C3I('oJEJDS@6HA>%@9H.Ye,$1
%h]1C;o8\/=QW4nVbe0a&OeP82?RTSY[F\;BR+#q]8\:9Fa.Y"KcbRcDf0<kXbVWOpCMI_ZGHlk(AoA?-4F_\??6XYYdP/@E31J5g
%dl/K2Q]j*ro&[t1;!KWBa54urKf;*PK^O=gDhhdF+n$s\p(_682i)KHLH0fN<mCqlIJ:MVR;S\j^"dptUJXG*Vqn<OB!%GibJe<E
%Icp&oj#>(+N0rZ9hAjOR<dXiO-;\Brmr6GTTaG%R>?;A*IRkQ.UE.qdieNYK2gRKXdJQHea*/^a;(=8+@,LdGq.4Cs0).d-,;eIW
%lgdZSFnmfg&:_1`huE?Es,Kc5mf^c@n.IW,dTU.D;<04Y`<>aoLB+07&&#d;pPq7grg04R[aPZ&]^H#4DDhpo/t1.GJhS8MU!CoO
%..=_=+jg$M3tVLF]T.g!IfB(+oT;?5"S;6),J<j%8C>`-"tFQ4kP[Y_]KDlZ;&_I_H,e%dq2i8H=[+0^nn^gI1"=8Tnp[72Oi`BP
%@gHK5JS.[%:sY7kF7_Wl5[uG<;k=f9"S;4k7'8`9)?eJ:dMOL/Q2(F]>j<[.EYWmMb#;L_b;4C$?,U55^6b=3BrmE-TioiZIF%"5
%>'hSdkQi16J2$Er8n6;CRl?@_d0R4=jq3;mjb5O[Vt7pT&jJ'f4ep@pk?Wl4(ja],UNlSqEdZW*$5F<h&Xa6+L(U"$S.QZRNk'ts
%j'jE',12j;eIsJ>Lb`TL_d6m#E>U-=6`:@nTYD^h&1Yq_%t0n@K+2kmN^p;eHiJZ]m*/[L2XSogN>&*pKt=WjW"?^^[YCq*[%+#C
%&?R[&<,!.he+[nOhsj67r4,%:QX\hH)CSE+(2.&<+.l>,02Xo1R#W#Y-DF3u!g'YPctC^[YCh?.MOW3ebB=%WP$"],C$Qbjjm<?p
%g&fuF_F$j2neG#gljngnU2q49(a;=&C8a'<#f8@,T=aZFDDraZ8(]#f<Sk^Ls(8qe+8XKT<qHE'9SB5^U(se(5(\<Qoj"`$_CfQa
%k?T.T"-[6gMY9\q6tdFh&;suj\BENE2%s43Bf)SV#DU?")'X)p*\]9#8/HLP5R4I4&C70^!lSMjo0<dR\X:#sI0_O$@H]_,**3S=
%nVA`9a!g*.cr=:YOI#*b`6R'k7(e'Z(m:uE]gX`O5m'k-TKsts76V"lT"L+C+h@fMjXA+ss%RQ2`);U#U8HclQaT=pjT`A-,R8!5
%*)NeNR)sc0VLUsfG2$Gk16=8"NYi2Q0b?+fDBQ:+Or-`ZVB`r#XX=CZ*o]><j?51f,<1c+J9e;q(_rhTkW'7iL6b/iVnjT/0OPq3
%AbmZf+KT/WT9eVTHB>k#J:$9R'*SM9%d6eHS,0kiKE.s[J;@Vl+:T#62"RAkLee==b13ft#"&RL.YK(sM?J^YPaZl@rs9Ih8cU*q
%osg:U!b4'D-k&It&6"LO-HR^TbC&EoEuM/cn0)`aJ4UrQ">L<>*L[jT!##-YODu^"o)-ig!GH:.`'3Dm7h]NNQ__(9ZN-QCjB_,W
%P3$B0/!u$k0f)il,d;;s.2<b`Q(CY@Eg$GQ/AhC;H=ZGeZ#nPe`7,>IY(BDF/3jWu.%o>qZ@Z1b#@n3iOChSsP_'9RODHk9a:mba
%(+1rOp4\5m:&2FOcOD_[Gn?s2T8S*\!5aTuX=VOqL-B,b7ZRD&`J4IPnK9Cr&4/51d0^KG7S;<a(u3/,LhbA2@+%ED.pX>e:KquJ
%Blp#2=Picm@4oSt>/Xi7%.[GdbE#cOP0>[Lqj8SKSCZ^*//Q+4;;ata+0qBg1%/Qo<oJdVm]CF6d7PNBga+jTOi\7Q#UIo^B%@;'
%%nC5d,,DMd+sH)fDaZIV)_l-=&X/af%I^U(#TO*)TS[=fi=ur,,\^L14#.mK&qr"B4E)`_b\3DoPVQeM"=bT+EfJ/(G1;BRg(D1S
%"%dEeFEO"ul+tFX?N_Qi'_*g?,&kW/m"g2oL1p&Y;$8-f(!eB3)j.-C"Y\nur&$T`U.iUe^a#Z58ELT;d/I`1S&D3@=Iu=jpHunM
%EZIh[_a6/r7getB:[-*5BL]'BKk+bcCo0)_i.`EH/P.QrQr:1(/7QUFQIBY30mhBrY3uZIY[&U%WY!n0Kb;C<--b.?[r8*Ga>=)7
%&[mgF6RYBS\1T4/%1O+W\`kVOE9KX0nXpf_SRJZ-*=,TbF(jEoXB`<O^`eUhFGX1MQ%AP9N#L-I[*2&VU1(]s"<u)XoZV!BDb818
%>aF+e#6WCpR.X^I(k)V,%CAX$\Qr+4"qm$JM(a#Q.=f&Q6N3,XF1d<T,:!rf,M$;C+m()i:(ZVLZ4fT-REKgdHA&_Y1og"@B.flB
%o[u>Q5(ej`@Y2<5ZDR,u@;Y3`hp>u\.L7,2"/c?":I/<@A0KEjl!\$aD,i%T4UVTP\nPfNTgB"H"cWj*`J:]36HtVd61t=NGg`7k
%&NODLoOQGO6ln$8KK^hVj@^5UK*3?W("+YD%AYj;,8i`h'(i%81_&E!1le's*":nD_2eq*As.(#dL;ih\4*m^^W0mR5nl_GD*inq
%,GEWnWnE*j*O7jP(#b@L5lY@@(cM9(Li@tALG2ff5`n_ea,,mNo24LGJ>=F/&:-#CR2HS7<s5eTL29u_2F/2LoL])00W_GH-tG'&
%*s68"i@P1p0E)QFK%Uek#`[K=!RqO7(YD:[.u$mJC&p'KCanj']4`Gri+.\m<7%3hXY!B-G)_2i[U_[%`!a9r]Fg!:QW/h3PV4@4
%8TH-ZR-l-9#H!&Q,`"R+H=32gZu`ASTgICHaAYlRke^ZbAj3T,VX@a2.o2+Y!*!rij8Q;$JS_07eVA!=L.E%Q*5FruU;L[s1c"E(
%o"A-?LST0JXO'u*Z>Dmn@$&9TC0ufr@)-Zm0gl)1/:\=cW6=lLQl(nr6Ge9BTq3FNM&.!T,Y(G*\85O!p&P1XHk]6VSu(cRgLma(
%4PD1p's)cl,mZq-lAbM$">YAl=[a85kOjHao,LjqGZKT5(;TEYf`H/%7/iE_#'M8]-%olJk-M`kO=6(K6!'@H\q%`4L`k='m=[m]
%J)Yn1=X1WlHV0,;<2$f9L@cT%+)Otbl'Q)Q<gk2c@r3X25Nmg>J='h-?jNleSUD%*N>6-VRiB4go<&#qREAhmGT&'hV>9pn'Nq3O
%[7DPV+bJN@ZG;!YaFoQ"#^3W"S7J+0I1F$%0]$(p@4]8-j<2X-n`Rg@JA$\&LB`n1\<&kX4p&S+A(64s(Es]j7"g3j+VPt",6VGr
%:!KG*6'MD'.2\R7S3mH4a^h!RJOKa96;im:3+T27bO1RZ'.>T,5klKY07E/2T$%bh^gIm=4qO[p@&V'D#aku2ATHGW5]9sO&5WQR
%6s_@/l%HuGS-c'=kQ$p!KF,\f5qJHLQFXA^Ls1CMLhoI9PKgr+XGcS+k3X9m#!O-&Mm-Y"(D7]5[3CcJ9SK]hTYjnhe*7!23NO)8
%a3[`&1D7cL'dV98),Q.lGrG._g_W7m,*&T:iKg?3R[2S?nqAW!ck/GiQ_dNo''Ef0d=mYGYS(>YMF?1:5anF-5S(4%A!Aie8QX;7
%K4mV8J5jHJDuqHRU`%h'[B#Rq&kG,o`GuUo4m]!WVN@r_$u;CP;'<$g<]mW(31,*AeVQ-j2Lgi<#C[j_+Ef+mmYXl/!$Qm7Ur7RG
%#F9Z9lL76?OUT_A84Ac'L>j%,dqk8GH:e2-G^(hA&e0u]f==1C&BPiPAAB$k[nPqL1eX^;FEM&H^D;C=L;^0Zg-(V&7qnW`4oq-j
%Sj8ra4]-+`KdIA.#Vs$oB"GJi&WSN+\>o`V,75b1+I#A]MLX!<#G))E))6lMbnNr)BpMFVl0?2*Ik;"9erodOaoFAM$QI,O&o!@6
%b<,b+@+(-bkeOodiqFV0&dW!!5-o-"RLsO!+j9#XWrs&ra:H9UaA.Qh6!"8n2f\V#`#)AaTe7!ORO+.n\iR+9?].6+s/h*0?0hh3
%%Y/(""bCe4*:O#<K'`AreUtaLE=Ah&jfSXf:m5Kf_2:CR\>oYKNl^9#"-!o@*-=WZ+XIeu7Z8MAo8neTc'$0r?(G*X01@$%Dt(Rg
%W5d-2;&Y7<%m-(f])%O)F+\>SOOUlPF98CCMq>`iNuPp0&;A=+KIKGS>Xb_"$\[-Sl8A"OA%0m^`eu!b0UYoL9J+;.F`N&JQ3?.H
%ZbmJ"<p'3OJcd,uF\^l#oSR$4c]S_M\]eX'20ek/!b'2GN.tHtTG]2/0X@jmF>\U$&M%=a$4oBd#jIUr"YC4*IkY=?YnC"_Q8D5]
%T6,3bNP?0]EK\cs+i8sEWBfN7*2H'^o-#UG\=B$G&UCkuIrHN*&82=\P\)j*ne#Y8@c&>PcJeig+N:Bi0@to'm'*0TqU].Z7KC6/
%!GY\oaiCLI1JAsa#@#T:68:5q(^a!#+X_[+(l?&FNE8^Ro:/,I^_>ajr@F9Y,^(C=?qM!%+6,b>@E%VSn"FA<IP188^_"rm^<I-k
%n"1r,ff*=M&K;S(EJ;GgGbX`]Qm,BOnTGX=]H&QCiE@ocm1q#ULWtr@A/HN]!b4=!a^LO_RpZFi%=jSY%g!8l^t`q^r2(2uJ]+7h
%nTDK4NApq),`NcKqKF,Zi[c#/Mci(,e]/6%XN<Kod`p_97)E?#GEr)qONAM+\<aW,,N1rn.[E<'4cP+p,K/I?iIEp9_IGae8e;I/
%j@UQ7/dFt\:pKspk.G<F7Png(:umL:`Bu8UcdL*_!b#CZ26gqFG__)mBcYjh>Qi9Q2F;'Y2@EB7.p4"Q9T3Sn]eQ<lI=&k/]==7N
%&K4p=b%II=".R!d5_CR(-(l'#19lWu@<N"^I0$Y(!,/WG,9g><NY#+a@42^L%Nb.j9FZNf+,@5]W6$RuER0VWWjF-=dWgMa:PNA(
%KOok9#crtUb\^b@&ScsYB/m[t;c^'>XVAf=TTkSJim*gO%<Gd4)k(O&ENl'!@*?VG=8"A0WR$?QEQ.J@*2-536fOelgB2H&_iQ6r
%%)3U!r$2W6i/1Zu+%-Ci#ThV#omN=9Ac-fc:V]>hL2i.i<5_'5&bY.SE$655-.J5K*"MtrUc\m%bS\20T86E34=&0B#ne?W2AlMo
%ooN!YO+mop[#>OaJWi-nI6_TP+U8h[RQ4Q'IdFP").F/1?'Z')j,92jJ4`Zqi>\8P6rFa%\iLI:dZ)Kr"DU@&+A9ujP+0LsqLAYn
%!qC(?:HN`R8ENGf&#L#W.?P/j;YC\)9Gj3$^ttH0r(T%83\LKX,5FNhQA-fD2=&4-5fBWbT:6#DK1:Y6$7(3?jBs/g%EBG[g]i]Q
%#GE9o6,Y1:&O2)Xg*m;S@j8Gg5jBH-.enLUcdIkfPr),"s/?%;L6\:U=6X>dh6dBO*7-T_B/n,q,!G,3#&<q2_K$f#`aLD_Ot_q/
%ISS*"$aDl^&.LSi&.K74US0J0mi4_`Z66FS&`0I!jV&M?<]Ga@+jh8t-LK&[L^e&[>b$p5_nnOW):[2mNQok!VLK]K(rqPrPRVL*
%##pBJ*6DVc+$j_!%fijEF_ho<[Yc1?4Q[q)Yfi+nfFGBiK*8-7gu)5?B/*%%?:b^qg;K[SC`;o(W4DAQMH6[e@P];EV<S2"EHCt]
%r%`uS,W9lVcn:&uJ>*cV9/IS>0eFb0!n#*ZJbfr(=dJ6,k?Y@`6LGnW)99.Q4^e&<p%1nZ]_`ZS.rlWR#s9<g0*`A'(i^&=3K];R
%Kc5`WLo4K12o17L7=o@7M&2gE*,L`#NPc7G-Hd:jZ3(n7&6D@k*59eY?oat*EQ3e\HGo6(lYpqIkmoE$+l'WDdi`sE+dP5R#ofe2
%Bk---I?,OHkh%ebc&s4KaT5g/K]nA^+h1VX@;Q^rfT;L>5]"@d#U,7mAdBA$ClU3Z-c)Pp+sAa>0*<>;:C'o%!ZM[^1706n@Au_%
%_.Hdb1!1gpin4g9nOO7T8J6!=%<ViRL'Rd(M8Wg>>Bp4SlNSJ"(EOiV&J$EX'ad<U0'E[?U?0A))\0=';I/Vmc+o,6-GcF)c;@&e
%<+lTCqlXl@.PeMs!C2@+UC6r?O_RW_60KGt_AX.#a<UR)Vi;NADAAKLi(p0H!$DeWM@9sI+E8_n.j\Ieq_E[2#"70*mXet8A5VbE
%*@/3IM?t(G$HMt)r^YfmN,2m._8rt`2OffpJajL71.\?!AL$FA-NnF4G$^7j-RCFlOc@7>hF#7*]LJ-))IM]^8/Lf)KYWQ-%3qi6
%!DFA,Ot.]U(&0eE;_)*i(brsRdP[Ep;/G*_2%QVDoT73Pk`j9Q4Q#Z!4?,E-ZDNnI'nkb(;F76W@EK/%8GsA3MGWeOZu+jUb_cq-
%X!Etj)30q*:F.k[&Xsu#H?%6M#O;4h!tm1Y[:%'R&#jN4C&fHra]ai`R07MX0/f9?^6\=bg/FJ1oV(u@n0D`]Mcm[^*("i\g9g*C
%NJ&,.0=#,iiLN55"Iq7=OTLfZ(Bg#EZ13LO6JrP\I]`^5Os=cHKW.BLTh%]g.MeEn.5CD34uQ<MLJ4laC7n:\Cu).W'rYs=\J^RR
%=<ee!:7`YZ(HCEh\4dB7[1and$^1dF&Y*2f9]Rs"i=h&m_[_n!qmK2>Z"aRo#Aok6jbs0BD!;"OljcC7\-\,lAb"-Ccj!&&*.%\V
%[eijRUc;^mTJpC?ga(gT".h]""8`V,PZ(*1<qmmF\1+jAID[O[=nFg:Wj;RHp))0W*HD/f2Bre-g#oXdibW2-Ymh5q;0I^7/-rXL
%>\W/NZ#0nb)*n\18D&O$KpufmKdc)IPXm3k*Z8Qkbg@!9)QS/c1,$L67=?XQ=?$&aVKiHA;!D,f%gilX0k-?">_4n2XN1#&09-/M
%XVYgZAN>3M@::E2hFCFo<'kQC/Kg3Rj:%gaP)-7_>)FYF?V-X#3)XB]H8H6BdBuuU&S`h5`5)^0KW+a48@Gd4.11@5&33H6Y)R7k
%3l`PVHJPp<*=a`IJPZOCXs=,].]N"^"e]=^-@W=2&#iHe*LK*.(kYN[$,eCp;Z#h4'h\G9Ss"]qq!?#2PuYo.P@#AN;F``*.>:AQ
%/Qk]&9kd!HChT6u.KDZaUj16L,1?N#A(qP`Z04_EWcNT?$P,YCp[Q5@e#5FMK8MdAJBK]F&V9ES5nMITSaAd3EuW/cI=%"!AH?JS
%2\(C.gan7tV0N2dIWC/*dXZqg7f(ZWb^dInU^8!O>fNjAq*@qD&tjoB1h-#\!JV^._GsjSB-]$]3=>s)Col%rfg'I\NGlL"LF[C&
%l@E1E(cJU35S)fsCMp`kPtDC])-CAe`(34L.+CeGr<1.U&6*IMqaodc$E#kB2"Mp89>NgQjO!ECb$L/o8952Ud"R^O7%p:fUr3<p
%1Lr,Nd$M=aY3]O%QX^1=m1Ef:TIZjQ?5SRDf07582<kHD9SRT!5h``>fIPGP>T;qP7s,%Z!S:0-6jTg$(a<PD/h.Gm[_P-Cfq9/p
%YCO-q,6>k70Y*AtPa/SWKA,_G#aU8,Or1.62N_W^#;?o6c=fZi.?>XD6L9CL@1X5-OXHCo-1]*a/EeMsl>^bC#31CkPO2jW#_u-J
%G$hSpjh_qug(e0DZeRRr)ZeVo3Wb-Xi=[OY4&h`)^c-JXWoq;UQ[a"Ol0p\NHNYnj*9P:,7gS?.p7E)e'c9jD&<;MM]o,"+0on\>
%Z`)7]9uORk`.O-[SlLSP^u,Y(>IgXC[go794(,W)(.3cI85Xt=*L@r=5sh_+L%i_/#G?iU&VN;U4OBb"U`mq(LO"LpSI.]gc*0nP
%6Bil1"lnV'bPH_gK4h`(%Wg+'dsWo6o-(Ct!Km7`U/Auq3*6O-)hR'%%SuS8-l3;fi/pA_JNTrob!CuK,J]\87`adF2j;Jh0L3EB
%,7'@Y-P_3+k`b#se54loY1<4?W487VZXYKJ_akA1J9\"'L]g7GAPRTi`W]"X81L`<g.c[Gj*r+:YUHtZ)Mbg(TIl6,49n<dL@OXU
%8.88p5dI+u;79YTQ@oN+4Q:I-a/H'%MK+Jg,=TpM:bFZhds3o("RhY;KYX+BmIVWb!mW6JW/AV]2.gt?[hb8oNqsp\Uj*"D,!:X6
%0@u<UOU'Bc;/]^-L-QH'LcuJ<U:tFZ7q$d6$\o+Ico"0q?W8\YE'62C>h2]?aT6:te/1-9eGLIKj$IJOR3kgs\H!tUdINf'%N)W5
%#]3EYJ-JlFO9MdUTgI9PdT;G^PAh'm_'Eug8G!:^H-gqb&FngaS4IT1WB\L3@LX8/j(F+`;'a,+8E:!qfW3pcLK#7:c=`lG)+B,&
%eY#>!^(O%]`#pm%'keAV8Jj58-3P!h"o>H4q2g_\7TAa5WK</GJbUH)0k,.j-o.)k>o_WcPojI*bW#f<Ja`\'A[t;-&octhKG!e]
%T0].K`o0V;/feN&+1RT>Zof3m76u[4_1WPD:%qF!/@8PPJ-M]r3-1TE"b]gO0\[38"@2i.f--Ub?creeEYo:XX/q-:Z_KL7M'G*j
%G97k\nkBV?'Gug3J=mLp_&:6<VPQ\KHO$[,#RVG2G:+"^&?-[H%LY%VCQPU<JU7uY31PP7%?[g7l,agN#b`.X%U'ii1kNCh=-uu9
%?ukV`?$L"E:e6D8+:fLA9L)dGc]H#7'p*tI_i+S=;=KZm,ESN-\9Ap9,G[WhCF2T)RTTin:r`&d@8N(R^3gJ`&Qs&j)GXUiG%MIU
%KW`3=Ws/\2_4_D^!LlBbp^t\i:L"VH-%(@WY^j8QM3MNV:3[VGT@3G<8;h8E_m5fWL0eg2`qD^!b[nkm^khm'gn\'/-n+Y:F9W:*
%_HkH[n4"WLa?CN'M$PaE/ofGN&D4KQo"kf.#kSX3Q`#BS2e.eB_iUBC>UK`/JMDktNcB@+T@T,pYcGRI3(`18_#[k29Sau,18b05
%NCB;^0h=t2>W`B3VN>[\R"8%=ig^j&3S.\p0NhP?K&)8P;(T^m.3,K72@3LUZHS&&MV&W\@nKn_NfY?C.Kh;s[?4i'3f7$/CT%o5
%,6J3fYU7?2+$UtALWG1DGD)_ga[(!/32DN]0c@9'pg=p\?dJgK)RA.S3<(#AO<FrL'b43[*[TX\jT%uGe13jiJZQWlV=H&LNmRp(
%&\.jtj#f;J_<2KiNZaX_&1A;'jc]OCNgpZu+^GO[!/8\Jg3>N77/MLuHksm4B>b?tAXsOPMcZ??@XZWg)We737H&Wc)oq9+^EsB<
%QGje6Rq`Mi<mY<<@o\W16!JjJTC>7Ld$O)6L38oN$'V.bku$'UM[:@-6JRM:K?Tp"V)Z,W#ZVI'Doa?L!>_3gF89'p"%&bGJp)bO
%bRfc6U^296>@"1Eq#`QcHodek,V7=I)!4C0?pP81g[3-,!tgY=M+imA"BUhLj02NQG*ZR_QW9;DR"TV%WDUl'!pLh&VtcJgKPhps
%#Pum/'<ceX(eb_h8#ema.[M]]gdsC;c:t48ISHfMdW$]Bk,>\,F:&?hO<m;n66_)blWDXeVBNBA@h:P&Z*56`LC=oe_pB>D@0RjT
%YRq\:0EI!MnI`$*a>]lc$SIDLcUu,h8Ak]72\]D4+Vh`G^p"'2!)WiofMR5;Kh3&#^t'<YW?IQM3#):i87\cVEb*Bt["groS+[#s
%8U51\,.]2`JsunaEV.?GmtgfG3&;&$*%4BuEu\=NEe%DP#@#BZ^.3]5g].tm7DTm'"XG;30b]UR+]gR^jJg:A#b9#$*<hRaS.oE3
%#I.01(OQm^54ARsjSfeufRf4$Br_pZ"tH&bg`[Fo0M/Dpc9SYpbX]N58O25W#cIZA!n'LY"uud%+`).#liu\e`!p3A7BXMc;cb[^
%T`U8@6<o_V**Ja]&i&`WD%*2_k@Q])M>.KqeWB0-2jBITLicZ@0qcB-4c7lmNe)/JfcK1V4<+ob=EZh>kn-6tbeT+&ch`Z4VhY\:
%dd[nu;,_38K[[LuaB2/(&[\3,$Jl5POYZc#S7H&7MaW-Ug)%pR)MoKCp``g>U^^5G9?9DVk7iCEo`9"k[=#WIh$OEh=93g;8'@Dc
%:ag[u0jVV(A/-(f5_qL-6j5[=[6rUai0`g6[2%-k,3JCX%;u\$^+61n&G-NZp-IoJ&-40+7pMKj@"BhaTNN6i%q&gHfG&>9iW;B;
%TK0!-EWtH1l?kS3`!XJiUh5iB#E_$nA#((jj1FfIiD,'r::`KD>n\B)oE9"K+A0fu5_SJfI>@["Lp\D++FFJs_$STMdX_(KRo,Ek
%INd4>"3^s/QYrnI$'=h^Y[bbpZ4S)G,*EfE(IS!"iT(UY;FF>(&aut$JgH>u(85a[gP$7T0,0ff+dNM&`F3gL"GKIF'8=4kS1%,l
%Yj=6;MZO?6n0DuuN2qY-SKNl.2D:"<2/r%)S8BR&#XprpQgZrmYQiTRKaH!34M)SeMOopU0j=$Aj6RM^MD3&7P&L\s^.?n3"%<f$
%M/,3m+<aGp1*kNZ:)$`2eU'40!qf"CKF.O<h82\dCi:A)M,DNGr.6\9a=!foT0G_7$:Y-#KSX*hOu>.-+W,35+tP+D=_8+.>h,NX
%\S.ZZ8^<qn#dQ+6^#5&)fX\^LKGBA[<Y=ZLMrH.?7_"^LI.E1]/rNlihPS15'A7#(3P<9"0*aGX^aA-(*J6I&?!&VCmUK'^bS:iu
%,KC88>U+9qAAC322XQ-!hi\?if<J.>,m4R9*EUNGTGu5"I"V9^JUNf6m$(d5"NB(/QO#i57CZ3N8/FHq./H"nClk:^Cp=lMPj=)*
%&)rFrdL]51@u7g3a>5Oq!)u/Z"JjTNA=\!W*5^[(7==t\EqSGF"Ms"n/HJ+)'qeW63%'hR6G=*<17SlO@oQ4)=2\)_6K96!p5A-i
%7'#KlF:<%&U9)_sL@5k/3u5DJoE(Q)=E7i2&l1mVF1EkTEq*P>+NS:L!t2*4>&ar])$<aBle#be6TlT'(Dp^hcq)<)7=KR6#K<Zq
%ORFVQig'<FqVpKVnOdaX8goDd+lAYsUTI2kYQQu3Jh?Lig;MSFpjkl-V$)t\6,3u;7_V3q54H'uT;P<,0e43GC1^.p@LaMajqpCa
%@n?@R^&VXoRNkppL2E5Q+LVOfeHUDL!FN3dCJ]E20G:+&V8O18=/+\#8h@t&6=,]F3XmJE.1eunT`JW=#/PX6n?"Tma?J[0+S<FW
%2AD@LcP=1J`a]Skn6)N2.7f/pm*K2>SMW\X8D2@mMm=h&:C^(RPp])'i:Vk#g^L">F##5$+XA^h4qFeI6jKuJ*b[9<,337TZ?Ja\
%LoH/]XTZMM0hF8R%1;#+"/81Y+V[5e!7=hJpo'l$Zee[pF)g8=!YdPt#(iQ-UHgU=8_Nb=+GuF.GR^hAB\>*^aW``^D`9P<F3Y2X
%#WG^6,=*qu!PjCV3s>*?@?U^'Ul7A^E2S7\JBW8V=U4AF"b8r"$FL_*"J?CqK#Jh:)<L`8$%Zaq"YH[Cf+RgZEi!*`&I__B-Ch[c
%\-!.qX?5?]EC0e\k@loB#<C]eA.-cuZ229^Hr"L8+@(qIN04!sHr41,0C`F))mG,n5\YEb"bjo6TOEB9Qq2C[F7r4GP1V6&d`b2#
%jT>uNNdtVLE"H8<.09mt6P_Ti)RokuBZQP%YZ<Y*7ie;8C!*tbPl*0lC&7k2d$>nN>dK:^2]%Gq%7,"/;Z[5&qp+/(AF*1p":L=l
%JfA]=0*[/%LToftU&]kM69aML/jCtF'W[Y4+d.qo$[N5DA<:IY$?9J)&k8(h"t;P=4HQ3F3TFmo=[gCYU_h/ffJ2!FWKR0F$t5^J
%W@=*aZ6^\Nj"$WZE0>`jq4^$0Q%gLZ$J-"8m93\4Jk1K<:;@`Y,[IdRF,*\&OZ][anR$SQ&6oK]VsMPZG!FG5*4T=<n!-2iJF>`c
%3Xu:X$Ui$si&EtG/Aj_C;H@hl#7uT^X?[s;Oamq5$eaEHR'[3;8B48-f5Rjl(IP9E6Sk9T+%S1_Z-!cB\2^`[iPFIq*n"Z%a[#J^
%C;59(PXerp1eOnr%E7d(`W/U@RBAfE'Vlq`),CMoDAJpl`!@`DL]N9'mNgo.?)d+BD'P;Phuj0\O=YI+md5l";`RD-G_"&MTGSSr
%FqiVO8q<)U;uk31.U5%X73r8%D]=Ze]/YV"Tr]GGG7KG6[5qP!XC<"i6nSJGfe4GD^jLG_cm_M>Z0ZF<o:QtYnrm\*0]^k]r)/r.
%m'>F,]7;:<M@S<c5]ps87"np.\1Jf^O\Kd>)jXI3RLC!n\Akt7:j:.B;RT8<$!%n6+i[9@G/kogBtJhW2GV]H.9*arqfcjTD=TaK
%N,695BF7lua-G."o#*A[!@/[f*<9LaOOK'p#:"*'W1;)P8StVMiY\\Yo5m1RZ=h*c-)VtU1[T7N)\57[V]^@m'[tG0#hoL$r\1F5
%[N`YO:cMB]pgI^0]RldV.U6"c#X+kf,R)#lUQ2dW/I#s09`X-N<K&R*<N!-[@/CckLl=L=0di@R<7X-BfTT5qDZtcISj^R96M?'`
%4s@+*PNkO<TaVbVEDVmeiJ?\@gNY3ST.1M7bDjuhb:g!D3e$o!Z&8VL(#sf$qSJB)+L9*3%1iDn-$%(uK]5<7QZ).iJSYr/=g0uf
%q8`sH`3hj5["odQeY!6Z\WoEVNM8b8;Lj-1p&X(&(L";rj6LG7?5/O<Jmr`A7r^cu'hTg3Cd^nM3'%OuE&ff-<Zo+cZj7Yn_;J(C
%PNt<^N,_]c(.;KkX/JAq$N!j.j1+1_8&@Dj.OPe[;-^-[]9Z2#*.3R2UagtEb%6T/C<grHWPjS$3,-ZlT6r12fl+%a[rRpB@kS<p
%_ueLi8DHT13*(A/NmC"/Sa`QNKT1!JRI?K^7"(m$d$)Zf&!FZKSQt,,2$?jGd!m%\N$)"dP/DkB\.fc?>`#1r&1dtL4XVj:EcC,I
%jN,TT$pf`Rm"GTl.DA<nS]_a-A<%$f_as3KQ/"<U)^MAa4Vj^;9cf]e@=7R#mIChbd"p94c5dTe/kZ?M44ne>YFK51cAV"T&Bt^F
%]*dL)(mOnhRNPT'3A-f=FUQ@1#t6(qK94DdET4cr'3M3qiG77'$VV+u4.<[BbJuKH!sfHJYN&.S&NrJ3"d`D+S)HVD#B#t&D5:-H
%\[WVO5_pA1FcsfW%QN`iZU:/j>K,b;PN\p(+LltsWeUjtEW.YT^k[PhOMU:H@W_Ab?>,\GQ((Y\JICrnZS''ENH8f).]Kq^:Vfo.
%YWq;A;@o*030+sREiP:8?m*DmD%I>&D>4Wc<?%D>$p;(@5L,)$2F88a^Y-GX_*%8LQl\WlS:P:1:t39lRn,C[>6:iMOHKb%+m]EA
%!("ZqV#^1-&N$!\]ZJ-6i$+fOLe/5!P!kfc&LU/gpnm:_qq;isE!!aF8E!8PW6I?.OY42@fggc%8sl/<?kK6+%P[qrJVr8_4q&qp
%MuYPBg>iT;.4"L!T;M*\B"J]6`SEO:VX"FEb/K\d0bfDq4C9j=Hk@np*\&W?&iO?`FX7%t34-oUimps:)2G<4EPN*Ierrad6TQ);
%j\Et,>]t+'l&B>Z2cP/fY!>k>92r$TXb/b`<TrrP)8m?NYl8Z[<=>H>4^gL/,89:dj2to."r(MH(tUX:/M#o97Qg#,7Iru\6R'k<
%)F>Eu?jPpDq'Hdk^PZs9QM`8+^1:;an.d7&\3%VGgCR5k;\j^4?gpX1S.j1?c,b\1.0.**foPJK'T[1UeK/?>2$C6?S,mbPJ-W@o
%LGpMZ#`+c83+g$a9E9]1*oo99TW>knJo^6+,=Z_3,iEni+!DjI["W.q4]J:IgRp$bY9[Q_$CP`l&)r=P[W]fLmc-5h&07?EiOK6d
%q<3s-rQRC<mSk5;/kA[cPIHtLAb.n$VITWgi*;V]$3H5/)5A)tB7dq(OMFoXj1YPF(f6NVpVVZmk)cZP+/a/SEd;i+!h3BBW);Z<
%<l!*a2lD)7moMggct5g/8_F)NWiP2d3B/DI=a)GaCf9;6&'qhq!Hc6$"YThpUKN"bPlAK*X^SJe%(28YMCqfIEe$mtE9ntIm*"GF
%7F6E51\l'A0Trn-K_ED&aCS?LEiGTL>]TXTO"c#eK.Fq4\.Tc=Dt:IDhaW<B^`_F1&/T)UE$'FWf9,RYH&?O9%VQ@qjA=863PrmJ
%%"V'bq:ul-J4/[<*De[)RcDa0&V3F5^J#3*-b5lS^=nQ0+C+h0aC;0c9h1d?&\l9-D/_"hQ8s")O<AoQSoq9&P*8"3c5B`.SJ1de
%?aLu3"o*BcH&Di4_BlI4h!]h^EZ22S/S2I@E,jqR2n0r\ho*A13:c@q`QOad,f9dY'0*B#<^^-!IB<`@+L2>L&95[?A>(:)0<^D!
%Z_?%-aD(`>/B5.f.GWO+ig3U-jhn:/BK-'dE?[aT[U>D;/pZh"+#o)9FB'TAfJH?:\70(pj,#^BpjCJuP3>\hkYC/G#+sc3dlc8V
%,FLE4U@J5aPJdB?C[Kanab6"cAClg3']qB3b&T@s*7;Z.=88%3>"KT0S=GW!\,Q.p:=8UJK7I=@'J[R?^99pWcf`.[G4merDM*#P
%g=mZKi:h'lr'Dg6PW`gp\l*=^%^[&V[.jK).MNN=;//VHV=BImpctX@@N$kG=Vn$&+p>Q>#fiAokeWQJ<q"t+/WuL`=oqt%NOqJb
%NPNpLifq393#G`X/#amME;4g0l'Lu$1+0fU'$j&;HUi='S3da+^;e_S5`P7`GrWA[cPde$P2ha\94:0:8"'-X@oDb_CNGSNjQ[:$
%`Ab;X=5K+9%A/ACnVpNpGV>AQb0Y\ZAO[JEaBOM]qDaq$mu6C!E<&sE`lHQhC]`W'<=PjfbIMGF1FR-+b2Q<Ha=\PVggplAQ#l'6
%F,l?D_Nc`+[[0e`.QRB9ODYF#btZ?I+sA2n'u,t>4uiH&5SJ`p*.Chp%%Zk*3b@5j3UtP@4-(-VJ+h`08!5,hdXDp\JS`EASDuZn
%!W)/uSGkLn!;6'#IRGaPk$aQQOVM2VSt6#K&BUd2W[]J+01<aniVMa`;_J]%gdi;:?l"ub*Bd8J-RQQfW:1]TU6#>pK36&uQ(pZ[
%hA&3Bqnl?bfrC4&Jl^q:R.LO%8V0#RjpA([g.?6V33UktHf`Ms1-i4%4G+]k3IHKkU=U7@n/S?bS)=MM%tD;V>-K]B_,417@,-1D
%L@/h,OEsc+Pt#GPBb^d?:db>R&tdUE@(F9rJ$,ZTR4asV(tiYdfBnQVXU0"^(U*%Y1.EhSBoQ;%fV":eFfIg%O"R<Zp*<&jH3=8P
%i>/XnN8=XiZLK`8rN&$)gpW_"ibV/d7:EJ%/6';:0Ij<I;Uu7oYZ>ltFfs^u<5k6@S#IFhjR\W3kt7fR,_9Y.c)G$6J_ZC%kbQol
%E/a2l0%3WY_L?`Y_C@k>k.k]JT[&(g6*i$"4\*5.YjMCeSZ(E-#srWbkdFSgmP>I*PbpXKOi^l?S_i`;$orFrKbYe4Tq8(+c9[PY
%fj2tCGHV7)Gs-om*(DCsb)!dM[>oA@RVU4568=*spP@3fr`b5>\%>sa3P;pEO_5q&W8g.N+dtdLAT;:D8Q6#S[r`PD.q6TcdnY7)
%d^$e_9mMIh4IdZPC&SIKhZQVW#/q`\>,$e?Z:W:g;'c5(n4jU$1b*Q#Y2GKSFfuZSXT1,Epnup4FV!`57M8BXnF/$#=]M"8(2OSt
%gBgG6-b:ckc^CEN<KZLKpK>6k=+?PZ=!VW6p_.;g[2j"bIon"`9cu^'[m!WonI[#;-TPi*?")Pa>Y617>0t6>6S)_iUNn[r"*O6)
%DC]B?73nrgmjQd/,p`r]an9QK_5'n`'Pn\K(Y7'C&Q:su;:EsM0lRZP+`O8;Ur'7t>_RtDdDEtL?2m3G]4@&A&(A-P_:Ele?G6u9
%KV<g_2Qs`l[AgQi70sK=A*;*lpZ"t)c8=mj"KMi1M12?qQ*On/S)$EUQ3XIjCTb<AB<9ELe*(BW`tj*)YV"W#KmTH]MuEdFVV-)Z
%s6AI8QW#c!aOJZs9.ret"6uGq"V2q/N+_=f5-.S9#r5LtQA?@=J.7WA]`%3Q%cK^s>RRC=O-IQe&"<aTBn9p2%]B$BKQ)L=&0J#9
%!/.AaLbo>W(g=S4dAkFG0tmJ.>^MH+(K/l/a+*1t!\07@RO^n#9XAF:W%A]_GYi)p(:APE%N)hMp26(';T^*CdtIt@VB/.i+\WX8
%`#@Rk%3#274#84iKe&V;6Ob5\:6D6n<%_8U7J$%-B`Z'1Y3kaG[2CPN.YU%H_3F&Aa)U`[<Cb7-D:[YHTN>@2,rpS[5Cm%X?CI$C
%k[YMjGjaBX`C(%f0=Ij`0@K(fME.-m:k&/a1>@a;a?k;I+/Z-<>uYcP3p$ii"HH.[rL<[h]/@-J$\b%s?.DsHM+juA6?sZ]:@0Bb
%E`eW8F`ZL:_mN[Cb^4UX>u.b!&#Al?#:0!B4D`T&lnicO_QNa3,$P,H.U!(B[r%g:`E9MP04uX9eVH+'E.BdV'M%KDin^SRm5HsL
%SmqpNJ&0Y`!a;),6T0X>nsVJf!+Z25BgnY!ZK-doJ":,nEH[3eWG!0J;lcA'Rre#)-WWOu4N+2(CAm=;b34KYd2b,-[=o^pmKV.g
%$ru'IX<uZOm<8/IMp9GdF=e=.:Qmmt4:\u3f9_cq;g!gPbpf\^p,Mk)nStW]-V]EV=r<tDX(YIa2"&BQDCJk^:).dnRY0c'*eq'u
%L"'>LU^AqeF_OYDHm/RDnZj/?nH^Qu"]]cLB<,(2HdSou%h0Gr@I^q0LIa\(H6fbR@[S&nY>]Yik,"gVP>!!@)tXh:0nY'5T.H>H
%SP(MG#/Dp2$+7^`QI#pb:.SbOq."Iccu:02Bmt6>PK]knK6^P9eYHFCAp(!a?AL<!dQs<X*_jB,2s6*b5o@6P<Hq3Z_E='WjmU<e
%!0,X,q/k.)PE#Rsrq)@kP*\#P\7Ha])CbtaJ$'WdU8HoTT*tsq27d[qlJ0i9_=^+K><qj4lliF_q!,IG]t@32f=="/KO>G<7)O9Z
%90NZH)X:VHlcE?u%C@9KB)K*^)8=t-Oa`%.OogmsI3WnV+YW36JPKVm)nhc3mBcjL^00ns0M2Cgjp2iZLHTS;bId@?b%g&MJ+ZU>
%Hq(&\"W;.3`V<*+m-p-Dm,_R^and[0;([<QXYJnsd4*KKlS+`!VJ_u>=/f(5S\J:,JHc;5;4KK$^Z>D2=o`:V7,sc5LHLks=V=J,
%;3J5l:SagML#fLLTY*d<`=BkN!q0j6FT]B@;EB%uQ`jG'@o/4RfVuJZk1b08@bBE&/Q8Ig4+iHX[sD-!D*7YJ>8'H1:V9)Rb*`V\
%-AiFH'!NTHEV$dX<CMTcJqPYWjHS4O-R0%BiE5Z5:o!QU+B7jP5YXC1r-;MsX.D6-XT]=NGG5\e4#gpbQ?TrdgB%&hFo76jdu:Y:
%OX/cn.A,2Hf9l4Z\@.R&)%)lX.KQ!'6!*8Wh!NkhlQ*-s7*_'#,oWN,NI$DMBaDDXaU`,-oZPU=,8Tl*>?KF/?Mr+bfj\YaF"EP`
%/M\[oFE"9C8n:^:=_Hi_I9eb)<]U/--='t5Mb>i#6l0Tf&iV\%$`Xt7r^J7K4%DA&F<<XYg]QtQ&W&NTRC`*35ZB`ccZR8R(9fB8
%Ya]tG,<&P_AXB8bQ6&M=<0GNT!<L9(bE+bIQ>mGWEdN+gYQcCm4S1T`!>Y=$X,^JV6<Dn_I==%N[BN./<KW[n&gb'XVbi5[l)1ZW
%#VIH\[tn$*9l[[I2tGuq_\.aff4L-aa43NZWl0,#pBZaF+=G<h"'.$O*HBMk@(Oo"bIbq58Sk^0172;%lrF[l$>Me!FGC.arJ*80
%XAF#tlJhjUfjf_.'a;Ws8iJP_"AnFt"fjQ9F^c.IM#uU,1=1)[Sh086rIh'G92MtGO$jg(N&V\<k`PF\j,#"f&k@$?n_,P]"=.ZZ
%lt#1<dB_Hh:*nNX$I%oP*!TNu3eC%?@F*W<Ef43^Dc9Grdg;9g[4R;A\7mLE`mX]oU@)[qnjao1>jd.lZ:?UoO(n8pL8_oam1`AJ
%iCD%W,eE('6WKg))>IT:$T$]4fXB3Hf*JF$=c"s$nf""3[:.;iT^5KoVe2B?64oE_oo]I7c%@)/PNag8n6mW@Rf+h<3N[u<Dj_ud
%n7^647T.'6YPUYd*8W'b/?t-?J'^lN.2`8l2mRr69=AVe_E6A8V.T%0c4=\K9IIS_jQq:<*hRb'.5+?Ra'"+#UM-aM01`pPH+di5
%$K;VpddA][IS);I.2!'2)u4n*.9JH=;#t^8:SpnoL(>eLF9KKeKrs"M>EqF)nt5SJRleOli1P>^0n)2hSn5"gYeIs^#O4t<`S]bV
%(9-I<4G._e^.0)kZlhAP6rT?]:I4`gJrE6G[M]*:RW4Rmh9$=9S1%c)K5*:bIbi,QcMV+uBADj!j5Dc$H5TRdPF;YmgR)TO!ALet
%2ca]RA-$bXY#F3gKej`[l(dJt21/V">H7JH8FN"R-f)0*l%-bEDRX2SnT^U.m&^!H:<R'<n54pjZZg/o3TJf#j_^Q^eNac*A\"%h
%)f?1`#XR;<ro6>nQclV$jHDrK766OU)RKU_XLhEIc$`;cU_$]L;^S/olu7A,]t66AdVm/UalO.h^.*5E@<$2;#O@/-@raM8ArTtZ
%4k*@`eT>aoH^G)9&nX)[(+M-Z0457u^8?PQ>b@V>(8Vd;A0);B0<9jaW5*u:OBbXn][9e2laRLgO%+5DDl*Z+j`+tYP@W\BX\nC!
%McRS=/YN:J`>iuAE#l:8`0_qq47ML0n/7O9B:P9qHLC+?"uoVVat`\r!BcC(l,o=/iPOk&*&1Q[<g4&MG9c"Gg^fD6g7q4a7G@iE
%0@#8*d%dsu*ch!ZQs2rXRhT8,jCWA"`Lp,iJ9L`"?(kJPSAiM_W<N$-qREcP.F#S@CPk<Off\/d+MR;\F:En+_9(iKX@6J%&r@VN
%2_d;E?q3_?.:dbMG:^m];o"@i89aW'dPUs-]p=#Q-eE7cnk2%J?smIoM&j"38Qu#X1,Wt'K(c#KP9L2`Zk*5a3BCohfSmT;XABlh
%"W>^VLYJi^&aZ3b:nS;Tle?Sn>:ML#Z733;qT9"t.&!BN6KtPP647P*U<'%Qf]:7_P:B,*D=<j4oQmTil+GgJY/HrRAlB+l-'V1C
%#3mASfOG:.,aO#g.SU,d!<Fj,IZ1?+r2sBfQCnksl\?m.PC\`lr`n],+OSK/cs&m!>!fT%ab"A$@Itdpc[E,=UE4L-a6q)@<$TS/
%P>,qPqhCUHGcOq>'$ZsB\?b05e2T,bod_sGoeNE<q(9=^A$dsape]gkP8C*81;d+H^IuH1q/*lg2#dllh63V4Z3tfYF6SBsHV%uD
%P2a[1KQG=kcs#KU%1/hM?)[jOStX!Fq-WuU%70Eq90+@SQVtKpcU`bU*X,L,"@n#^q1L36(DNkWU8SOo=Eh'E>YeiF[FDO&N:G]:
%M+N"n8!/*?os:7,0p]3P;*,BD.L4eu"qPa\1'NLKb2l\EdEag"BS@>5;u$XO+4dbbab##l'$tc<;(SO!JTl:BSqSL8=)8M[g8=6r
%Hf7#iQC:T/n/#:R7t/.H7F"'?c"6:%C#iZ4gu4hnj?f9eW*U2Ag(#7]I(Y1&(M*f;F9!bI>4-Ji76'BPLJ",U?.`?X;n47?>472h
%7N2bFp</lSdq*HLj<D$-n`1_Cq;u#$bFi-J%s$k:!A@WInb$_.Zuc+/hIogjs.D@l$=:IUZC\F:'ae..$P$f&lg3#I=G<34#a6,O
%VSPBf&anXPfhq2W\_VP6&_Vj>FY1?g\M9._=4_6keZS@S(#=2MUT7kr(<5UZE2'AU_&/<^C[DgVXcb!p]k2j<"@69VAFR$%l7tKY
%50A^+a>WY-'IU><k:]dI+[\9la&DKdj\dLB7\!^7FiVA4k4U6hC/%RG9hl7+S&A4$'G,JK$rNLVWs,>a%oZMZ5]%>brJ:/8Jb!<[
%JE3$?el7OV,V.N*Go>LXP)Rm3ZQ;Q*r?E8q_JsAPLf<MDjWQ/gCg%33')*mB#luU+'r*,*Qm/D,X4`=Ci^uC_XGds"k-oilec/oV
%s6j,m0E82Us1>H5n%/Aq'6Wtt?Jir0,(Q[mD(^U4aGPm++]:1;,LjC*^:0gh9hYlg;f>J6a1Y]W'RT3gWO[tH..`d50Sr=c8\;2/
%klai_4T\]%cf*/,Mh,tq\'t5fX6!W`W?G1O="raB'.pV\&dM5^,,p@].LlgAoZ(%@T-9&dO=hkuBlTuJ5##*#-CZiUEa'U:JQ7s&
%g'V]S'qtl3HM)Hg;Xl4O6S(e_,BJeDUnGdl#B)(jIocB%VLh:CK.U2e&-ObU2K`a;edF7rC:eO'&]Tp.N/a68>S\V@j]+VRGk&?d
%#N5JNWYa:2U0MLS2ADI#R/B\C_G2[SqnCMCXDi+lhJ6ehPkqu='P?BLNcMcNH84Y0"kp/CM-a<#,39[TUAP^>Uo"u_N&n<bGbARB
%_F!L[bI#bl2lk97HTDrL8BVNZ!c^&&329V(4XRse4MU;%LNYf:R>_@%3.NL2-XF]D%gC4??<U<5ASO_>CEGMC<nA5.?7r8Nm+PtH
%+&,O%,Dg]7D'_-'/?l0B?P"tE?CR*F-$2eFJmE+PFpn:lT9Bg=c-%8ILu'GTZ:ZNA/IJ(&?M<-Wa<Sc!)VV2A.#K9&Q1<lUpVNW)
%GhEC?AGBn\A=1Bq1M&\?-o[AI,5%Fn?)"K4>mS1[1!VkZq1H[\IF!4SgRaE?c<@7U^pj:[;k-FoQTOER;O:ZP1F,DsX`,,0<nLCZ
%&6##`H[aGr2cu@eG*:4Jit)18>^8&7.*(ljgPF"j&jo8h:PW7>6YKG"_'#t^D\LU@!`pZDLR(,qIub4sJd-\hVJ=QjUY]$,H1%36
%NgcP"=$^KDC)II/f3=;+)%HG0r01e\V82c`?":-)3j@=E,BS_D6t'C3#(ikEDPS"s;gBk[Dt>lXM*UVo+7"T[8=7sZ&Md'7j6sSk
%`<+pE;MC@4fV"tX3Lj"'Ft0Q(FQ5Lmo5B"VO=2_kUtCO'aTh(lgG;Mbj$5iDCCC9%`TrgVUbntiU]*c>&I^0)'e&H\XQ*>1qb#_e
%l+LbmUE(Q[ml5enoaPY(7j-4L3d%cC<QOI"SplQ'fEsi;)&cSB?&rAR7/_C'VAg3@Oa$g^pl3nd=?(a,ZHVh-()VQ<ms;FeAG1`9
%?SuNUbd_qs#mF07o5b>Wa)O&iH`%j>V3Z]IdtKjkjAADZR[`IqU,P?d<iY!.AE\k`LOVB3!"aO^64FW-$b?CJEL*F<'id](Mpl1a
%@ki3A92#ED[,d\`9p"lB[]q@LU[66!^0Y"-IL3?g'Slttm`llaYo]2"B#]"`#?3W`/8[-IboCGgqJTC@;[9WiX]VGo^"]!EenI@%
%^LGNi,:;`VMg;'Qd5Xg>WO?,,Wdq,_]4`]XD/EmdWca]sd9Ha$n[?K;U6C0j1aTX2d,ml;8LH\M2IuVPURf+:7`_C;58/B6ClM*@
%0cM(B2Z?_rL:I>8XRL[(N4;dd`J<ZQ2cPkJ2Vo/JL6T.CcmdR;s'D+hMi9*=%[[aUDWjPJpJEe\m;6H"UXJc3ZJYYl.O4uji&SNK
%.p]!1GILgMUgq/h[\DE=h^\K%3<uK,<Acq;/'1(VLr"1m>K$u?D*M-<;mrtor3Zc&gm+L\=AdP`C%G\q,CfngSr\(Y-@Yg]GkZn6
%mr8<7kEl.qpp&7<fc_k9osRu@K2iAiGJ.<udOQQ,0N_cVkRQDa%EJ[qZlUi`HaWG)htf$tS*Hmn<eC&9p@-,PaLTmBRi[d-i;IWh
%Kb#gPJ*m&3^NM$W1qlq^L.S6$qe)s=dJ\66F?iaA`Kh!XSH>>E#Eu"j0(A:i(P5R8CHqg/#?0EEhgS\>oZ"$enaYcp\$^c'J%4r%
%n_9*0]J'2-NVh$b^[IMLB2]&1K=T-<$%2b`j`M.%]FGMFSK\<)Y@kG<D&_%&@FBLR5TZ!<Od0+^4oVi"PA_D@osUS>N)J*E?_a2U
%a5]n3_@QTamDJ_g#3SdqGh'"B'&>TEL]@8_6gN_X_ZA(C=(di20Rp0hXB;i*76u'%CQb-CgF.lUT_"Ml[WI0X5RHsO2SJ3Yc@k^E
%4,f$m@*qJ1aX2uhXt)Bc593b$Zr6h1-\J*BrP"0l2A22):Fc/FMr-I/IC"_4ZFDK!Za'5a\I@0,1kKmUM.n&*hREI!T<*VcaHXS?
%M55!&@;<d<>&A#Z)Sssu(fg,&*IWGS6:r%m.0is38K[9-#j0'aScEE.7/9i6QhG-6-RBm'@i<\7(*'<!Lo7$CClB.>,<H^88%'t*
%2Hd(a@]f%+64^nC%9JtGC,1e)j!qJ0N8H8Z]s1J__W3W5_MjbS_r(fcA7@bdE>RCnI[Nb,A'03'!_n4=.QHdWm],H$-1a0,(5$k1
%!)qYZgc;%/8[6Ea1hj^Y+Wsh\IGs78<koMUeo<=YP4#lZO/I7s(iGigjkReo7-'tmn(sFaR&4<o9QO=R^.K+ba5!-i2sIgNB(4V*
%lsRsZXp,'dRZnctWul2e9QRY"%iN-aP&TN*A%*YnZ^WUXXgch^`IH!8@ZW/.MCJ?#'eqUX2;%uZaf>'nRYoLNA8V,N^$"V9;3rLY
%I@QU`Pm=9t8Dbgf#kjWd8HG2/_]U4BZLa2rWF-k=#-p\1qm>W$cTJhK2BKgD3h;^oIZYj8?fIMZ0oM5i.`DVc=1L8<S5(LsQEh3L
%EVjj@lb4cG1NR#h5t3DuZrQn('M6I/_`C6I.7kIV!1H]L_GR2)os6:eU\222LeXe9qUdk=\o`BGUZ8BTHc/aC8tMVce6dSmVHUn!
%_HEg8,4MHpVCfd1,"HX3j9oL</l=]u/Oue$EiO7^\Yg\h,7VVF?0+=joPj0WBP.!>cKC&?R*]alW9Z]uV8DZAk8k>g.QY<@bc$r2
%b#d!MmI=MPHi]",ZECDq%Y&;S;^GEn+ANFq0-d-dSO+LGd1#t"V^4>n7C9*[R,egc+Lc`'W2AZHU18h#WY3Bm_l%,7R%APL4W@(D
%Kh8S[,`:O$Hnl^Tik_X7ik-Kk:M##:[%C+f06K[9DdX4MIC<:8Sq"4lpt1dq2o0V!i=`[uRD]l'WCIdPII!("Cd;2T@&Yous$^gl
%.CG.'mqN>X>hqQgB3XFkA9*eE'7!3<@XC1OE)g*"288)cnSR*gS>BMi$<Q?(:Ch`5[:6kR!-Sl'"gQ/"]%8jj`#$>`V-&r]g82]:
%_Opac$j=l'FE'i3cL?.FEGeW(Sd8#0X:1G:@!I6ar(es#\'PpS2ms`bd99M@]::,$WDIUCPKlj^DRVR808.&[qDq<-rf<r?cCmU9
%S3B=H<H9]mWJIDRDQ[/TG[QPiaC;;k%]XYp6E15k^e%_[\"b)WVBcW`J>aAl90)`eb5n]HCW2]M*1$/1CWOc87P]^+OpBKobg9iD
%dEkMV$.Kq=^uZN?36FG5nS:+N=4P@<&5?'tBkqYSY347nKm`IK4K*!JX;tBbf.T>Xs)`8FpQ;m;hXp]khR*=\9d:]Rr]2;c=.Ia_
%7m*68b\um,:/B7ZAE8+#)OABIPV\_e0`CRA"]f(cY"GiL;/D_=S=MQg[Nq`]_lFd"`m*b:.[fU+*i=9XMA1kOEjKP2\hI?G(B:>#
%HQZ&B3tW)^8+[&N.E9jqm$hPcjZhE%<V$_Y*$"CWnn>^!DK*L@r0@1loM\k:K4''rA6OXa=$.UngJ<kXGLc2Ro+H#:8d_l$Us-R+
%eW!2+XPMK>SL_->`);'JSFPo:@9n^>\+CB6ZfbEEb-s%W<n]cR>A:j`Xd$/oX=r7-qO_RSs6E5dcMos;Q/>81+,EN6j53=Frmgfg
%P#eHA_Eh8G5\VD+h#aF\P7%?e#jdO]ksBifh6Da4&kWqU\t)-=fR06U'tX\`1+*b2>#FfALsNp@[K94ZK^M/AZ!JcIS0$JA[OiHE
%Db&:iW:O7=bY9?Z?ic"-q9(GJejJ8,NtS+`4C(b1S%)jbW[Af+Gi`[n"hY?KPM*-0F2+hO4gZ="om3p2?3s\/[r=1BQ9f)p-*]9O
%D;BsZD--LB*1O3J!1b(mc[GZiD7iX#/m(-8_eB1"'7TD/otW0>-9E.6P/2WpHIjqUgM9?)9bl)6#U$2ZR^N3Ad($#a39]K-_k;Qc
%NCGJQq><t&IE&QkP6!nl0L$RRZgh6&&'WO5#@D*ri1S;%^Z]`:icL>b9rG-1Ja$E7;j0A8Zf7=of`A#,?u^8n"3?`7IXCUb*WnT<
%[8'sQ`OJl_Y+*uG.tfh-ro;dOno<0]S2Mo$B@E[:*$*SerR7hpbCJclpMc%"W=4@L2q($Fa=*E99Pj.LeGW$;V]-'tU6c#[r"u"j
%l1CS9aWO@)Ead"I5?tcg9kme(4rDHVpP3s@s#Y?\<EF6W^F[1s$f:D\rgSDH)kcoFkR%$FDN`66j9B=/!!$PE,+u(/()!#TV0#7d
%L1k>\Z5&L*ls"58WC5sQ[T:Y5NB0p<+o]r)Fp=t#^Y_Ot3.9;D639N$]hXI#<?g;NI/jo)&^1;4a,"kfc?.\h,J"dfpb_hW:(O?V
%);2L$KPGH;Fu'qiTD"M$YVLt()(Jep(0p)NdL++p?^ORME)c?>HF3*4;l9jTi]:ACnC"h_XJ6hMrE1f=!"]n2]H`^_1BeA#P_`P!
%QPJ>[VPST`R#uMZV-q&R;0k#0UuD0CS9\6BIJ8YART[?!hZ*2FWnU)-Y1!>:;j#s]b+D2jqd1>Jr@h]C9IQ4CJX/[?;:UYSPbE+p
%.?2&cgYXXXaBDM-3N=PAfOg"RMdX=.;c7GP'7$csf$r("W%=EebD3%n5`(/."#@Zil^#O&XkZ$1NIa.k\[R^hZ.)4a4<9t]WMau@
%M,_Mu<(;kh.kqN7Rg?cY7#1T>`S1gniq=\C47?3FlbGn55%VO(T,-+HjsfAG??B9gj4lN&U2Z*YqQ!X'Fh;-#m=lL"<cL2Qb"nE3
%UUui6p_JV:6@.&QKB]aClt*?+rg';ZTX*aoU/O*IYK+t5WW#]MV<Yg9QYKmB8U]j3n;gX/EHH(28fCIp2#%ecmO7*Ks#Z.7(_L!7
%-?qpEZX[u&'32<'Q"+Q0]]3V>GmtFmiKu6A10>s)COPemlYqUlG1U]FP-F$0Tkp6"J>hmV]*o%rI<!S;A;hi:l"na1NPNOG.H'J.
%80tHa=Z6IbB@Rp:r32fq^:BptU98YKc%P"QKII]"*]&;WO>5W)!cAidg9&5KAV$2'm.?6mZD*+#P7+bc#Ms![Z-&_)73WKoQ2@[L
%j-`N<K@Y,`<KVLrVu%7X)>us)lfOR>#>0GlHjsULqY9]s@>_<N"*7iE0mj)t-\!%Ig'a.$8Nsl/1t1d\X3jRn;tT,A$8q2bN8g7I
%BYk31!_nY:,(cu0[[:*pT5!E:&&57+*am5[GO<pH)2.4r*2S\**_j\+m]/HV.$]o8;H&E)TaY7F-ZH'V`3=rCqi50:l;t=[=6rhC
%qOk!3>)FA]c#ms+in0*)G>8+3$[49mV1mMch,fPhE;Dd?E1)(Pp_kuAlL!'tL+*nc83)12&3st<Z)n(9j)O%1n8l4n`uP66.=p3j
%4p#nghqn6i[IF,n[//M8$WY.&0M.@#ml&n]fjG_t*"!lPK5^bVb,:Zh4r7Q&E9(r?R@`<-\%27:8okVCp=r#`EYPE3#qL4W^4RGl
%8lOmqO\%r#>b6&^h$&ffQH9l"p;[Q)]Ueh7K;G;Bk:T'IpW!%(4_3)2X%qJ,XKM.CS'2E_5Y+H.A/+@_N`$2>b=$mr;[Q,Hi[rWQ
%VZH(WQ'.(#k*WXH>9Ijo+ID8I&60VkO126UQePXjkP7r3R8,B)[t%)Kl2U:bUj#UTi+$$=]huZ/*^)n7;<rHDk$ugnhr!J.nDg:+
%PIT3'_oII=8`0#]J+>0+/-0,b$:uWl;33(/#\Zh3Q!::BR5U%I"i(n0:<pFiQ5PR$b>7[cWD8%V+YPP/NB%lA@%$f#,=3*a8__$A
%U75o6Tmbflp1'!/+IR(gXF.Xk%QfQ4L_<\aBQNln4=>8Zcu&<S2I9I=@N=rtA]su"c4qG#[IF.:fiaGfX@#hkRp9;0e^6[Fi:4Mo
%.4Ai+T''$f%o;H](1d=-r:IR/3nn/'bC/?ikb/C*@f7-UdXEe*a2'5U1f2dV0e]"rqlXe07XhR'?I\k@YTp3<AMSi.\Zf7?J>.=<
%Hgu7)54ojISqt`TF<B[(&Z?!@D.O*f?KNpk[`*ej0n_osRu^<4GY6l6:FjigSb2lh1RM+%32iM7UGQFDD3RP_jW$!2cZ9.133*1H
%_,0p_!,-UhD[PK(O-]5ZFnG:HeXq8ZlTk6a<mW*%0nRcEE9uV_`>g%AB2C^tnamG12KCpIRO^Np]Y;[">_:4X@\)q<!i97`;dLR;
%Bp=,4jWb:`KasmUKlZcp,6,,Np_AC!FgT,UZ<Z4&q5DWej%0LraEO687&PRnKZbklG-&7@JqK1)(6`<Z-RDZ)4uniXVgfX`SJ@0N
%7<0PuBBstF31&*OYU/RZ"g+a:kMSgV\<c>l/7a7.G/nN8=6H`jA>M;./g#]#s71r8^n+oGmnZ.Z>03*m]mdNf%e%!`%Xp_Hq4hsj
%c'A4Bf0NrGHljq<*!=c*Q.!'")JfPmmgsrkTd2:),[nA$I+^6/^-q9WQZqQ*%]\<qZ1M47H@)1SfJ,IA'J-f6ri:e9q@&MmNhT7s
%NfLtVo6,jP6[=%KU0g$GF@C=:0PM4pj7B<4+O17ZOG)RUf;deN:9\0R$Au5ufTEgd;!+("koZTROnDm0*KnJTek5=-r#$&4E7:J;
%/G1pg"L3Mn/9.eh'l+@*<YJ^.<[A(WV$DGfLMNfdROl,8ap7?3+Or[NiaolL1smCbbBoo"Y[G3B9:GsaiY""mN+U?5`.^W,+JC.r
%OR%p\hWWkXXfccJo*"Qk7']73`X6bX#ck<RGrm&,0%p>5U2V_ro+G][KUc9:i/KW@a&@W[i5V,TAA+A#-$hg*V!QT4?G,^XNi.d;
%[3)oPUoBj6oWcu;U4AGbn=&)5Rs'J4`"sV>V'&U"),L?VAs_.m-IQ=?W9r']KGIcp>`^\W,E9iM'm&N!YCsE[\6l>KN<D8gXt&,D
%*313iH/H'^&NVWQhP\07kpXEQ26`##cuCPO]Ft4s*8\A6<n6*5GUl5.D?`h@N!-b1C\*:gC(KBiBjeD1AWgIjR''N?hA/^=e.2Z0
%-QoinI*1r1^TP2d*`=3*Y_24+<`,Q=0]$8m@$kIr@iLdq.eDpnn2Hu!jW<K?=81^$s"q8nX$k:SYEu'!+Lr$B3n7%>gXU[a^6<Qf
%A-o1^a+3i0^tSC1`Oli4.oI301\dQt@Q?u+J;7]HJd(SNUZ7;UO(Y-e,+p!'0TX<:6<C,F/[c>RkI&V'ZKc-gTtXe.kYCf$(LY'\
%[tG8Hk*Z=3gP+@<(/TVd#88Tu4(e+NkU$`!],mMo>eKt3eimdC+^r,&d$@#$X:@P*"V>RcWo"Kd)?]S@dH6hudA-Tm:/*%\G`?eT
%(ptg>I:l)AC<rQL!UH[0okALnC;<O]2)NA'.l[Mf7EV[>$B-@]^.me"G*"Bu5`62s+TSu"ULP3W:oM1<`h3.8=06tg?FBb_mo@Q<
%aK/)$QJ?k5Ha35BhPp*J[tik60@;N*jW_*N$1_aS"k]T"UKSSq@[X6u'3<>],5%^ppdagV7kpj4&K$g#U<k:b3[U*30]d^VF[q^p
%:mbCZHTKNqj2,T0]5t]2"n9%RECM58)uf(s#<c1u_@mOg<k^%QU1"Cs2sO-$0"q.1Qd_dGN^.?rVEc3rgToh55"9LJaN)j[Xt;V9
%\o=RBKN.IL),TA7abrW/;pSP9/K2gnjt1<T1#-R1.Xp2S+ucZX@73Q9LWa,VJOQWTD8SW`#(L:KP?#@U]'tt3-%Mbt8HTC<Ug@+2
%<'o"5f5&YVK:-KpPN\N2kLub`53:\i)EMeBkFmE'1Gn+6[,*%YZ.GCX[*6>G4e3u\IY"\Q\OeYr&<.B8SDtIN*21E:>`M_8BPY[.
%G?#/PM6Nh\l'=<]/);fl4ndH%BRl"l#ZlqF=SMZ28<;PDnU(l/?3DaG@$(E5_%F<*i[n=`l6@t@?ZX-m'u+h*$)pFATj5ki6d@a0
%ZY@>_Vj-!Z?F@`.UOu8f9-7K\_@C*h;e,,leO2/\f82Z:DH*RH^KBuT0,]>ddD+=:l#8GQj%\M%r,1ibp5n*h\r'(i".rPkUhW]N
%VZfOd9LOG1adttd6_UQD_TjN08n4C!Zd-plkUUVknGSL^IFAW\jGm!u'/=?N%>mo@.2!F2ima#]f&he!oQ66;*4M;?k)m#Y>5+%6
%S68_8+VpMg9AD%NWce)-3mSB4MXIY,/Og7rGkT$S`bd[Q\L"8%U68TqabZ;drkO60NLeJYL"k*HGek".9Au@/D\"UH$q9r'AbJZW
%9*:H<d1VV'-[+`[4XX9T2!+3llO&nP[:*s8$`Yud)Qek>`nkBK7ne'F."e*I?5#8g63IZrELqP'oHi2_p9n$HPdq=oU4,iLktfS.
%I[eb;6Qn[lm%DWP+0aapUQqk#Jo8?J%YU?RLh"lG=@5kKSUApR]=%5%EqM8POhrGpY*9WSK0a9-h7&GDFm3O?U>0J,^lF(:\Jo4'
%?NB.e?)C5eC=7Yed4MAhDVt[!*TH<<cbO'j8/SCCO0'f01&Y=XdD%)6#MZ,!"r3gI9KBYKCSnNrcB2VU,UPk+b>i+ZUDW$dSd\QP
%odp!HS!%8$V\gY)/Ic0XPO6M1atd-.9<+uKe#Jsd,(7q)lZ.20ZKPuHA(pmWg37be?mip*gpJXsUIj0Ks!]W%A_L1/+mVA\fmGfE
%e([S#5KRrKg!-l8"fks3I2P3WTI)(r>(QPfq*<Ba4&q.!g_O:idS?r`jqI`sif7-p>>1UEGsmY1IZ8YEms)?NNFDNXpJik5"?R>Y
%QYS9_]VZp7&Tnco8Ok6CX%Om&m"[6!1Hn8?V<3%ns7XF0c>WKnoK\;r4f#T'j:j-:\0rds9qA99/O[$=So4"0.?N]-7bgL:1VdaL
%S!(B2c^Ld-eV*Xi3?+YM8fqoAl$i892,gLp^i%;k*#nfI+LQ?`/6F"'qqPBdGZbdnMqt*h;aS004*dF?_(3d%k4rk;[fQP+C`&O3
%3XN>J72A\_)%gosYS2L@MkkqG2*uM-1>@@/W$g,R@K*7h5rFe=>4qVmGCOm!I;LuU9%?SmBY`;HhY^+he"f[jjroOS!I*%_aPh&]
%N%\,$-hd]&JVD`UW#f9q9+.<AMaM9Pr2^6[;@nm@Z,?5PZ'uGliYBIWf4AA\Mt>e#/JsPn4;G)+a#_-LT1fs.'pmp]`Bo#ueXq2T
%RXi$MHH(7[:SR]>C?-GZKcHG5YsN`0W_o:0>fKjM+4!$UD5&8ciuCQ$GN]UUJ_h"h&7G&Ek[[@0bK2D-GdI#J9^(b\X*^h.!1]Ra
%;i$;h2B,2jF01O$gGOX\kaT&_(C%CCQu&;SNM&/T!dX=I?TXjg&B\(am=WcoL)*nqR.f?m_J;4^*q]]UMUOi%42pXW[`-0&HBTCV
%PuC9%P7G$U/8geHc)s\[Ja)B)G%a[,A.K<0E[C3@SVoo#5k&VNn0,r9V*0?#//s%q4DXJ@MQXn3>#W^klUF21RAVJ5d\2FI_#jcd
%>b5B>MjH)]*k.s$d!B7LD)_6*o!h#!!7/<s0Vp<5*rUAE[bK%kqdG;qH@76iV5[6K+cR^Z,>CI,Vfj%RgB+m"?ZUb%^?RbaVNDHe
%.7X]T4(CgsJBL:XOI27p`)JEWZ^#pfSofCh[BUrVj[AB2XQuTS;A,)SLX[OV8u"tJ=5jbYip3*Be.*X9SCaBP6sB\8db7+*S9._4
%2Q8G9Vp58cE]l4a[/q-?irEPWQANamK'a:liP'&#lBD!H8lWk)18pl23YhZ3bpJV/o>g[;(\O-052B=e5KiA5=F="P!tjFOSmO%(
%l:/*J\>#)aadhchXgiBEYLjm:Zgn8C=]Dg(CS?,<F-(E&Dl.kR!\7K@$<cd)5bq522=5j;i3+2aVhb.el\i5sHIkA%PTMf:Qb19'
%\bY8*IPoIOA3JE[T5=D'*p?&bq^_ZfL\Sa&r/$("=9$bX?InR"Z;eamIX.ndR?HEL0"a2s"0iE?mrJ.?CAlR+6snRC"/UcMDnVSs
%pPGpW+Si!\0+qB/+i(4YmBj-)5rR8=,G^<F[Usq>2*l9`/HoRb8r;tTK63ok`#X#]Uq*U[-X7/f8QS;7B66I<G,``J\H@oPG/U0g
%jNVKr$VD'u,0Zq7k<j>7p\rFP*&h?$B'G9TcRefseQ"_[*p!@i94unDGVKm_gq=TqSRO6aW1qoATe$I'L=o#`<:+C-,`0rAOfh!2
%C7V<9Z?o6*WX$1+,t>W&lm%C6@_ouX+l9$D(O:dBcu>d5pT[i/aD&JB$<#$%HKCC%VN@/Liqkg$f0N&3%q4TALg>-adX@OpD[+.e
%($BWid6^=)aBm/D(R*t2P^5@a?;4<ljn<C<^Rk&CCZEA8HF_I1/BLs$pJ2QLmlS,[Pb,Q#jC+uCW@Va"4O'c'Z?tktD(9ue,6+(o
%YI$_md:$VY^_\iT8HcOPZn-4f3,5<hqU@m0kiAOr[R/m_aRP9GQ"V0`>K/if'm7&:RB;9%eN(O]6Uf+GL<BK49LR$7gX9;Rnn$9J
%KW'@-G;;1hL;`AS^kBhSBVb2ag@P,GrCrR.9l>G^Y3fiWK:iG4QEHt=-Re)\Frp`sG(n;M(qb;qAPl^VnP_;u1cDNV3&\@+*t6#,
%H$'gBFYj@teI_krV(2Ys8Jk)d#mGc_Dn/S4bcCu;&aNUVoOFp-EchLl&lV*Irl+3C38iJ7*MCJk<&'*)*mX)-3)FloJ`YE!gr[jM
%*6cfP4W&QKD&W&/'+@:O.ILi#QjE?tF5.^=^:bTIL>`+>"kW/V]nD64.&#rR->1Tan^#QO-1Vl>8R6.3J>q<%H0hH2iXbk\9k+;5
%Lkc]@i+'?`Ul#_7d:?S/Xmt<AoH7jWE%5-l@uj\V&YF-`@F-UoXjVIJO]8LYUXVR+C'!e)\_L3>hTr-$$D#ZO,'?6Q_gr8l6r7Y*
%WjbMKk8BLY[m"5tk0oPkBcds\04+BWE"Y].V/TQFIco+[<?>-Qkgjsq)pP&lOOp]Vg[6T]X(AZ-6b8#4astL&(*e#BL8iQ?<A]hM
%)F-s0_`%\bGJooo:P260dM,O,p'f,81N_5AFQjG9^>r*iYOkMC)_gOtMmm/-`=K0Lm1t/lXTg^:n`@`l#%HXEDSk9Qej;8_O`GRT
%l+acH%A^;a/JHl4PFN>lL+(;h=Yq#(-h9clQ7ZMg.IS+.HB^$A'^IMh]pL(']HcYZPJopS6S:ULRj6<qNXb_dcbAmhG-n#WfBchV
%DTi?a"\0t]#'sAGpgP[RdQGF!+!iTOa^GORTFsT#l$ei?<sdp[Gq=S'WdCQ4>fC&LW_W!";7rQprY0R,!DQ;D!s'R)'^Bf>/Y7oH
%C=9?`?n+!+(Ng(50GP^O\Xsci`a,sS+(+_G0K/phr_HMi=us$PiJ&@(qN>)#-4<s^L5YF1;i.O2E0inkJGI^eY.9!rV^hUh#Dp$^
%8f$3(L,YB3L>`H[2@rl[&dlu"*IDa5)O%,BlT59UCUNW;WO+(?,>"C&dqe$>5U>afkBB(9lNib[[C9\(Wa(`T3_Na$]/Jh?AN980
%ahS3.^N8`jgDuns9MSd?&O(Sp529Fqr]@Y[A^^tI_H_.Q?Drs3`PY>7ZpOFZD]g98&#g^!T2(9TUFM^'j*,DaC-J[+B8mV5<!cmD
%mdW3((Q4l)6;A'\G&\or3`N\2:"l:RB34&TP>8_20A6I^W:o=/6FPIG\H0s/C7H?EET'<q/!V(nF"L,7n/HDtl5ZQmHqrD$N(</U
%SWgK&,SRdZO(=\)Z8!)8#&,/HlLi-NSg+GJfG,nn:!:ar:Kc'lJ;.^"9!E1IEm@6c5pS(D@s/cOCNlj9j?fbI83K//g`\.i,)5K[
%>"Z*:^P0+e6<72DCMX&HkrtNV!&h69S4=AY\(FX/X#9OuMo^n]+BF:c`YTf&(N4YDf'.!Hlo$22<T9ke]'`i\-5MAsN<+^Dg(\pA
%26V$:)d0:%NL)S]H,7I;0*",><3KrUmWkTDbT6p)[H[%GQ(SZED)Ua@N6:;E+9B(6:T$_U*f'32*@UUJLr%,c.u+Q')P[62n?O,t
%_\Ar'LYe6scHb@gTj0CKDP'CY`][$575aM8Ta2e@2@@!?N$IA+h:uSc2F;%lp)QfUN\H7JiScR$j7EK/Gdg*EeE49:U"$0%dco7e
%U.qNK$n6dn/Na7?==d9D.sDcNo@oiO!Em>U/O\l-S?gf[K_D(X90njpl@Z+FN4l^<bmh-@7fsQiI:nPQ0-;h&1bd'kTIi[,7okj#
%g<Mf1>=ejKc',dc#ro7mTK3Pe6)V.K[(=uJk!N9he"$MtRrWS2j`:J:0#EOuI;h*/WN1RGXCm/AOLgro"\;qnc;IkIVQ*WX&OpQ_
%D5b]uRn1SaisPNs0'IJ-YR2*!]OhmTOi^sM=NY&kmKKUgQHk0uA)d$%h_sT-U/mGt>fYMg\V=,?H:;%]"!b<:i:*@G2V*PUm*dr!
%,4P0Zef:/8+PuJMBM8"T(F!dWWN7#qG_YWG596X=[KHk'1bO5,*;r^nVcpaZU@dj6$(&KoS[=c[@n><'+9R9PMMj">@R<6M*oEMo
%dN37@Rnd<:Ti(Wf!nJ0kqs@HgidFl+JcK,#&*.%<LDN%BKl[P?/;:ftZkWb.8Wkn2-9$Pd1=OW(+obsN&;@jF&)>10(E-$6A,n].
%@$=tUrTpH<EcO8O?s@KQJYrN&%%/1B.sbolS$Uri<mr;C4r/-!\JW;?/!.(7^^kA\di;@RFKYA$gFlW*EfJ4n'NT4!R=sK$>NhWW
%2)k<;>5$@'_2#o`HH9oe#96r@LDZB>H?Q&pAJo#6X-e2`Zt0l=kk_:>GkBGdX9U-GDZ#=!N;a`j[VVn9WNClf6Y8`WI'U[P!h*G\
%^Nb4TT+7\7IKRjU^BB'@MbsPhW>kn+&JLAr*G\8^Rm?eVq%u++j7d`LOs/\,7"k$sET*.Tr=\G'q9PI>67()$%`IlG:cFg\.YQ6o
%DimK)ZlKFOoAb#gR4JUD^%]s4D@9)MWF7BEINhE<Qosd!258FcqstE=`P)2Srl^Ms=U$b^0&e7"I`oJKD74-Y5m+MgRfrFQ6+*mb
%R3`[V)@,'T@"3\sXpd6'\!l]Jk(Mb'H42Qc=t8\D^l;9D$Tj5F)'Ms'j$*N+[pmW^-5EY#HBRG<aQLlDdH:WF6<+"^Ra;<;ZnF)=
%a4gY#UrOg39j\/g742irJ:Q0-=B`/V4__7T8`87dW313U(mVl7FIuG-i+kOU$`cMFS0_K2c#L<Z**^S:B-MsuInk#Z@[@FF8K%P(
%^)Y(Olouk[\)7"#BJt/&YPCQCO?`\[D@F?oUX:"S>fnOqTLj(8k84(W)"4YXMr2=niBoF+#VCfQmOL"*dtpaO)f)XNQGQ-8<ei/j
%g[N#@C:1XUN7-`fiG,S!ZE2%p:,eEg4VZlpF)m:S"sIg=jW5n0mK![t_&gXO#`$m"?pHfQ'$<`1&tif'cMHjgg/'h^d\M9kZ"kld
%$H^n0\IAJVAun4=)&dF7IC_"$-&B7am?POm-+<fJWjeo+HMf&lV\s()g9fXL5a#?]Zi;0TH-h"uR01$&m6@Pt2UHHi+2V6clU+Vg
%FWOS+Ah;(n4W*]0YG_GFEGH?M%`'ljV!9hCa)\ln:_2h],@,EAc0>4+&!j^M5J3!>&A<MiSJ.ZDh!S:I?[Y&e0n)6qrm(,iH$sMn
%]ebtU.:@M[58i!(W3J%cg?t%uX!f!?h'%">@CcBq9#cR4(b$8Zf6%%l#><j7kJ*!Q)gT-o:DHh7$1I:DhNmJ_pOh;AO,#rLlM2J!
%m[9<DFqJ96,-H;I&r"c;RIn5'_>9I6Co$Xl`,5ZQ69]V\#GX+,>CQ?G&!j^MK6A2*\)=E<r2J2J(N\L'(uDqBa)`9ea2=N6p&'j=
%;:@j[YBf[*[3Nk*]gE[DKTIWmVr:XV.KNpmEq3+]DsQaA9@Cn5#[P%T9/J)s5Wj.ZRp(1[kq6+>F;kdPM*H`iapnD[;B.QFeEEr7
%6q#L<XCb>t-f3\4LJ;6!q>jYtQRo,pMq%@Yqu-FTJEqF`@Ja-P"82E=VTT5KYRK*]%RU(XV#`,&XfY_-5nr$n4s!7sOX*7T(#tA`
%%h8rW(aac:=b=[dDTJo!(T3*u!)lAC8Zeb<WIPiTQXK\af)XkD8k/rA7`V,O\ldff3G14n,^Pn"[fQ]uklnhHr3e$jIjcVTXJ9.E
%>VL\.d_m'>+e<]^P=(`>lD`6fA1os]cbZ4fT4A\tR4>c$S4Knb8T-:e@i-O13Q;TP8fU+5G7n2]VBD1OdBF=!LuYFoOId\O;\;9K
%>:Kg?asc7IR?\o^q>J$Nr4WU$9OOTn[As!D(!UMU/t0qU8!Fm)"q,*6_EgL@7?J_uXsAh<l$'9_).GA/&a5;@oU\/^fmBR8KY(K_
%6D(BrpkOAUl;U9S/o<$^3^0NmP7;R9j-\V`FuNT$<&"XA]ACC[7$9JYkJO%XQXf(G13'lsBF*QbDRZQfTDduM3`7IX:51^%/-Zku
%(9ss7mbSX@Wjf'W)Ob_6fBkY#,'F*I"?TW4("4CZf6LTuN`));FI??L\6Fk6QgBLNQ?I&p?1++&(">Ch?.U:#qs:I>UtDSrir3B]
%Uqu1f\oGt^;.)&8dZLTf;>5O22XeC4haW/jn9DnSL8L+bQTPaQB`k;9`;"RUTX$!IMuPrXEgfonJ9E'X@_GO4+t]rO&0Db'2BOL=
%4r2]0mPYCWTi\/%_:RY1gtopbe``qb>V"1U/>T:61A,ta4M@**VSXo"MX&H9++>^ZKq8tn%CIg!B`4lWqDd;a0Y]2g_]]c]O3<(J
%k@4N4<[;*/D&K#W5jJqPqcSa;g,'?e'oSE"C@J[uHfFEae8*d9#Bitj:fQ`=*&l$"=P)lmp[E#_J;=4pRgk<Ap3[&f8#m>pUQJA&
%JLE%W[p%QdO".eEq8*Oi4mDEtB2N$Bi+^>Y(:r^6rSA/Xr@XukU",iR]->g&+:[X5AKASc0DgDXPl5>n2PJI`DW;k!:!Fs\>Z(`g
%<$-7arEsp&Gp[B]LWc&ZAb]Auns%Z(V8dmHLkb4FIp.u'4QUrTFf7Rk'`-&E8">>W]$Y(rINL!H=/jbO+&!@:M3>(akns>MXiad-
%`Y*\,AQeY#KS+!*!DBd?.@NM?J!^Ii9kY<?4pR)X,mB-Il4\c9C?>lNEhkZ+lRpePs398Ya[f5X/^!8dcbO<`RINXcKmaqJmt%=-
%9[X!b=X:RV]jmid=E)<07TAY!"]m4p.[]:USgVe[6[8B1kqf`OWckl$U74E#Q9*lt]$;+4.8WFXH>QgL'cI=[&OTb#_(sMH@WnT>
%e1`VpN#^QZCUJ[^Ai;SbEH6huIp4qg2&<S=gm$o=c0>fgfKnZPkpsJFSJD^XbU5tL.<3B5cD!VYQW/S5>,KX7qbu[UoAh`Yqc2f,
%9;p-"K_Xbkh!f'&%^/;@9dPZl=E#:#;gG+?bd&;a$n!e_g7Ui$RO%VU$p#C2`o=R4(6\"ECsj2`A^%J-\39n<io9R%Zo!lJXD^$A
%brEQHafMpf#BX.:1fo6sRsbMUNF'9`f+-r6*WCi?D<@7jgDY]6WCuiPTXUNKLaY#Wgf\V;#S%9b+`(6t(AF\0O-^lTC[6g.ju.be
%?G[#@<\V[r;9S@Hf:eLr709Tr"]ek^mQ-m]4/R3dDim/u_hCW9f@Uq&oAruQ4^;B\G'bueehn\W7-=d*=R.K_&UBKiSQsIk?^aV:
%ZITUD:[PK!l@(O<U@m2F55iCA>q'YA5YQ"/f+_YN&r>cL_FZ"mp\;\emPX\4B&+']j84&0%!rtm0ZEd+HfTqi1JtmS9,`Q'KBVpt
%c(Q]>'u)'FVtgeNCrM`7._tUpeZ-L$XmpCfB:ORGA/?I]-#d8J:;QIKGh/n]rO.cFElrKsN3uHZRT\S&CT28'YlO=t:C>RVa0r'=
%rlmZ5hAb]YS?m^Vm5<qXBre'Gih(BQ2LkIUe63B\ErZ9lVGD!7Qj)0LYt.[c2T5pDh)Y?/6:sbZM#`u(7.B?Z$.F5W\<H/4,[)?7
%(QM"oRdRkI_kp;F&.?kf5d4Hm!OGe_+Tc^-d$\OWT6PQp(O]W[?ZfBNN`3ueC,MnfBt=LR0c'9q1EAK9VF`btFJNVd(GFPeBsQN3
%9Sc5%-\D.FWHI[K)`S@TCmR=*kCdTJnHgbn6XD*j6"#$TFC4j/V*>0#GOH4(-AN[HF^8F5g+W#ALf1>hn_UZAG`X"Sp7J\!s*bib
%lr30fC7H;+r3caGLD?"96ChetGn9<0R(AEKZ8VMq=HUC^a]m_c*gnUV`o$6]Xo#$U1]+a)5P5rF?^j&Lj#gOMpMK6+:Y\(Fa)-[!
%`Li?jboIV.@J;'@O?&(Rd8WLQiH07-X;PdWjL?^=6i@DQ[O%/eA>M9m;biMB11eTd16!!_/WniJ-Iti;IChrU&@-[>^hfiomrhq:
%6"`X*9lI'ngsDF68:)5p`#$L4d^R)H?uh4U:lW'oNKnl)1XhU(b5Sh]k69$WqmKD*Mu8@a/Fa@rq1EQO$7CS\0Xi?'#74g%?DfJ<
%nhMDAY\G__LIi3:GFo@DrFFE#Q9iXPcYL?sG6QA`i]JUQS'gPAs*Tii7KpSfV+S<a4=b=3*Bk+nF2V>%Qqh+d`+@Q3?[hfJ<LT^2
%K%qCZmgTK]l0=l1Y$LM(8H2(5Alam1?J*AT+$m=daGZoWm89eD>p)7/&q^C?Ab>h4MHQGiVg_l!iMmm8g#T'uB^`rVBm5Iu9`TLZ
%Ubas:!D$`iK>J+uMt39mWWdd.m;StjZ(!p,$;ULER-*mTG8oY[Usfae3fV/fJWi[]<XTF=&>i`t$R^d;,@c:Ik\H,djU7KBf/qYG
%('X3LZsrpigGD#]5gqec1i))J9"qdDZf1ke1Od_C8>L1.!qXG9RLU`QT-0o!o0tl*.r[uuNg$8;kL8!)PqP34D21pnEF@Zs,uh8X
%W6R$4ap<O-q-ftlKF3Vj6Wf\&6AFH`ID\YK>#eVOA!.*k6%;;0.]Q770lBlHA(2sWe!&_1fDFg[#@cY4Ck',KI-5b*=-gjol8)DP
%SOUd8e]r)c9n;sOIHXj!'F0SU@"5I]N8VAFR5/F,]ActnqU_p1mMbG`XQ$0/;IgmRmnm8O*2`#^4`l:p2'BT\.'gp(@@X%uL6Q]M
%6QfQoeYI2]NIh'@,kdg9mqYE(!b'Y)5^O7X+*b1u8t''?F=m,QeW6M2rtddYV2^sa2VR:S?lC*B^&?#`c-VVO].ZK!8b-T)f`27/
%T5M]!q%9Dbh^"l:n?(%c<R+A@!P#T*U`1aPBcH)E/]_EAYhjl['^OIoIXJo&NugA$*L_G"oRKuSN4OqDVQ]NbNI"HZ*blP."m@.=
%c.'Al3[NWj!bkf;fgdHc%V:5SWgdZg7D]tXS+I@8GBQ8p@ctn4BaG!i;ZO5&#C=oQJ-[c(HiA-:?`-P1Pi=]B'e,drWd9*af"LQM
%06cFOrP!IQ^<CGbRXElMP.N4O0R$fPg7lMlmj#)%bs.FcH"V"IT,#?4C%$_<Q9m/0F'm\AfT*gb!Jld=V5>`O`DDZ'*c4:@(tBCj
%1lc02(d7';Ad/`uK9VDOiO%5fbdJd[IRDmR$pn,J#;UTrEakj*M9@=l#)7ikl]C?)NWhASDW$HZqi1."ZR;)>-c>T[f=tuKn')oY
%ea/P^ZjL<-#N@J57Sc.kFm@h9Kt"rtMtPmq3UnX%YA4H.'X>MU)S!)PW9s7"lG"mZQJgP23Wdneom1!LrbrOI+\S81&Rk39PT2Y&
%,KX?F8(:D$iXU2&USAeKh0@NL_dqS!D.3Q&OBmD?YYHWUadFhVT(#$`ME7KL6CdJ#p]om""h1^-KkA?V.CI)'\$GHr5?^p+AW`F*
%#.!HGll)4#n3M1KMYV3'\1sRZbuWNm3agMRQWtUaa%eAVlI2\`AV.66L7Eu8Dh(VE;p9AT\t5UDb2Ys9&&oKOo&e9BhL6IU"=RDE
%mULOo=lPI%+.&s3INF&Ej&!;g"am4P'O-:D&V!$_24J@(ZMb18cL+YuMrL]OH:2KamjUjrPA@2VM'p&6kKdp*?L"<'CgY/D)b)&H
%=9@*p@7tTDG_=_b<lsq[oD=eLI3sqi*nH&A/n:C)2DPfq#.(t#mT=nSGG^("oIPiF+,G0F)K!kQY.r>Ql_Lg#@O`A@VO'7XIL*Z1
%o`o!]60AmuSLjtdhJV;lPu8.fmlLH7NK]DI"CjSJ"FlCWAPCZoT^MJn4`hMg6IT*Y^7jVr[=Y9>;-;O7^/e1u<2k'D.`?aS%%k.U
%1[7bN%WP_0NHk!oL5j9K#4elg;1Rn>2i^6K$@ARm9)ub\@0$0LlE_I?aj(OiC>U](mY.Ss%Ht-Ha0sK/+V_?F4-D\1]OAV#NWqF(
%M7-kk7R\Rd3.(b.j)RtYdQB_u?B:8IcB*)ZTLs^sjhB=4;6IQCp=1&<TuIq5"e_RJr!u.$A4YDSMl?ZaXRd<-5C[J-=c;t;cb(\X
%l,+4U94[OEInZ&(D*U@d]3hG6)e4hX5$p)kMLnA0qDPF4*$@X,W<6A)ZN10KFd#"*$uZOM&lW5YcSGD>"tusIAiUji>AD\$/C?<=
%N2LiYU/#b):&Qp`AP8tg*f&2O'7/cjUEM2]CR)jnd^,0`4?^^=c21TU7d(o:]C<%MHA7.drm=Pm/^b&F0Sl.t?1oE*@l(PsYBVXK
%*?f&d(UFp9+mft2UIepMg"=UEi=tQdI!1"i%;1:FD;TDHR:)e\?j58hCa4.:/SFcCq;PX0qE1WUcZ@b7'4K*XLT.n>Mcm0bV?kP/
%\>D]I?M)#qQQ[/N6P")1#!7!qM-W`/rP??$Z3]4F<BXM=H=or9?H!B([PhA6,6)RgKO'=QC01Bb2PZ8pW"qqa!/@C55RIiqj6>)S
%),!l@KHK1c4E($Z7asU!i.65':=-5JBi^#oI#U0"[+aRK8*YZgQM\GSKk6Q:L(.4'AEg+o?M7G?155K2e7gS]Qqf%f_PT5LBH[#U
%'Xo:s;$2h@n,Ki6],g(gKQ'3lINmb$ebrkf)VIm3K98LkFahEfb[K1TX9P-`/&#;ajgP,LC31*IEQ8)c5r>b.O[HTDCX5h9@sJmU
%\>U(fa(9qf=qWYG-RhUTBCF0'UkUBNJtVc:=!uc;?t=]*4(codlA.S6!'<7S`c.q&TY;cG>nW^Rg`^*$dZ4uX`^5;mFhqtDk"^D#
%D49sAC<0A9!gmL2V`Lqj%p''F3/u574G.sN6<M/2Y>Tf$1AEPEX.JAH1oK3\phj&X4tH'Q8CUFLBD@U8A3FP6qS"#bU0PkA)F>u$
%&j3%,UD$?<93jK.^%QQ,TRK:W<-BT;bH2jmDqlEc9P\>NXp=!=\tr4b-VMY0PGOO0^T6DConlD(`dD)Iq_Ff:)<_%R,O"T*0*:@-
%3JdV/4l_9d1LfHZ2o;Y!1k=[Zbt'l2^LDCLol+')4m(ud0s^!HlF/9:-lG^d,H<XsP*[B%()t1&Q-rXeYD(FjK,J_3Uqg.OR#uQr
%"<+%`D\KVAqAmgRWqNZ,<*goj,-M-5lp,X3Z8`u:/a7e+N7V$NXs<(UAH@6&fu(T73HMQk+/?EPSE\lAR!>hlCDQDoO2cpGnY.e$
%!b'u#l7'o6CM%`A)(kE*EbkjJVG0RO*@UhX]1A03ZKGRshXuc6*/)!Y;_<<f)1R'7Z3[&D@,$jQRN59MfK'RR,.k6ldi+<4l$ZG>
%%:C7*'Rn%]M[UCU-Q"$Vk,hh(@[aI'ABF$qJP?[.]u.HndUUrtT7_b+J`+kO1Tld>Psi&`&3X&=l+Z>5l._&Arm?rh!Yq]TiCO]<
%n'7M8B:Q<_6N]XI/c]LMN#:Xs06fN4DIYu0P^W3lcp6?THarXu*Xu;:4k_NAEP6!4EiV++H0B'mT]'XYXh;2_97@`_ZH^@B7ls@+
%7`$rcZq4BYmO+=WlHqKQ[_-B6-AbZK>Xmg-'(:OfG#:?gOe9tSqZ9+`aZ_Gdf'A_9.dB#b-tAaZP1,;I[M7Z4:qQ<uEm'q-4.h<-
%DdV$PrqX[NM_$Xnb#[h4B)hf^_!>-I0QbRW4;MkLdl"i91@SrMLVXGqF/bYO+)"m>)(.';#fg'^f94FGPFes#$0FgO0N'u7]fNB5
%J"1u/bI8mN>T\7kl1FR]8Y&MeVuLY@n+YBo8`ZikEJoFC`BKd-^eRF!3G-dbHU5&t$7l*D0iio^5W`ju0a.\>3gmFMRTD2)1)#rd
%[IYM7O?H>g.M"o7QeP_C5e!X[ed,ngD,c+5du$$H"p^D$ZXBH!CUOfKTGZ)'dK)47?k\d&@H:`2>e\rpW*#2eXf#X@n23^YbjgI"
%qU5`p7N_ftLpWGe.;B)8Ka@k_5fI?[7%F5?:,gT>dJ&>JIiTNT6iV5anri(t^U.S'o*@;V<pY]N96G9\;$O)lQ<%OY-pfe&q@K"b
%-WVBq+,0iD<CYadJ-EPm2TH3.MKaj=hc+j*YcEMFlo3*`#LDBl]u#JC"O+E+RWb<X)Qjhp-\qF1Jh,ai'i!LKS]'og.3uLqhej'V
%i@K=b*IjFC#B')gJ,(D8q2#OY7$i?sWd`r65P)3gd^UGHg)hU+Es7.XBK(m=S0uDPUUt/*\/Q4#;lDL6I0og4N4<&CI_Q1i>';]`
%cVL!l$go'k`=J&&nCli.e"uO0nAa@U@PJI[`,[q^r"1apkp:l-SLa1D.@]")?BOsA#2;^pgU,;fDK@=0?-V,tIbC61B1;]F#DkrM
%:K:nj+Jj6X4KjV%5LR`I)<e8KlMp0cHK$L*-t=@?"HMC$SL#*%Q7?DPRSm9c>#gqV;9Oe'>!/:B/5LVqW*gk`8$j"</drOl!,?l/
%4d3&1nB7nHAH.EqdB:$>$db]@-_\^hVKp]P8gnP$bCU4i7TB4&d2]N!VagHV"I)]cpsYrj5#+P9n!DRne[meSDRl1@PA-3G/XQ;o
%eJ*P+eN92qoaHIk")LOfdc!n45Zh%`29&\`BL9R`TEdiO463`D29a,K-MW%C6Dd5]PPg\$`T$U&mQ,&;%dPn5;__]+,A?KlQYT0A
%TY.6M[(glP*_;FN%r_<P,PcJ\:\$e8Ct,F/kG'(R9tJ8a,\n0I,#QobeC4NZm\lOOE'GI.;'bg/,j.O"8LU`X"2W.\kcE9($%t\3
%``+*6F8;u^ej\F2Er3l";)ttE:h@X_81:WdEYu_">q0)fjdbI/BZ@)R9!NJ6=3Op6bQ.bILlkl*Q94D>Z#MBn3ZOfr\S6(FG:R1O
%Nc)rs\RA-@;Kj_i<4j$$fWFqCq!Y9Qi-^@XBk,r?Ban\qLq5n7i?-*>DEud[#;0SAij-h_G+8'$pMpaqhN<hd7VoXcL$VDp<T*tR
%*'AepB:r!4a+[g<CeFqRp9$)e8XTbB!.VutC"4\kKU[.jcE4OXjD;m='A[+T%0-H&SS7!h)"<g:n\f`FY&I$elG*\T/kJCI48);2
%=V21Q&n%)p,M0t;GIa&P[RHPM^1+/Z^(MKJ;k=pJCd%<#dL"!YMV'%IF-kO)d4SmbMmj29Bm'`]&hb<^`^,uj/D&1U1gKiN+f=W,
%8'T*h25:e,`s0VC:3S1A$WtrEH`JBgGfsuk]62o:F$q9hqD@/7,]:[aQ.kbeMon0(SfY2s=EBWV&s015T2@bq-/VXBI-YRF#'1.O
%YLf.LS.i"%g<O6"GgP/8EWEc'm,OaVII\*t6>Y;*Wp%h-?gL$BFWtN^#.*o.T^!anC:PW?]aP2a+Ch)tnA7fF-Aoi%%A9,PYa-Sp
%"^UNK>K%51F4ji;ZjU)^_2sK\OU6:f9+bj37coq<B%*J<[O$DB@.CY+-*e6rWE*U!'Bc'rJDO1'`Qq)@]Fq_d.$8&6$8o/iq046_
%S3Wjoa=gP77u;(J,A?N`-e&tCVNeJFm#P6NN#FK%)(dU2/Xc4(>@)uV9]k-:^#jUWX@c-gNS7;mWu#<ooCr%E9Z\EUg(cgO$\R0r
%0m+r6a.\"Z3j1a+Wt5/C._M9)0;d:keGGFI]%&Qhql+G6>'q2X]cB7W-;@9iA57o\//I!+J03!.np8F9WTf-_95sL]n%4K6DqZiB
%6Y&6`^3N,RqjIq`[*EQa8<M_bA4rbr^P.,1Q-WadABGo,LOAOP,PTpIpTspSK[#ZY#loP/[A98F!_HSlFY@iH?+kb;:s<JOr+&TY
%'\0_5FK:!.6aOTFr5kCP>!"B<fZTQTKbO@040JM3h=R!Rr1+HcZ<W%)i&(c538;bW&f*;,W>Y;Ui&X4iK;[XP"lYOnlAZ3ID?o=,
%%>H!L7)E3RGgO&E-Fskg)feS^l<p$W\YNst`NA2'f<_uSTTfpOO_1H$+TX]f3@hBMW0:Op\-@MiD&O0?D8RRu)9VB#f#S+9_L^uu
%&eabjEVQhm4Q4#N<GF9ao=O&N/dMT)&J0<hf8Qu_3)74![mPCh_`Q<H*GT%m-+8GO!ljohZA-=dAGBBeIIP=I[PPE?/E+4pnK9sg
%TN]G;],8SCCQ&`W+o&-18f8l1,pYSu\iB:kMVb8qq-KP.j.)U>7H%XL6i5-S)Z[HJXiTctjduV<2ET+H)`8q0LONG:U'/h$V"a[A
%,(Fq^^Hd-=L+j!UPig@V..[H!Un;Sf^4l^C.ohn:FquAR6nL5k\7)l5%)j9N,h_!3<7?BT!A=tV5s#XoPfFZIC-`.m;asp^iLuHc
%U]O+b3*=G2&Ek1E'tgp6\uURE=;tea@#AJ\;:jQ\fDTu&c_t3egg?.+BV?EL7MfnG$^1b+iaZP//VZ5hgP4s$W[U9&4c3^*kka*D
%j_PJ7I*&qR@5?"/apAD8(apL*V&K4#D?=&6b(nL%Z^H+(p1C\c1bW\p$tANd#qdY%o2I08cjqe3[4"]Tf_aZ>^NMHK6MH"mY5p8W
%Umo,GZHR_^M7f(MO3t?]3#JAS7QHVViin/GnWeVJWoKTTj+1kp#%<<6g#K9tlK1L'I,j,k`>5ApM4nkDbuc8F@dOOiXZCC[j?[W`
%=$68bj]DWp(PgE)f40,N.d.3so;;snU8n;`a=,)jiS!n>q6%IOa9GO]LCL(Z)5^5dAJoOdacoHJHZPZB]1duTaMUeF!J')&^`4.h
%0kVUA_\?$ub_$Xj$e]\n!%#'fS5L+cE4k"9W9@p^;jknWUV'j:"IMgg?3>,1NLCjZi7$Q^-!q#T#E_+8_,>5A^/K^Sj`M+]h3Q!e
%!oo=LkL&l(]:#If%$nqieLHjQfX/7&o:/R7++N\%>&)Rc&E:a*.GhMgJC/N2ePhhn6pg;'Aq/19VrTXph-U3C-t]7"d`tGs':E8G
%Z/eOaTa"PMV_Q&L=Z\52!@t=1eM6^J[`ML3Mf8>q6drn]CVFc+9k\dZChhFgfeTcjQ;9-r[q-qjg>JAAK0]N24DsI=nL2Yi%^pqg
%<]tb@c80C&ot4Mu]mnZbhS74,,ANgV`)aF*5e_Sr"hL$Ij4B^qJ"p@KS!I9g+YV^%U\H6`rqPq\f_L:a<./WlC&OfLVAM-37TsPY
%2sF?UfMM4,K#5ZR:i+9S#:g]tea4_p]uO"B0`G=[4_@ipN.[_GZp%qr*Q4/M$=\BR#?5=iD,XWc88Ze=g!Mbk;\X2WHN3ZJ%Q,nH
%jp_[=.uG(fDsNoc&J@!66h>Ce#0Hoi2*39s2N2aaNpDcFfe>r4!_"kj[rONp0G[j-(\M^,)5D"jU%)+Uhd4Eu50J#UE:PO-Kgg[l
%l0"4U<XGm<=`WH?jdal]nm&d4X*+8_MfU2Z4h[NGS*+u^T1jUqGgRDT#9H#L!7FEBbUJf"X`S[r#n>%kgr2Vf>5^usJeO@_pkW/]
%>mdWsBiHb4XE;JfbFt>T7&7g!kC#lng]p?R*:Dam&^+U8?#O0R"@$-RH%O>bWnUa)H[\>s3SV2n@u@-QHeRpPQteOAOFH$/U'kP&
%I#gYuZMJ%#nm#@q2bKW,]m?qUl:,Zl3>Y>Obosu9oHq]N'P[]fGNC+KFne7NY^6a!Et2>:31Qt,H`p39,S'F9hUII?g3["uo>TI5
%qj"<7DN`O$7P/bFn"O1^D!W^\Tkj8b">L/$]O<-[Ds1T)="tYoK29[A\==Ns?0-c!U&G;NALd2M?&RuNJIt_IM"W;B2:=ZdEZNVp
%N-m(cJs'[sijG3C"WMKO1I.1Gr<_VgWhZkMVL<p41I4i1E6S_RGT+U=c=<HiXhp!)3f92r8MFg)=F`fYkt([1ME1(7e;MN-=Qog+
%MHu)gLd%WmES';!=3,A]$XCR-A8dSsQ]m81#`9s-C7`%(Wd%aD5&$05jOn*m]=lERXen@rGh3c8lONf/=g$Y1A@TIoC8NKO(IO>9
%8Qajq.)@E\7dELmW&"/8"oZLnI9ZY-'#<"=OH_TE!%tJ0f4@NG:Tl@X6d!h#/!3StFDT+J9oa.uQRhnL96#->#*Bm1l4+ajQshSQ
%+5Se[?fX:EcZPs\Fc\VNG=cABS(X4[5,gP/0GPYX$43.P7b+kg;ouo"c_Z<Uq%tQ&=k#(9We,./ZF1o8KVHu"TgM";!MpUUG!OQ7
%g/pYWTD\s(%&9s*ca*LBRRJB*iok8T=aYPIDnk$7'AmE_&e@p8;7d0OVXZ#SO4t^U,V;L1G-M,KKk\OZ$'mb!,(uosm?"53kB,F6
%i2hi:WWh3C!\E^YJ']0LA4\5MRN88_]AjmU[\ZE]/W4.S7=LP!ZX-g-B=HjXH1A&P[)&2N18=ILp"c:gSR#<.Q!]"KJ7P9Lb0P<o
%;_g)J&fp@iPW7IR'!9Ol$XoTAYB49Do^Xp1)Z5sAEWaenW*l,i2_/W.nbaX.%#W$QV$nVBGOI>d4kY>P16rK&!!4?;C]<9'n+bX9
%$W9P1jU$4gk[;^"+Kju`hU2fU<#*1^&Xfe9J^$a981PG@!jNk"5MDFZ-2sJH!o*1sWUq88p6&Y^D<<mLN_+o0V_-N:40diYQgEZ6
%"YcQ[#ncAB,/<b\F:L"F,501j0Bb-CVmUqV76;m3G`m5b_0^^kaF$k!=??WQ!?RY5^LHF[A`:l[2,V<u2i"Ba]RQU&EI"QXKWXB[
%BJ^-m&#R9jo_/ZEZWLR<bHb*%=R^9P%)`bcTp/1*_,N!0.aQXf#%D7VWLdJef3B$k7/\SMWQ"=Wl87$#]t8(BJY"^&M?o:t"iT6N
%_,'@A$j3(PL]5fV-gAbe<5O63;gX]4[[Bn4ND%%.2-T8l<(*.J-d7+>5<PU&?pK6-ocF>-0cfP';$4+`*BlY"&/'iJAXiftD]#_e
%0V0>n``<Muj4H<KAkCQCm4)l/LdB`(=iq(1^D8aX`F^Q)P[tR$Pk1IdZfl<>M`;N'O&GA?&]L$1%'dniOT9MA!D*S[!)a'a\POBM
%-3TGP'ei"t2%U&(bX-O'BF3:^?STjhI:V@f$-D%b.^i3AoMTUB*I80k@dGSIrfguL+dZkINd?]?-X79h_kK?%+Ud!LK?B#`JR(96
%Gbd$ZDjQ]',L\)s"-6+\*5$u]p.diCXLq@T()h3e1m^lt'&$Qmd*ql?HV+cq76@m&bn[F;-PI)kgl9g`L6]+/UjrZ*Zm'U@&)ra5
%b0k=9%AuN(./"Kt@<:BF+Z@j=BK!H(%'=M:Y.@9?XE]-aG,YOYbM'lb+E`9=8R?a/!T_V_6aUu]N>6kU:D%J"=-!_*,gerHcA=WG
%%Cf319.MNWOf,OrA]Rp\`E%,mUTNXb(+kbqoMQR,;(TOImI9DLgJo.bEC9XUBZ`;E%^:8C!Pji*`pS"cD_33.M%P!r^95k.nMu'@
%DJ0Zam!h<K>19AL$!9'8hCW3MJfKVepB4+,CqNBaDs<DUG&0lBs.b=qXbK3hcYVJ[[>1dP!p"dP1PN?C%-:rn(,O6;7kM];.\t2V
%!"6hZ,\FAEDO2Yli#j#A*c2%U72C0X!Pl!kn22!p>m-mp(U*_bC()5tCFtfYmK<8rT[a,)fbjl)*cO.70MD2ZiK9X\mYW]LoAk,K
%3-`VT>s(`Lh(/l6F$$9(?j2sF1IC*12/.#nHa:hjie9jgD0!XF-[I'L=PZGtXsYp%$cdRRc9[pn5<i.0OWDAk7-qo;fEQ7]$(,Ip
%Pel!ps7R!cZs#$W9KueAm37kM%c2j-3_Y[t'H50"b]mZq6)\^[f$/Rjo>j0mg4-aPje&;GO>^rWB_&4qiIClN[3!XW"?S%I4''EY
%N[-I?=@Up"jNn=_<Pa-jHnCoS6euO*E2eWVno]j-1rH1`.3rLQild^dH.^J;7O4PC]/hP1`'VZJH?Iq;@UK7Zd&KeF`Xip'2jH$-
%qP&TtPY>itUi>gXR.a^G8aN,jP"EbunemlVWa^91ZaLZH-(UGP[$Y5[4<(j"#&%aiUsP3akEDW:[uVf*!NsS-\Ci\=FlI!>'s3s1
%O#rhX=<$-eOm0iOq=]%)isKMg?Y0M]%Lj]:\n<uCh::1F]^A02RZDF:\ZktPA4mXh!-d:ZVaul@!Y`IQU2lLF=lN^k["_LCJrd`/
%/"mP"H"'JKE:Ga,P7:X*=op5,&LVs(f`a6Jfi`q$:_>&V[q<u%go)#`<_'bCK_b%;pu,M.^)WPh=0O]7\QtQOC/*ce0(8F=Z*[kK
%BEjBm.)0ta^7aRd,[0H$T%NDdh@eMSI`dpdfWmmKG!J&E?\/7.-s-j.'bbp4/Odp?.Z;;[mKbHG',BK^X$_eJ/YZ+jYdB&rTa@T,
%J\&)8"W`OCBt5&KqSe*Oir2eYW=DScR[lQ]%%%t0O?QA`hLDR&Oc&7h8&NJc]GGmk(<`LmSi!FuEOE(jB[P"^;"85'k$]r5JO;.Y
%\3upSfG?O\C0OtL1+3d5]<X<kFP#qe1f!%HR`)-TK.;&rKnV/O04+?f7l/'L2Nf/u$Ym=joL*C7Osr8oU=E8t+l80P9p^,`!qk73
%l0h+'[g%\rW/0T/4ELT[,-Y3Pg)P]a[74S!"SEJ:$(.&!3GTUc\,rQOP=`8u?`c^8$)IqtaDh]),MFWBO.oVAhd3t_:PTUP+C1jo
%q;Ar0BN.1I>P&jP7_'\-ZV0M:(Zh`4&g$H3e.Kc+>'@3@Z`.&02%01@K;VtRh]o1"Do.f.Z:/EN!M.P,qjGp.+6CJDQuX<0AW/d-
%,7!p=40?<np(:cnBMSD7(LNd2,(,fdQ-S[-`/E7GqXI6:L!S/$403$n$I((>qUa.X\\.\$A$N!Z#B'/B,^:CS$"?MaL6I9LTs22a
%'hJ0)=?=cR`#1"rAG^Q*[[RLhrIElNj&oUtV=_!&!X1CXf5_At'ag&_o^*;>L>gq1=UBa6IJN'8rS$6.3cZ27GW3qO(nODUQX<e\
%+fQL3f!_iCLZ`@6Y*aqMh%J6FO`Pted?LJKUYAr+;2:9ISc7>,N0ZN"/ID`48`<6P$*!NGDc>cI"gcD,0FVkmE9LV6h4/tXMc:?E
%'s$#ETJaFBS@4&DYbJN*oQR3nW/@Rhc.o4n!NNsmG[r-AdM`RVRYru#A[q1@HRP>>RW9i.l8+6-e.Tr+`4pM7fJW+G`ed@(PAKh;
%3LJ>L6]Cj]_PhO&@:H?Vd\S2'kdh@8W>5!FOQeG&V/>l[`a_J@:b%$DT!;St"i;\6&*W)3XBQ25d-N[uc9e:0LoEEoc52TBniWcJ
%mSW_F*8B?P/#$%*:34Og@NSL_N.)ZRa?<VJcQ6O$L$E8^C\43V)YCj/:%U_e:big%"\d,/P=^V"(,_<I?]u(Rac&P:_1ll$6V4L^
%ipEjh*E<_a`A5MO9$0!m0e(jFZu`pY05Mt?E*s$'ZZJkG[j(9+SeANEX4\2G,3t&e*Z'jA.ME)RI'+qbFX'e*HPo7ln4t3T3+X<D
%C"eE:iE]32d(M"s_'YX&/j$-*1DpYm)P`gUVS4V'=_LCS7*rb6lEaB*@rVI)<85e`QVo$B'l_QrQ6"`&O=K3<%MN9LLPS8op*`3X
%BJEi9$1&cSIIg6)5&0EKYDK6>;l!1bB[;n-CM1:%Y/Ofs$-4o<CQ/kCSuuR>=dB;I%3@[)U>'=5+`s#*T@$q&L9e%ThSm';0Wrps
%>MWS/r)SrsEC\fVA0<(l/P[lIK8:hjKH)3mh3=#jIOUtL_\1*rHa5X)8$n"iS,#&hV6BuOKjtCTBh#9C)THcWmr$H:4UF7@\heG5
%1kOJ=RX9r&2+`<m-qVgsQ&GoLH[Hsrs+`;aSi\`33RS%#Qt</53$LG``3d_d-:G,:`fqKu<ZhTu)NS-\e&>m\X3o]r/Po?Y`N*Hj
%%oZo73.Ics5!o$VaiR@*5CU3,\7]XMP8OF>%.spu^1Y]Z,Ytc2Ml5n0Q50g'\5*p]mA(IGjQ%nc%O$AD_7,IHNpP/hO.GuW=&+lU
%^:&eU,pZJ^+uc*`_Z:Utf#h@BqZrMU'"LNd-2&S0S0:uNal1GT**+G4AY%X,!)RO2%Oq^tS6+h*3k7c[SCW[.Tl89Gq9MV[s$eeR
%1c4%R&fs7E-d$ZZFPaXg&e.XGLaG*VMODi8+o0J2pe#(elAi)HI=N&7LLqFW\!g*iJK+uaN,?sI^`)C[K-Tbe8s1ClQN&Zj1PCKO
%QJ]$0b=)!;@j-JjEee'p#S+IN+\DbR?I7ib%^-4A3\J8ED9t3Q?bo)4_`+]B9[?qi*!C8\`]R)hj)9rVL370[rJT/mHF22KiN+IP
%nDn+&8rr#n/tkcT8QQ4..OYfI*Q='"o[%c!0r]).r)RR!/Z_Jf@*5rnUY,I2MT'rtQ!e-cE;GYQKh<SMrX'?68,j<&ha_7+e=\/I
%03`<-$7:%\/;e0Q_;J(%^^\Gf+oJr'I#G8lUO0_`gecE8DND]HbE33kA<6eNrB0UA/E/kCaOKYL,b(6UDB"b;'I;J$!c.O&"gfMb
%5kJDqM8h;>@n4]!\)d]pGT1Gj=jN7"n&jLPgd?6BMkrZWF_LW%j]W8$8CSj(d&Y1gq9*Hf_=r[)9Ra3*bD-r#1@bWbc96hB-TR>V
%QE#p05?2r!QtFm%]M'KMa$$Gl<O4_G:O*R#F@da8Q%1DW\WN7nmIRd(;M8.l-8DoSSlelNQqBHWT4d+LS^Ke5GU7-q]"'c>FV:+c
%Zs+Y>H\fm]5cslTU5d%"FF`54Qs45(/+;f$U51t6.)r,*b)(_XiKY/:C%bcl7k&q=kNX?I)Kc1])M&Y[*3aJMb#E9ZCMM-":4I[c
%AOgoD*>k$-PmC#[0(JLscR(NJFg8'F)Dc1T:ISFB0U9CYrPZYlAfdW2D+R`0%$`ETa-<7egH$FSB-j(KQ.nP1!_k.)*o.13AOdhW
%<:Y?;1JTRWIL'3K&sPSdC=2QT.jBhe+u`H@#f(4"6<>Ril:LKEb@E0,!-b+=9Fa#>i(6KTj\;qB,BE\g8\0Mbq[q'o#]9+7(fLlt
%h+UEVdt_CO7gHW(af+"oK\'k?N+Dm+Z`0``@k,s`XSKj-.8'7s*IE:F3:iKb[D,Yg,NB\]I]tQWR9n#:-A,1&h94o1D-n-?%uWUr
%S7A,WbMa9C-]9$;Ro'r-?kfQA/;nUIg@Yc%D1sbsBfe2O4f4T:!4'!@GllfP<HnUicJ?U;.X#e*PjPAMTk_PHf/5Kl2ofTH(ADK#
%!*V,n)+)@rs$=*S:h)QZ]*j5]J=&f3L\t(G'6KP)@CF\O!%7:I1T=d"d0*5YWg42%QWDBjcWNU:eG3T661r.IpaOSL+.+Ll%gI8"
%L[Q:>PtV`qenAP@W;FpW>7?!9["N$:4WIsbinZAJT9=CJ!f#jTm+U01e^6+YLNg5I+;_UXO;)BuJq^Nek6<4_b.@^!)`Q9J=VOBB
%OeJWHMBDOh\.t'!os<7k*<($e.T4.J`]jnD4q&YiYXO)o6]::''Skr[q:+')p"u8"4C:1o=F=`YBk,D\"4">N3U=TuXFHPeYKl[A
%/1`rNeK[HZUAk.%Q2]+0q*,Sl?QfON$psH:20]0J]EU!MW/Np+5bge2E43n5Q'gRDFOY0,4q-aF;cm/!_=ALBm325ai1B+1O&jC6
%o<^b8.i`$h7eR'Y)J7q/+e,"o?qq%834!8=KM%@W^_YV2EOlfWe^_K&*O4&W/FQ+kZsLb."9SDPI&'=Qi70BWX;2=`!n#,TpMYj5
%TP"qNjSKiU7`me=#7f5;*pJKGIKl0a6<65/04"];^+fTV'iL?o!q9re&)>^8%0]3m9o"W.MG7Q\qNu$6d"P")\P4OC0r!kAKJ3S6
%Fj_<@ADdpu@^XN2_DeX3UB0#I7SOTU!KAXcMTVrc]'0LF1j'#:ggtG?+W$MEYl)QmpdEXKUU"1Ubou:;"0()m0Dk?e'dld_op6=(
%]L#0?Z!@@FqJOMj0dWEe1F#?2V3Mh.KB,g!\We<Xg^g-<N2LA1Y_SC7Ia#/5WftSj!<=YA;#=;_og)c!8!T0!\?7?#*MR`]=U;7*
%H_'kj4)3c&s6QDFi\Z[@&RFo`1oJ%NgP`Q>g>VrjQlql14e7l<s5M>#8$X@4cMIhB5NJ].'`@o39#LuH0Yh@q^!P[K/HMjmJLsF>
%^XrG.No)<e#.$(sU8\l!BAAHUr]#?JG0Jn@r+%eO4H.UJl'677L/],rP!M!H*aj5!OY.;K:(Y#Q'PR:=h1W.='BTZJBP7bTr!WEK
%Eh4UYh'^L!n#0E#/d`QUCR)C"U?!<i4mAP.&"B5]?'Ngm]3\(r,2)`(#9ef>(O85X6D\`opsQ-+\*3d\+:4<FFDi#tn7_",C5$;:
%2h!1\\j\>->C/dujC8,.Yi+5(MTk(h/ANZ!TU-&U[&&r./n4N7@#LH>a7-oM6R7liJmc+o(Sl.3fZ_ag$I=,c+[Opf4I::2,";[>
%jfsr2j$I3'ZrgIN[kdJhH^V]98b5Xn]br2RgPq=8lF$8\7'CH+he`[k9sgWe93,%JX!n3K/D"cpl*kjec-)](+j=ZRoYDG^Wo0NV
%e>`cd@m91":N6tgpdf=(1+rD9PEtTtC;K10G<,4,-.W9B>7c0/\tPL20X0^1bf)6IVa#hf)=XDU?qH57Rh4HkFcN>l)6QR.$Zfkk
%7TpW%k7mT(d=&WgNG%R1RL-YITHn&$*AOnqo.2KKGr8ndqb,!YV>-^.JV9,eLOHH]-W`9NJPmaR8H0OiZ^W[8Q"2WVYZJjGKD'N^
%F52PGE+2W>BJBnLUmET*@%ilsPrX`j4g$*h(@<muYZ'M_l1tJ9,A@*-j7FqL(2n)=JBRFD]E;?Ih3(OF`Y:OkdI!I)5ZS`,8o]"Z
%P%#R$_>Uu?R4P@b.ua!a-Whg0P0#,Z['"\1pW2a,3Nil+KgrV-g3DhdHg2jfQXr75kp@h0Tg?W5X6sb$&ZdsWd[Et%Y:@CjDSBNc
%%D);\?"Lp7IL<P7BJ*g\g,S2![ofa,+d<h@buuj\4tSj)3b\r##;W\u3[o^Kn:(h=0XbT$mn4SJ*jN:*p&S%8VVain@m/CmEHGNj
%cC6nnW+p]c(r']Wrd$RgGq$L7[g*l4nHOS0@.`JZj4<^5G^<oQZ8U'cVC;'Z,+HFr(rpL^JCGFi`jF/o-nbRXH^e3]L=uO5XDkKF
%X+!ui5g@3bT^!hJ9l<(/+X8;>auWQVS*aSPKAh!ADVq5!R9"g^PbpElV8h+Zo-/Nk/c$(sMN%+fR-ehY^'C/"_&7K>=J!$TI[b6G
%_e/7.`g>TZS%uA5)sQB&Q<u>d:h&Ek3j<HU:_VabWp062VZeT>B;)fq202Hb#45A#1%dAS#0qTT8lqZ6S/A4QNc:[R)(:5?7%n'M
%M]NB@Y_KP`5)[j)#j;oP<XjTtRh79;*BE^?h9J9082@G@G\G$XR;e3AoGLR_m*%8Qnr/AR;qi^RbFoguJn[8L?G5d]<u=[^$EW\$
%!fA\DD6FBFPa)j@a5`H$,fLc.US(/k$[(!;Ts5eE-MO*pf`]PNVHQt`\uAaK14Qli3%.#fd;#BqA]HD>UX3'kM,+'(!\=Af>KWsn
%l[UukO&cXRr(nY@Zh:RM?pkUW\1lD`];j.uPtn@o0Iho`O-0k1>:mD.?W3``K9q#`5Sqtl=8th>JJgtJXt\tLX"NS,j6hdcTW!gE
%V"sIu@9_u>rk!Vs!'98d.R>:,3+4@=E=aGdjmGdF)ZL5s]L?*o6LO5Y\knS2#R>!WVcc^CIb7:)_Q=rT_=.r@$V<`?3Jsi&Stpt\
%?X]m%27o@J/92\>T"c[>%YiOsm#tRtce%X_%=_+fVouu*56d^@B_uFi`b^9NR8JL\6es`VJnV/5AEC/Ifp@=r2`RB3dBqgV[3SUG
%Ob3pZh%dnF0Rh:b;b.6^=J/UA%5>=q!XK3BBX1"h%WKLU>SJ'ug4<9S#)nptEruN0>cFRbMHTa^^[0\oR^i(&7pH#/(%pmA@0,3;
%5sg..K=nau1R[A#>gXO+$T9W!5<$t)^h=Jp*qJ[GUh_IL;77p:5S)BKM*(5VGtsA<QZ9ujG27`cf99$g:%K]fKp5+`qlVW6`%ZsA
%WN']H'JM$k+iqX"^Og!lT"Y+C+NGQBKmUU!MF'b\g-&Wi-j>HnfEW8QEd@VdD_Hf4,d%^E$09T)oG.?'B'M06onSK+7Oq%+;;4cs
%JNrKj^=(.s5(LOoRJZ=o+f[A0%,j(.RY+Y#)G:'C!>qmh`A"4\8aZn_R>iY]W_s=dUYLF+b,_S?VrZ^9c7"lH'#RT`_d[;;M%><8
%Kim+mC.hcFHg]ZP@L3"ne[p:j@$/Z)Q]_6n:%@$$qai.%7@I4d7#N,e:t]n8^ECT@SrUNkG>pXSd*,Rh/4/+qj*(F4!WZ*_=g%t]
%YY9Hc0Op0o+41L.(O^W#<`TP=6#5R:R*Vb'G^4S>Dmm2(q-8+>"GJAh%[qZj["_K#da4qdE7I`]T@"]C,A['a=%'A=BV:qIFfcRS
%O\jGNdkh093k8+QlnEY&!")8C*'EG(%h3fQ'sg;Wd#q`Y)=Uh-#lSp_0;Y>V?CEf3;\Or1H9Z9FBuA7eN/6/Y_.b%uH]Ea,]$fo^
%(sn(pZEl+EC,'gS76VJHp(!b`&6f3Mi>]I9@F!pQH=U\-[&`jb+,`E.:4LIc:/2qjS')0?T^)DoWXS2@7C?!!!cEqVLAN&B!icBi
%QNqI+ApW9*)jbdEmV2nO/VOA^rr"0$(s>NkF?1gM7`1k,C_urfl)sFe2--LV0*,M&#b81e9cdS@aCEf5ieMh@9\<LUoeRmM*Op):
%j\:fLl9!jIG_QVYld8Ye$s=LVqaYR.1*VjHrF"F`nu>=&X1*NNCngX%;K4?B_AnSlC-ma95+U[L*&^s!.HWuocuOL8n`Q*!bXMhZ
%[GAIiP9g'YWEA5r'aF@VL=ZOGVFY[.fKAH''*3W_MD6o_&=B=A8M.ZM7G=>YDi-&bK1Y"mW$09r)@#cjD4`n\:TXNAi4B*[TB>R>
%ps\XU39Be5j5C3YX'@sYG9>e/&l8fs[o3.?P/H.X)r.(-7<'/ZST4-tLoi2a+/c5/\SG5k)]$YK-gs6aLtK`XcS-7sM/L*po*OK_
%3`>Yh)VBPN&6q2'BV!UP:A65-Mp*"BVjRAndqo^0H.\7`lr!-3K5*-gk`fLjk,s\iAr`QGURiot`1Qs@lUF[sTTbnQB^83Sdbi%t
%Y/\2T'e%A73bo3Ni#(EiD/4l\mbGFLMkSLdODVSj:fH8sWE]pSjP.UBDhNIsb>')BENrSH'_kfmlE[tgR$FC<cKd(TG2`%ffA1X:
%fd1!(_SOmZb^rI^FJTd"r@*@)mU:dh]'q&)3fs:hb$+mqRj'Qm(T:a\MVG4E$mf$Z1%WAjQ&^iF8N'k2?.R4-)-lj%[?c3XUm8h"
%lId/H*^.*Fii$96QPn)T1sC)(R59shL=C+$*6E?XD+e?G+k*SoUMbDKA_4BW@<Yppo3g<@QD[Rs9m)Fk>s+Z)W0jXAC0WLX*7>/C
%WJ:G?FL/1"rnW9A*B(Mmm!90K3QuBG>19lsM`,R0\ttR#Ypm%fS1V6+KJD;lamM6p5RYafE`JrcLZ#_W4EIZV"%pNd-&jt$7[t<Y
%D1:=s-4oo(2uhm@2Uukm4;52`%I9])ouWt?*D'G2o]/+0KVH0g(T?\d25[r9=?XZ:)Q,tmL?`,*=Ykf*7onp'`5E'q9/EePE_^UC
%cW5''jV#C]G^'sLf\^+KqlXS`RaP%VT+H71JSMH:PW+bVh=^Oj;5Tj]eVdg)GpT"'pMa%Gh9uV2B,NL@pWiYYgF[.K!_Oig/]:oK
%7;%-_i>p8<FmLrE?o^^.cs6W_Q`M717]AF7S4CfoR,q'SYM*K?9]lRHV"Y4YE&.+5oS"X2mXXLWg5bc%gPcYT@D9@\5`:\a9?'.H
%m7qAb%ZTM^IEYk_>LVk,&,+MZc1D[^P?3=lV\jh&&Uk`Zr`4FBFWC6+>(%+75)=V/7*(EVl!dH>UI#J"a:W:b6%Grc8NnhTjP!l9
%<&Rc:QS?;/)0TJ@X:GR@!ekl\m?[5#qM<WkZC<0DO.#Tpk]e*0VE<&-qopD<WnS^r1bYf*ejJNGFA[$*W3-EC1-u2)3p`X@-:EfY
%bLR8I\0>utT)'V&C;IG.IJ"@^q;O_L5$'p8,N\_j%0(IOru`?O3c"6'%KAo^NJjNqp?p)]5I?sT?2bL,bFEpEC0=BU@8qW"!]?5&
%8hb(ZT:.URD]/t*-IsT*U^5jFE%B2SdTjC/nCIgWcKVA6OJ4)LgO1EX>CJ!oOO\C4&jZ@i$aNTDp0r^"2\i3/K#S?uF\5N/)hr5<
%=.LAbjdLeu.Z_-#H(F2mrTafg+EA51QC)h&Q92((c?#@b!(ocX##5OH?fMja*8Nq4ecWW7blWh)duh;@rh.?Z)9R]\P\?GN"gYH:
%Zp*r%d#KVFD[./+6/73c#8+,.MD9mn"Bgb6E(+WO5eYK(bf"0e'J0Lf0)*pZUgZ./32Y'Y*\D4J\X2H(qaF5DTl+(eGgGU])A4%=
%]MltC?J+TQ/OT$^L5CgX&[aGa7a@OJ7@`ehknmoHMcq_2BQ",l?NLk?Rm9%]MbMffl/ij#dV+MG';'^l4N<#*!L&#%6Q;FEFVDeJ
%OYF*LB5T+sUQX@:WJEtOJ<$(gG5R<0U0V.66O%I*%r%7_",P+Z=Gr0-a,"XcBc_gk_(K%9fsaUl+6=kt`^Tor%943m5((0h$RrP%
%,-$f8@gc;+MejYeA+!8YgM[8u/grPO932rOlA2bODCA*Xd(G+cJABpZ@3Xcg<,YV[6'j/!1J;[5Oo,DhE9cV5EOXcKc.:_U!;7:f
%6)$F>%B`o#9R\p29E7SnEgoFHW%&>6a^N9@Xt#!]"2i:D"9p9f^6e+c%Zij[#7o,^Fg^"Ti'[BlDMS,6)T]b-hbSCl6lOeJU;fU6
%ltC<4g<P<hZRt9bFEpU0;06lb!2rfM&\Ls^R0kI>>!-:n%*P?Dd-SD(P=`kX.gYY%LJp?(`hk`O@jC_19e<a.'$dTQiboha6YcBh
%AXr4+>NWS0o**#^""CrK.%Ua\=lUj84h\87P0@Q312!$<B\Pa]&HT*#-a0k4AXs07\(6F+(Tg]se["gDMgLUjFu28]=hkaOkR)Mh
%;S(8$7G$,VeTeE]%]hNEHM_3;&s7;WroBBH!?eP;ioC6JBXGcE/[BLDJeu>i152I.^P:5Z?-^USG'IiJI5?o9*;]a8U[7&JOAsO]
%JsU)[CY6*K^g?6Dg8JFqk\Hn0=j:*'g^"P6WadNq$!UMgiU[U<>gV,(-kfq%m$h<7,458J!8gSjoJ@>hTp0A`PIc(E1/T7"A]*0I
%23&ogNu8TA*\u\':1Bi=";n6fA5QD:]E.&qY$_q-'$u_oQE!Ith.+ILA,\6Vi1,.BX$QGe_.QTYPbftLCptNf@O!nb^]C):_p[/$
%K>Td'O2sYABh=eIS(]k9]pe/P`=8!F@++$UBmL4+V)Vqb##PN*'#*NJG^/a[+c!JND+TlX_(<@3+6]f>S?;a-`5m-]?"Hq<Kc(lk
%6A$Sg(e&qVa9J6)Q0_]Rga74og,6njYT*g\XR[l&-J)+jd>X,\dq3T@X1Jfc=KFr^h$4N7SCNlu_FZ)T_s/k`fLpWD<iD&pIr:Sm
%4BG@sUpuS5?h4YsMkEqPHLS*;R+(jOA8,Sfc(N+\?3a:qkTt_WM9[<#BiNh4AGEaMW%,sKjV2im?CGWhf?r8U]**H&Uc=^m%!@A^
%W7hS#/?dA>:0YCW>0B*(4D$i6_#)tOWM()I%BU4m&XB-X&9a7dMi#RR=3*4k7tJ(l-3^HCh!D(L,aR.Kj:FpSKH*<CpH5%./;`20
%qGC.p?GK]U!^8U*\M.P:ee'T<F.4'8MA>=M-#'"=fA5Zo[1W-[1R5U]G[80PL70>.2HoC<)-#cr\@aGl(1=E+dnt-CrUd=/,0"!q
%hq:s0-Qg6/r5!7=:Vqg[8)t&XhlD`(W_"lX(Y;(GOt1X^\BAoM`L[])dW(\1$'EZ*a%?^4\E8ZTXd5hniej5!X(7E(@EFtX[9B%8
%E?A_+'ocGj:l&^S9R38t'N2Y59B:)8jBW[iCJK(*R:9+(<-<rQDGuC*![u[/&S^"Ehk]uV_7/Be'hmf'=j0K&^KIScZ:X;*n5XS+
%E-rOi;TV;-RkF2V[i?4Dd.]ji2IdUn\bG%3^)cioeBC/;_LLrN#/0HIG.Qa7H,m"'9A_>DcK6oS8/()U5"h&415&$5Kd,6qn<UEU
%guMA:**<$1<"]+N9#jmG>'NInB@:$'!CT[-'$l!Ob<-:,4?APu,A9k`ZRSJPE;cU&3*L8-lSpNhUBuQf:+<ooYE)lKaQJ<]75>T4
%(YTg+<ue[;MA?2pYF)pJSR*3njuV39.tkGfo5ho\9G?0q1L,19-iZ?c>?R2?JK,F!X8"@[:U6XZaAblb/s0"mSdXF[>WJ8L#+&(K
%Hl2Y1>p!lK>Q[V^N!K3P66OZH9VYt6LUI\F8lG=^.Uf*AoVi5C6d&mOh#rCr8%J"Dn%m<2M?[A0C2(m;1>V@mIhYcUl^*%KcQIKo
%Xpt<sjKb`/o*VHTqZu-UX&O#*bKV]ga&WK\mSk]%hSHJbq$fq>^u='T9e8u6J?QFc.`L[o_+ung-Z*!i9ofoV=^-lM@5Y7%npe<"
%UInU`\2ltH9q=_!F9S>/.2N5[).;/.76RrNY?pn41\j.H%obRNhTD)[5C$4Q`?r+uo.@L;N*35Q/r1Q?G#YJ^6*/A1[CmG`RL6V>
%k/^nce<NRqH@#`$\sIKVZ3u^9^*PgUr7A<j+lFm@pX:mNT"u_Y"b(Cmr5I"ulZ][sk4Xlbq\Uf\TZ"0,@^+fXC.,%9Wt%`j5l*/8
%(Z-I1$N-3YA"JRh-tmDKIT`+KP)!d.!s98Ll\700[WT:)>lK0"*V(IS'%VLIWLJ)"*&j4MA<3-,kPGfIaQ&rCW?$k2YDn(-8$'R@
%()][W[io<t=N+I$USV,o6TLc7W>eIl#Nf'X&?,$.#\lC0mDE;CL:G0*d*6>T!l>"Cj$(rD-%70BYr$:@#+UMg;YlV61QQ&]ggC0o
%nLX:"j:JKhL/NV$W1L[^=qoO6H)`<JeP>@2mG9n@.'I5PSZNkc6g6erflFNIFq_9A!,`b6Y@M<(9:Ai')<rF`-aH]KC4%Zc4Q85&
%kC1Ke4jjP=$/,TYrTFV:eZqr^!QZ>9EMQU2/cr:SA?g5FY<cm/*m:q6=n93SNP^Lg,%rC(2Nc*Y[ePFqFE6XUnid/S$bB&%Xi?Kq
%B[AK`7"1i#g]Q;a$0c(cWjIrs0YA0:[b)'.8i[A]4f*=nQ,'Cp+84<9DT%+m:_Z,J;K&"&)3+.eNr8?b&?tc\lNLC&XkS<uH*1_M
%edWB7$?WC'>>T+3dSetQ#QJHF3mqGLTu+nUBKA;`r"fr'RLCth@9/K'91pVa,+o2O.ql^6]U'u3'2)dkj6+,@Z%Bg"_"kD"8Zk$i
%+\G4C!iFm>l)29.X'o=&fG9<>3@OtNPk6Q#/'c^?]&0T"0610)etA-FP$sb*+4jk(B]#2Jd0BjNm_BoPR[)LccJ@QE+0<GNM.)+6
%Ld1g?"D_Aj_^@O"asQK6hD$?(:Z#gC;hsTb=.[gj1g7S\^D`-*7X[h<1<r(qn!3PLTu6%.mtQa=@9#ePR<Eh<`TGi*,IMp1WQsV%
%#1iPl/\LWcMS=c:=NDuipAPP8`g5V_/R56_^^(?V?/K$2:slPUEP=As_uGia"FT):DbbFoL16@lRqHH*[S^p0=0AArPKUQsp_3DY
%GO)lW"jfplSuOs++JQqt'>ulR3u''.C2i'B0oV3EE*Ab.W<^D9KM3*iMAMNSV@'fD4_.8VnjmXqPl=HX1$Qb@m>NCACNiL;#q(h1
%Tmr?Fr(:Ji+ehO,%U:Q97UEjaRjT;F*U:Nam%'i;1Cr#M$Jj,7L/l5R8ITs&rh(.&DQe2N,p87VRbjs!Kqt1]*)^OsT'8G_=Y%Lu
%r936kMWHZiL=Sj`NFWXL$k9CK8d#op;lLi*>0ET?;.g,dbp@7"F>X:*/tu.FhtG;VQTY#Mqs(dH>tWGb#]T\uOJJMC]PYG$*Kj=i
%U)n,kaL#5PjgSM*;_TEiKCj`N`#CXP>:ir.R[[q&"b+,.-AdWAmoAXHcea%k`89REq/`N^.C/gY7&^mmZrn8d57:c0H-2i[/VX\0
%VPL;(gJWBDn@m5>cmMZ"2tH5mqel)g"NcQJ&X)9XZ`o)))8(#H<[#)7Jt^6ekt">9J$HkLfg9^Uq9lRNTfI%_h/_/K"N9W_hq_gW
%8tfj<ajV'lr@KQZ6cUu6b#@2mg-fChZBF$a8AgPQ#drj74JZVd(`o.-OQ0g4\uCPu4qo9*Tm_C\SJ`R9D)EtUQGL*us3iq9a@o\/
%ZcaCbK'$b'[WIq'S4TA?a"KG?fii0#heV7+ijVHj<,K(2W[`@:%8HkH?H<&H(`:ZX7/HKrKIfc^eVO5NDQE3E0mdVt(;e<"e6H8/
%Y:X)"13tKfm\1ba$Q8P5Nd`%I1^*FNJr-RbHT,Q4EZ8_lNNPtW#0*c2V9O>gNj`QrU:egYX]MjT%+DXU,[fD7)]^l:R>.?k=,0B=
%q4GVnF.=>]8%nY:gW);?G#0r[?fOd9;re9`/G1R'AS=0X0B=I1@^,&p&s__NOO4,eDBc)9g`\9O8RZ>3"iGJOc29TH<+R<t<lC),
%>aptKRX)tPbR(6Z]Hi4?MoQn3fLtU$Y+]nbl%q;/W*/^p?XDKDDhMUB]5<$:cMGr'oEC]Vq`X]*50tJDqKmX`!c`)Qdc%1DG;BNu
%]DAZP\mA1'ln<@s?h-0=K,jQAI;'g[P.=1hf;phHU=0.c8\%]TN-SLI/rN=[@3jlJ'lN6@D;(;1]b[MYq-Yt6QC%lt0WCT#,:Uun
%kt+etLYbAV5&Z,j=?fB@_"GOe2;iKbfp4hH6J'AgKWd\@XD-]bRDZ=,2GF%Z="jGoTq93`AIO$;0u#%>BLQ/ONJJ]AH*gZS83Ge]
%S_IQ#=e:ShXi*K1.KlGR[]5'ON?&f1pU+'>b2_uB01sn+'f5+gaOM&I4-#UKC+-I@o"f%='RX&AWP)V]N-o6l7\+ra9YFVpiG2Wm
%AigMeP-V6j#fFI?BhEl(Z8>jf+'f^M2Fo>Y9(!/GKGC%q`.8.=g&^uf`@.sB2a;OEXJlBK&WOOVr.@$/(5Si<kBo4_nOZ5M+S_hc
%St]8N,L2c-fAbpfBV)%hA8QKR3%h[pZW_tm%=rKmNA5iER>@2g[m0R17]hA`#&?3RQG!VG0_0po(=;.o5nsd:;uOA`QI<"t70h0s
%;Fl"h%l[^*](+?FE`F2\Uh+C+gnG%WqW<sfDr/LAS)1b&0JQ;FE=GL4/C,W)6r8RRLsIAui9Zn''fs*H@Br44D$TQ71M)XsfE\-/
%Xc07RWNm04M%.3@-LMWV4-DmKK/kMq=7l7(\I/Rf:mAc.77CbOEgR_LC(sTC2&A9BjuRD.:U[nCbn:`N*k^n3VfRj]eb;b'o1DB?
%5!s+sSI/A4:h9q4U]_@L)De8N\sMe]+brRoO`m6`gOpHm(86WA:;_5Cq+P?Us-rf6YCMHsrV88q!d%!ED;cq`2WugVEn\4'mpp\Y
%d`BgO._scAht5$sM!feiWoeDN^f1ADMqp[r@<7ktD'dJE`N<Q^eQ[qkJg;S#9!Hh\_J6ne9b)b11t:UO,k,D54#,g(0ZuNl'hRc[
%VB%h%P6dEGntB3Rjn.F[[oRSfLu@E2E%3ZNh8)%h/%f41]^Bk(o4b\<Yt.'<e-*G'"m<!B=Qoo%r[1n7JVe/[OU0$J[^TDqoVf=8
%J<iGUTcl4B/Es@DUaW,%i!E+>[:?Ou.UsYFjN\JWaiH5F.9tJUJ1;UDbI#u<ath7:]!U:;`E$,K6X)c8T,'g/R@EF\KUFC-U0'E<
%;U,QQlX2E1D7"9Qb,4b+d0D^_])'P#cdE]?1!mn6.g1(or4/?X;">oXa,fIXo)a>7NGVeVVXj'Hps^@W?aoaHe14E/q5jD)`hK;+
%88TU>(eXUqk%7H)Nen9AReQ,Gp=?s^=lM$=Z",n(etqERV;bc7X9uH?iq8r@oq)!qo&/6/V1/Knp%RX9jAhZ?$\fdM!C(k:2quAj
%ar*eDo[@G+V@`U!L*?&nk>JP714j7E@7g3XnOMQFSOS(0:6c0Nq/Rl1`ss4b];*i]KQdtjf%e_Iqamk7LJg%o/$2<_pgY+K2aa?h
%DJ<BT6Z'!D.6DQtD*Q*(a9!K`jHnqLW5btH>^G/dSjGg!bB_j)8s#CIXkQW\-&9g*R[74'lla-t*V_GdTIX]*12nJA`bBnHRXm#4
%j6<1`fKdB0=CVh%:gK(QisUZ??]UZ7!r'YSKkcEbo)Wf2Z9B0^iP'PC0If%.q65Kf[o_h_h<n)aWN&HUA!Tg03:H@;*VJ4TrqujO
%<@/Y^mGKiB!2Gp_AYWpah$JsJld>4TO?Wf*R$JE,C.'Ht!7"'R$<3YuLCVcX)`YX,#VKT:*C4LHWtfS^3unV0lh,BP.mk13Q2t88
%EDSMQ-q2/ohoc4m%VHo)T)RYA7gbO5H188gNI\3_8*oa*LaVQJc5_)YUE6_:oCZQEo+>QL!i`TMbhF$9eUVIZWTr%qc4Ku=MQ85"
%\,]agB.PcnecO7,>1iGK^=WO:i)/"KnR7A`!,SG-/fS"qgapC=pb:/8o9'3d$l+(MjqO[j9Ch,ZgV,\Cj<ZOjn"*BgU)5JCGj2S+
%SAYTR\Q`cPe@r8qO#MUN'`M_>6PoqrItA88O]A7)Z4qkN+U8#K"`cJpoi*]=WdYDKDjS)ZJ^%VA,r\Y<9cKPnRIk&;*bsIZ`I,O!
%'NK$K?nYQ_nN@5QjL(*l]^9d<o6Dc'Z<G@j6-BRt:EJn`f$Hm\1JUoD-,k7=L>Nk'l^_tDdu=jb+*?(WGOls0_Xo7hMmm%%W?Hr$
%acjcV:]bGfj3kWk_<<t2#+N%E<mh=MU1;HfS-_i]]1cT5]%G[>C3J"O_M5#o?Um@&Y.p](!9M[L<&"_\bW6Xu`%Io>b7,(]W-HE`
%Q/ZGc<L<YMg+@`QB5Bs"__DnJ]G#n?R`>LbJ:7SDVU$qJ4eYXq[M]HSaQcB0e;Yu+0(0ga2N#3N3C6)<"l^pg-F?-RW/$6HX#5re
%a@7gK2QY/Dljt>QoP@"id)]gNOml(/#&@#ZBEn4`"4!rLItugH6*A4`bAsTo`0oquUgV)4p+Lt'B=ul$:%?u$&Xs2p;I[=P_@Kg?
%H<YV+]$8-NO/Ybua#qa8hW'6HCJNbac?B]J64S0A@6&*RnVb#>9UK9e;eoOs7qfbn@kZju$qQL/o02bf^$Bss.9fRnj'@St[r!GV
%2YKj0+De`i6s<84jX4o;I]j:,#!-"+`+m2=m%osQ<$6kQS2/#p#.h<10;/?CMcURRfB9K,NJg6/DJ('>T&[%k;B>]/<WX=q5OM%X
%cBNJ^F10>b-?00*A2B6?:.J/0?nY5n:F!+U44a5IgJYP47UD:>o#aS<=e:/.ic;!lH30f18,q)*[>jYKl[Gs:TTr/#ns!7()f)r%
%;CL(OnkAO]'5\m.:h3,I,r5CtR9`K%UqIg,O+R32)=-8,-=d3<T6r+i8)DUka+bc4[sfFT+gpTNRt^3[6rdO.K$fmN&9gdPlJ2(r
%DY1BE9nQ6!Z\ZWEK9uO;K&uQ2Y,h!($cO!$l0-9+mZ+gRWnfL6*\!iSqM)bI^RG?4GbCi)i$l;?nU>4;X+YB2ASnWaN2EQf&%$fF
%bb@\;:,3t&&9RVMJZ*,7\U]2uX*&qA:HK'&QsKqEVIB^mg5dG8QhZH>kqkQ-c<PgDn?1*.bhkTL[0U=<OZq/GWMK45J,SCL`]Iji
%Uebs#V8)2lVO)f.c4VB5S!5G6]CV516o!8d!ONp(>:7L$W==jRGbupkLU(ED8!>56(URWAo@Q5"BM=nlZ`3TQo[)AW-ETheW&WF*
%e;%#jEk2Kn/l"H:(rd1RZ;KD6U[jr(g:]PX70,3h&q/Y3IerB^I6.R9+>)%=M)>!&kpX/pXJL_dW<K@?'f\k:\ItHAC$<ne]MjE-
%?u4G%(ep#L40Xq2dlH7]f]A;nMC\*_2kf.b@jn1`'QeQT/SERJUH[+74Rbn"DEdiYh7^Yg*-,FQ0-upR"S513)n5'qHLSAhT$@rm
%!G^O\dljR,;7i618-(Wb>$&(+(F8i6F%2?M#[MKg/T>P^D+t1hY5+=4f5AV4CP&K8?Ou6cE4)nb,n6g#M,VbHl8!rGTIqh8N,CTI
%r:M(Q>eKCO*=7;"2QV+8?'_[=n@$Z6cKE/RlHa-0esP1tZ[lc%K@Y)%RPk8+A#RkhbtoF933s=:QPaR_#N4F6hc&3pfn2GQ@&BnC
%f7LX'Y*%nB4pePpf/85G`!A]E%N@!HVOPaqP_:RX2WBUR_5^e$kF(`]Z9U`pf-%@>d?19EC-bAE5h9upTTesXa^'FRB`$:`<U+K'
%#UiG>_1>peW*e,Dcp=[=6dt[r1]WJ]';g3A?IK[1TH&%Z,\7N&lRgg!U;GF25&\'UTd9gCX'+-I%,`UFQsFXYP@obA\e2lK+t[?V
%PI6]b;-CdPXGgYiKC)\I.t&"lPN%WXA>4$F*slR%m&.<i;rg]V)t/!mb]?Zd0@9fjiOJ[DKlD[@:,K\Ob[FBZ<qJba2T[sD;/>i,
%7)W5\ZU.oYN"#A6GmMb-M>8Td#<eNr=[Rg&oc584NHs9e&AS`,`):@n2Q3gpTn#=HOp]BsQHeRaMU;UQg"!FnQqb!O`&4o-:26_b
%`$*mkoE%X>(unQ8Z"Z:m$[T9]K7IPc>sgGCh_\NK`'i^0*aNd,R*co@ikdEqhITP6/`JO]+aF@r8H+#271u#h.3#o6qu@p)j45Vn
%i#"0n2rJ<BR(>m/]nWC3M)]OoOKte.Dd>QWiuhk4=e_Fa$b2aG"<I8F00ONS^C_)FSoI3Nn!:&)%u'0'mCTqsePN5n97JDkGBXD&
%WWdoi(o^F$r4NM1ci>sriBR/lMH&H$;I0##]Rf=e#BC8QKa9=]&?Ns5b%D_Eg#2#X"LY"=7j5\\-<@1%Zrc)7GupHl"E(RcfuH_M
%U!^sPV':5t!9'2jXoZ=7g'cP(12[N&1-ugofZ,2D>iXKp>@>UZ$+gAdRf]5@;3&7DOdC^[=\J\&'c7X9]5ilTM7D6gTik=8Ciu*`
%Qoc6>_RpqV*msRYf]HMaTtJEf>$_apA]*KC/7+,A'D[\qg2'q(N)!6OXHq`V56S,rIDOWg&++B"-"V.9,bggjA7o"3=meK8*LH,+
%7P1C-QSk4bpM%a3bSmY.JBq%s*8Sk/V06VuC35F0=qMP)!Ki/W0:C99Zl(U6:_!$6Al3D@q1bIu`RC(,.2i?>gT#,7$aqk1bbr["
%Q?JL6:t7mJC01+bfa\k`X5+YqA7.q<1)<=*c:o7cj=JL<1B=o3(#W'A$9VWe1C=tBWB!c/lh]/"I5@Mg@F3jEi-GASNN;.([r#N;
%7+:2W.\19W)]rZ;)(9.XL7;qJp<L1J1"4t<0D'k6A>tC0PfdNsn=OgC(l9RtKZL(>C*>,2I2.IJ6td;miti?s?(_>5mb-DrU$dX`
%KeI@9)B?'JmHm;G/7EU.rN"Ou)b!=MoX`3=]C,`no1BPm<fnP?6@kfpaotV7l<L%KH3BM7F9'+`N.)-ema_kGj+bs=3XNTd+^jT\
%,`N?$_el`MR^$a@8b?PHUqF3^eS7[tG+apGAm\b=;MQKg<IC;=:9HT8mU=&2f\d2\]^1i[o6KOJ',ZK*W"f4qH$%XM-uP,@_HFf8
%!^m8WJN,jUB+eh\BOgf.0t_X[4"St%K2cU<CaLoL,SWtQY,;usUC)2F>I!4!h5:#dFNXB1S^L`$/M<+s+\.FO/8"6%5sQb"P]91p
%!NtOV9A!SQ'qNHLkSmQA"W+6i59h?ii"CAVXQ"DLQB3>V^s&7]?M>d.p\!me\IkK$/BE;>IYJ@3h4\R(Klj[I"HQd,)$dC>g+nLs
%ad3G/X!W8`BX_fO[6Z^HqS$#5%AcG^%RkTj,)?e?B5@qRfm&`DTN`b0Y?"LcM2?m<8cat&A%&.VXR6'?<jdXqW6Ir;!61\?(#;di
%N';L<J'bIu%eLO<V(Ooh7AKZ@E\07u&\AE?>RA1Xl_/b979#Sq;epaSOlY1uUO?iS%FhKIdkN.'@BPu3@G2u%cZARIV9"cKBOWR(
%MHmC6"iYbAl)_%$92%,m!INMBX@Z\$6VB1<Nhn6PjVK07;MdL$L03$jim]A9c(K'G0iYLn-jE:E=@4U1"Z=L%Tt:rHKHF;a'ZgRb
%nWnDLNN,SJiP6Eg0<IZiSIr>*`K+[MS5?"$en'&?3E[q+0?`!=PZb%a9`:sH[]`&k-g/Y2\uD6&$WNgac!I&:X<J/;.L1n9_FNN_
%I@M@pd_k^b)C51oV!.s2?Yf1@K*N78k!i(fmbY_R15\)P$m76d7Jab4`H$aoV\(\F./>Z6DIaLH"^'T3*c[NVo01:p*f:/0+6Qe>
%3#etrIbbd$:5^>>.[f:F3[?)kIsMmI\J]guamZ5VqA>AfU_mO`3:@s!ACE")K2@74J'$N\2b3e/[`[il%R:9j[*;B"Y8'Gh;qKim
%$"Oh'j7T[*e"cmA@-Ao7Pn+(/7ao:HekfGUI=PiSjgObCo!r/@8>T<b+TYAsp#n.r/a.23:),?k44n?poZbU\>F.Z^h15p0!HaU*
%X:M#.)or^l4,?o,Ku2!:imB+IlP_"IhWio%\cW7YjTpj0LT^cTmXpjSqqfTGfdcGc5ChOZ3<u]0A^_>!]%PEaFq28aWB6K9ZnV\#
%/VdV)'WXHD-+GgAP,W\,&\ZM`\PdL11a%,63Md=Y5\,1P[eMS3`KJd^[,!Xi8?tY"])dU_oUq/4mW>eKksgcq9+#X$gu8RBqqV!p
%Sj08^PT3>X?j6Mid2I[Hc!!b@ShY@*S[i'mCe8DaJ>//-[Gj%S0,CHoM"EYdQ86R%L+]6!@VA0J#NbPOHDX_6a\%D/=.lc#OI4ki
%T0]GdfIrM?ZTm&hGNi6'E=dHWlhP=qPus==Y&Sroa6*S>:r0Ka394i%ipYJ6W21)j^8c0$2f%%IQWP'^o>#NWhj0"a1.F_g=d[rQ
%ddthCZ1CheBd8EJ'Cm+U8h)uY8g#r&0rZZ-eN8==dlnIdU<^.Q8hlZR7pKlPYF,%n^0ad7nZL=PFX`-C*CDgj<*S>kp!CiY$o6#j
%#^hheTie[AfEkW=I^'*UB*<l]^'Nk:c%'0gV/(9Eo8#Y&YrZ_=fOpQ`Q\^C=JXT<SA,Z.+b^-(h7I)%nHrr^0jllJsAKDMaYGE,F
%\jg10VkDPc@$)athGhk['nOP6CC:N7Jj\@P0nYL&k\d:J2--dhG$G3WH?eRaGF_!!Y#Puo?nF9'_VG)t%RHXIW?K90UBH8\%s?eO
%McQhC>JiH:X?qmi"ftthYE^LjW7+#e#PqU-%<OCB'.aTGj_X%)5<PQL`CqFi]_amc2o'T(D1C^U")FR'+G?KTUtRQo#6X_0!8G[8
%m2\P5[eU.4lKo^IbMogT^O*l`Jd,g$-^]4!Xta,.n^\Iq$ili%NdFoBM\PO)'h=CtKI8&`VA;JTJ2U;bPduRU/t+8E-FoU]8;GQ]
%Iu;O<6)"$ZeE(H.+3^Zg5@?bY,*snRBK:TSlbG7/+P7FOPUkf5Wg6P.n@%3]e?;O.103iKJ?-5]H/^lMlq[j7=kE1cnY(+e(`-:M
%J8#*+bO0V.oj\6"*ak44NJ)N%L9Vtek!(6%&r%fn3i)0q*l\/J_f%UNBJ8JqA(jl1.S=W-H`.&X$Ad#u*DB<`j+M6K"2T(Y_14^o
%gZM>p'*@R'h&\dAoF09f!&Lr.k482GGK-/X1E(,q9[&BF)B.7[pC4#H,jeM&Z&T6rLLqZBoe5iOntj,,]0fV5V(O@?W"+#-/m[%#
%VWM4o^c4BGB]s6W"06EH8Dk(_'WJR@iF213ifDpj?Knur87gVJi$XB(rAu.CE_ga_?L8=5E>h8";m2>"s$lVOa[afEV4Pfj9`U*(
%jT3n:ffbsjD"Cf4lgt!T]u+EbMF[5/^+Lm7rkX0q$-PHK.P,ld%1VYU5*U@R8*.%MnHE[I`%7:K])]kT"Jj"6m4&lpS]+1d,ha3F
%&3['2419hB>aL'lqb[I=bb5XMS$iuk0Qb:B1MFU<'*@g9VZ5FlXnbIOS(H>dP5JmiPJfBP(iC\XRoGagp"8MY`9+lTm`jS^No)tE
%&0:mk<bNlN:f-qkhc$]J(Ro<X[B4AHTrD!Q(3]BGc2*0eI!g[skR-d0oJ*^O5.R"+CcrS0M.E/Z*9,Z5?<^mUJaMHQp3BOM<:f_k
%lPRj9:)?5TCt-c\+D:/TRod9338Y/3&c&.ZUITGKFK;PeJ40P/f,dkph)Or4[J8=L9j7Ak%4uLU97H5']qa<,RD"43G?`gOjI`fS
%io6B63FK6HdBkAhDo"O!$E._=:Tb_275@9!+PkJ@1"&fq,io00aE4Ij\O_-JiZo\H>,F$O2*`i[q.l>,i`.(N?:>US^-^!tPEqm.
%'`G2a7d,WYZZ#s>+B=i>,H=_u*&\]1N!HQ`k'hn[He/d]e)0-YiG_tl6S*e"H6oR_0Eh-?g`&rM($(,U1s@TS0%>M$SMb:5lK\,B
%pl(KCc:[(ehiBka)@G0U-N8$)'W<#]aWp\l2!rCB,7>iSki)AiHXn0mO0!/(N"0["MuM7VXFiidn?Qu)CV^QoIXg%7&4kNant@J-
%0Ui2Ab82`o/r_\uG")hbU[%gmW,9PPk,@=Y@ocS!?R0X5T?I3Hji!\-)[c%UV=sI?a0\;q^/BhcS5jFoU\.H@oela&XQbbc<qGE$
%rZVE='IZmD-lVjcYPYcc8(1YRJu7E/IRi%le:?n8&!eaZ6K+*PJ8X@XhcF_2FpMfG&NB^5#>RVb_gcWmmEU!5*B/G]G)C8kWZ^L`
%fem^hQb=!oOTMLLcF$BuWmj2F8lQ8Me#Hdu[sE[>9O;0,4<l>o2pSg5e3WX$D;SS*e;W><I=JBb4.6>On!MG'JtD^'W9C!k6NPd?
%6k@EJ$d\m#((LtgN+O+]dLk>E4M/ULB,&i%B#"4GED^li[1Qd#7a.at#KqpWf;UtNi\L3)3ShUE%%Zk3,0obPIikk+XYJP@_%XM.
%gU@t#!KCF^]0!0Sd<0Z#Ge=)YR[h;q;[pk/ApF\[>;XmU%C7$/U6O)%!D&O'L,p%!Ti$Ds`#VK1oqGl9UT;6JHW,kM$]NLo>6WKA
%kaO@)aZ</@d%KW!bt'4o=_,Q$M-tmjEtF-Y1FYJ3gGc$/YI]01'B:Sl#Le.%mb/521EZ&a6%^[&O?HdCh_HK?L/b?s19\rF8gQ>m
%VHc=['-N.-@]Bqg8>U@953m/-/e_+:8%,t(D/>B(7%?$PA5tE77Z+NB4d.@B3^i#ndc!9n6:'_LkUM)O\o4aj``)cUp%_n/L3Y&V
%\7<W/"gDG0&`htt7&A>QqCRkOQSV,P;,D!jNAI'+#?SLhO>M$tKr8XhJJ?sQMoO)J&!IZALZ:(gMfT>P6FuF@JX8oGDOq@([)7<T
%b1d3eog)*!PjeI/<mh/7otfC3"54ldTX*G1iV$Qt!c?XP6OmUja<aRooK0E?ZLXjQ"/G%H?5C\6;`KB(:=CH.MpBjV+iPWV"%.M/
%OR#`H24Rm;_\XWA[=SenD6d`@,<DLuHQh/ln<#>3RQ;98/]Y27L)Vs@[1s3!qE`Ws-k]ep@H\cFmb<Xc">d5[q/4;+\q"BQrKijD
%iU/BZl`<fB0<^DK1ER$m1)+f1MF4Y;,m$!5<<K?U*MI0D9^65aT?AAg*,SDU-r_N.I>ab8N:Uj=48M.kK<KGFmGuA@/;d(k,S^J*
%c.?#[+SkBA-RhYH6Br_8aX!.8rPuWufl%#N\G=aArpIJ%\Np8^LU*j',]eVJEl.QaV;O*q/jhu6+<!UGgcu:u)W8P"ksL)&8D'M$
%?5P+Cni_(!W1A+g6Z_'f9F\0H<R!e?P)9C`.$5!LW/KY-5Am'&!=,C*4A-4i;X>skr>$Z;+2%$r'+.6Q]e5b7UbhE=s.B>/2>6M=
%;ua'$o[eTkk<K"(T7?[qLMPgDs7sujq>%f'o&p&P5CWUnO+6rJhu<PgIt%4b?iS8UqtY_Js6Jc"^\n#=s7L<Fr;?,ps7UC2LCkT=
%+8F<Wromehiue<jrrC>V:LO~>
%AI9_PrivateDataEnd
